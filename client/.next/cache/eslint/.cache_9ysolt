[{"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/TypeScript/ProductCard.type.ts":"1","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/TypeScript/authTypes.ts":"2","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/TypeScript/basePageTypes.ts":"3","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/TypeScript/categoryList.type.ts":"4","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/TypeScript/checkoutTypes.ts":"5","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/TypeScript/mainTypes.ts":"6","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/TypeScript/smtpjs.d.ts":"7","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/CategorySlice.tsx":"8","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/cartControlSlice.ts":"9","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/cartSlice.ts":"10","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/favouriteSlice.tsx":"11","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/fetchItemData.tsx":"12","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/hooks.ts":"13","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/itemSlice.tsx":"14","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/sessionSlice.ts":"15","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/store.ts":"16","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/thunkActionsAuth.ts":"17","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/thunkActionsCart.ts":"18","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/thunkActionsFavourite.tsx":"19","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/types/cartControlTypes.ts":"20","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/types/cartTypes.ts":"21","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/types/sessionTypes.ts":"22","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/About/AboutComp.tsx":"23","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/About/Map.tsx":"24","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/AdminInput.tsx":"25","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/CheckBox.tsx":"26","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/CustomButton.tsx":"27","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/CustomFormControl.tsx":"28","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/FormAddOrder/FormAddOrder.tsx":"29","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/FormAddOrder/api.ts":"30","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/FormAddOrder/types.ts":"31","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/FormAddUser/FormAddUser.tsx":"32","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/FormAddUser/api.ts":"33","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/FormCatCol.tsx":"34","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/Formas.tsx":"35","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/HTTP/adminApi.ts":"36","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/InfoModal.jsx":"37","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/InputFiles.tsx":"38","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/ItemInputs.tsx":"39","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/ItemTable/ItemTable.tsx":"40","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/Modal/CatModal/CatModal.tsx":"41","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/Modal/ColModal/ColModal.tsx":"42","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/Modal/ItemModal/ItemModal.tsx":"43","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/Modal/MatModal/MatModal.tsx":"44","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/PromocodeComp/PromocodeComp.tsx":"45","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/PromocodeComp/api.ts":"46","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/PromocodeComp/types.ts":"47","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/ResultContainerAddOrder/ResultContainerAddOrder.tsx":"48","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/TasksForm/TasksForm.tsx":"49","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/TasksForm/myFontBinary.ts":"50","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/TasksForm/taskformTypes.ts":"51","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/infoContainer/InfoContainer.tsx":"52","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/oneUserComp/OneUserComp.tsx":"53","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/oneUserComp/types.ts":"54","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/order/OrderAdmin.tsx":"55","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/order/types.ts":"56","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/CartMin.tsx":"57","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/CommentForm.tsx":"58","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/CustomFormPart.tsx":"59","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/DelBtn.tsx":"60","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/DeliveryForm.tsx":"61","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/ItemDisplay.tsx":"62","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/LSCart/LSItemDisplay.tsx":"63","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/MeasurementsForm.tsx":"64","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/PersonalDataForm.tsx":"65","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/RightBlock.tsx":"66","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/UrgencyForm.tsx":"67","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/coatSizeForm.tsx":"68","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/furCoatSizeForm.tsx":"69","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/trenchSizeForm.tsx":"70","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/trousersSizeForm.tsx":"71","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/useCartControl.ts":"72","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/CartButton/CartButton.tsx":"73","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Footer/Footer.tsx":"74","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ItemLeftPart/ItemLeftPart.tsx":"75","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ItemMaterials/ItemMaterials.tsx":"76","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ItemPage/BasePage.tsx":"77","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ItemRightPart/ItemRightPart.tsx":"78","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Layout/Layout.tsx":"79","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Navbar/Logo.tsx":"80","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Navbar/MobileMenu/MobileMenu.tsx":"81","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Navbar/Navbar.tsx":"82","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Navbar/NavigationMenu/NavigationMenu.tsx":"83","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Navbar/NavigationMenu/fetchNavigationMenuData.tsx":"84","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ProductCard/CartIconButton.tsx":"85","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ProductCard/FavoriteIconButton.tsx":"86","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ProductCard/ProductCard.tsx":"87","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ProductCard/thunkProduct.ts":"88","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ProductCard/useProductCardLogic.ts":"89","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/SearchBar/SearchBar.tsx":"90","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/SearchBar/fetchSearch.ts":"91","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/SearchContainer/SearchContainer.tsx":"92","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/SearchContainer/types.ts":"93","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/SearchItemCard/SearchItemCard.tsx":"94","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/SearchItemCard/types.ts":"95","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Social/Social.tsx":"96","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ToTopArrow/ToTopArrow.tsx":"97","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/favorites/Favorites.tsx":"98","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/modalEditInfo/FetchEditUserInfo.ts":"99","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/modalEditInfo/ModalEditInfo.tsx":"100","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/modalEditInfo/types.ts":"101","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/orderComp/OrderComp.tsx":"102","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/orderComp/types.ts":"103","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/orders/FetchOrderData.ts":"104","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/orders/Orders.tsx":"105","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/orders/types.ts":"106","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/profile/FetchUserInfo.ts":"107","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/profile/Profile.tsx":"108","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/profile/userDataTypes.ts":"109","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/sureModal/SureModal.tsx":"110","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/sureModal/types.ts":"111","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/carousel/CustomCarousel.tsx":"112","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/catalog/CategoryList/categoryList.tsx":"113","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/cookieConsent/CookieConsent.tsx":"114","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/customImgModal/CustomImgModal.tsx":"115","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/customList/CustomList.tsx":"116","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/likeButton/LikeButton.tsx":"117","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/main/BottomBlock.tsx":"118","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/main/HorizontalBlock.tsx":"119","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/main/VerticalBlock.tsx":"120","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/main/consts.ts":"121","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/navAdminComp/NavAdminComp.tsx":"122","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/navFAQComp/NavFAQComp.tsx":"123","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/404.tsx":"124","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/FAQ/deliveryFAQ.tsx":"125","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/FAQ/measurementsFAQ.tsx":"126","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/FAQ/orderFAQ.tsx":"127","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/FAQ/returnFAQ.tsx":"128","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/_app.tsx":"129","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/_document.tsx":"130","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/about.tsx":"131","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/account.tsx":"132","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/address.tsx":"133","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/admin/content.tsx":"134","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/admin/newOrder.tsx":"135","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/admin/ordersHistory.tsx":"136","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/admin/promo.tsx":"137","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/admin/tasks.tsx":"138","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/catalog/[category]/[item].tsx":"139","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/catalog/[category].tsx":"140","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/catalog/all-items.tsx":"141","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/catalog/bestsellers.tsx":"142","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/catalog/collection.tsx":"143","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/catalog/index.tsx":"144","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/catalog/new-arrivals.tsx":"145","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/catalog/sale.tsx":"146","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/checkout.tsx":"147","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/favorites.tsx":"148","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/forgot-pass.tsx":"149","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/index.tsx":"150","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/privacy.tsx":"151","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/reset-pass/[token].tsx":"152","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/signin.tsx":"153","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/signup.tsx":"154","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/thankyou.tsx":"155","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/LookBook/LookBookContainer/LookBookContainer.tsx":"156","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/LookBook/data.ts":"157","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/collection.tsx":"158"},{"size":430,"mtime":1695403238362,"results":"159","hashOfConfig":"160"},{"size":168,"mtime":1693991722983,"results":"161","hashOfConfig":"160"},{"size":683,"mtime":1695201957777,"results":"162","hashOfConfig":"160"},{"size":181,"mtime":1695133832760,"results":"163","hashOfConfig":"160"},{"size":838,"mtime":1694602826578,"results":"164","hashOfConfig":"160"},{"size":487,"mtime":1694602826578,"results":"165","hashOfConfig":"160"},{"size":212,"mtime":1695291661244,"results":"166","hashOfConfig":"160"},{"size":2145,"mtime":1695403238363,"results":"167","hashOfConfig":"160"},{"size":4466,"mtime":1695201957778,"results":"168","hashOfConfig":"160"},{"size":999,"mtime":1695133832760,"results":"169","hashOfConfig":"160"},{"size":1450,"mtime":1695201957778,"results":"170","hashOfConfig":"160"},{"size":2737,"mtime":1695133832760,"results":"171","hashOfConfig":"160"},{"size":344,"mtime":1691596069654,"results":"172","hashOfConfig":"160"},{"size":1574,"mtime":1695201957779,"results":"173","hashOfConfig":"160"},{"size":1337,"mtime":1695133832760,"results":"174","hashOfConfig":"160"},{"size":809,"mtime":1695133832760,"results":"175","hashOfConfig":"160"},{"size":3803,"mtime":1695716946945,"results":"176","hashOfConfig":"160"},{"size":3775,"mtime":1695886804218,"results":"177","hashOfConfig":"160"},{"size":3022,"mtime":1695133832760,"results":"178","hashOfConfig":"160"},{"size":665,"mtime":1695201957779,"results":"179","hashOfConfig":"160"},{"size":1821,"mtime":1695201957779,"results":"180","hashOfConfig":"160"},{"size":1134,"mtime":1695291661244,"results":"181","hashOfConfig":"160"},{"size":5993,"mtime":1695890899686,"results":"182","hashOfConfig":"160"},{"size":1605,"mtime":1695201957780,"results":"183","hashOfConfig":"160"},{"size":740,"mtime":1695201957781,"results":"184","hashOfConfig":"160"},{"size":974,"mtime":1695201957781,"results":"185","hashOfConfig":"160"},{"size":539,"mtime":1695201957781,"results":"186","hashOfConfig":"160"},{"size":1203,"mtime":1695201957781,"results":"187","hashOfConfig":"160"},{"size":51441,"mtime":1695377895227,"results":"188","hashOfConfig":"160"},{"size":1135,"mtime":1695201957782,"results":"189","hashOfConfig":"160"},{"size":423,"mtime":1695203445347,"results":"190","hashOfConfig":"160"},{"size":103,"mtime":1693140628324,"results":"191","hashOfConfig":"160"},{"size":0,"mtime":1693140628324,"results":"192","hashOfConfig":"160"},{"size":3825,"mtime":1695201957783,"results":"193","hashOfConfig":"160"},{"size":1457,"mtime":1695201957783,"results":"194","hashOfConfig":"160"},{"size":4551,"mtime":1695201957783,"results":"195","hashOfConfig":"160"},{"size":949,"mtime":1694602826579,"results":"196","hashOfConfig":"160"},{"size":1183,"mtime":1695201957783,"results":"197","hashOfConfig":"160"},{"size":1609,"mtime":1695201957783,"results":"198","hashOfConfig":"160"},{"size":2348,"mtime":1695549471502,"results":"199","hashOfConfig":"160"},{"size":5141,"mtime":1695201957784,"results":"200","hashOfConfig":"160"},{"size":5851,"mtime":1695201957784,"results":"201","hashOfConfig":"160"},{"size":9408,"mtime":1695201957784,"results":"202","hashOfConfig":"160"},{"size":5670,"mtime":1695201957784,"results":"203","hashOfConfig":"160"},{"size":5660,"mtime":1695201957785,"results":"204","hashOfConfig":"160"},{"size":2281,"mtime":1693916090287,"results":"205","hashOfConfig":"160"},{"size":123,"mtime":1693490794398,"results":"206","hashOfConfig":"160"},{"size":1696,"mtime":1695201957785,"results":"207","hashOfConfig":"160"},{"size":11741,"mtime":1695201957786,"results":"208","hashOfConfig":"160"},{"size":174476,"mtime":1693470003175,"results":"209","hashOfConfig":"160"},{"size":2623,"mtime":1695201957786,"results":"210","hashOfConfig":"160"},{"size":2243,"mtime":1693140628326,"results":"211","hashOfConfig":"160"},{"size":1142,"mtime":1692630946213,"results":"212","hashOfConfig":"160"},{"size":113,"mtime":1692630946214,"results":"213","hashOfConfig":"160"},{"size":817,"mtime":1693056501457,"results":"214","hashOfConfig":"160"},{"size":438,"mtime":1693056501457,"results":"215","hashOfConfig":"160"},{"size":7000,"mtime":1695886804219,"results":"216","hashOfConfig":"160"},{"size":1247,"mtime":1695133832761,"results":"217","hashOfConfig":"160"},{"size":777,"mtime":1695547755732,"results":"218","hashOfConfig":"160"},{"size":569,"mtime":1695201957786,"results":"219","hashOfConfig":"160"},{"size":5355,"mtime":1695133832761,"results":"220","hashOfConfig":"160"},{"size":5921,"mtime":1695547755732,"results":"221","hashOfConfig":"160"},{"size":8466,"mtime":1695716946946,"results":"222","hashOfConfig":"160"},{"size":3427,"mtime":1695133832762,"results":"223","hashOfConfig":"160"},{"size":3580,"mtime":1695133832762,"results":"224","hashOfConfig":"160"},{"size":5517,"mtime":1695547755732,"results":"225","hashOfConfig":"160"},{"size":1375,"mtime":1695133832762,"results":"226","hashOfConfig":"160"},{"size":2439,"mtime":1695201957786,"results":"227","hashOfConfig":"160"},{"size":2225,"mtime":1695201957787,"results":"228","hashOfConfig":"160"},{"size":1347,"mtime":1695133832762,"results":"229","hashOfConfig":"160"},{"size":750,"mtime":1695133832763,"results":"230","hashOfConfig":"160"},{"size":26047,"mtime":1695547755733,"results":"231","hashOfConfig":"160"},{"size":4714,"mtime":1695403238364,"results":"232","hashOfConfig":"160"},{"size":5108,"mtime":1695890899686,"results":"233","hashOfConfig":"160"},{"size":1396,"mtime":1693396099289,"results":"234","hashOfConfig":"160"},{"size":3872,"mtime":1693828448065,"results":"235","hashOfConfig":"160"},{"size":2444,"mtime":1695201957787,"results":"236","hashOfConfig":"160"},{"size":2777,"mtime":1693828448065,"results":"237","hashOfConfig":"160"},{"size":968,"mtime":1695201957788,"results":"238","hashOfConfig":"160"},{"size":7722,"mtime":1695201957789,"results":"239","hashOfConfig":"160"},{"size":2129,"mtime":1695133832763,"results":"240","hashOfConfig":"160"},{"size":7738,"mtime":1695291661245,"results":"241","hashOfConfig":"160"},{"size":3872,"mtime":1695740094724,"results":"242","hashOfConfig":"160"},{"size":1606,"mtime":1694175953966,"results":"243","hashOfConfig":"160"},{"size":862,"mtime":1695403238364,"results":"244","hashOfConfig":"160"},{"size":919,"mtime":1695403238364,"results":"245","hashOfConfig":"160"},{"size":3405,"mtime":1695291661245,"results":"246","hashOfConfig":"160"},{"size":2273,"mtime":1695403238365,"results":"247","hashOfConfig":"160"},{"size":9081,"mtime":1695403238365,"results":"248","hashOfConfig":"160"},{"size":3125,"mtime":1693396099290,"results":"249","hashOfConfig":"160"},{"size":374,"mtime":1693834072906,"results":"250","hashOfConfig":"160"},{"size":1404,"mtime":1695201957790,"results":"251","hashOfConfig":"160"},{"size":119,"mtime":1692102696168,"results":"252","hashOfConfig":"160"},{"size":1306,"mtime":1693828529954,"results":"253","hashOfConfig":"160"},{"size":142,"mtime":1695204067152,"results":"254","hashOfConfig":"160"},{"size":705,"mtime":1693991722984,"results":"255","hashOfConfig":"160"},{"size":963,"mtime":1695201957791,"results":"256","hashOfConfig":"160"},{"size":3561,"mtime":1695201957792,"results":"257","hashOfConfig":"160"},{"size":1130,"mtime":1695201957793,"results":"258","hashOfConfig":"160"},{"size":3215,"mtime":1695201957793,"results":"259","hashOfConfig":"160"},{"size":403,"mtime":1695201957794,"results":"260","hashOfConfig":"160"},{"size":5883,"mtime":1695201957794,"results":"261","hashOfConfig":"160"},{"size":97,"mtime":1692265152484,"results":"262","hashOfConfig":"160"},{"size":844,"mtime":1692630946214,"results":"263","hashOfConfig":"160"},{"size":1046,"mtime":1695547759578,"results":"264","hashOfConfig":"160"},{"size":1026,"mtime":1695201957795,"results":"265","hashOfConfig":"160"},{"size":410,"mtime":1691692570594,"results":"266","hashOfConfig":"160"},{"size":2421,"mtime":1695201957795,"results":"267","hashOfConfig":"160"},{"size":171,"mtime":1693991898000,"results":"268","hashOfConfig":"160"},{"size":2142,"mtime":1695201957795,"results":"269","hashOfConfig":"160"},{"size":78,"mtime":1691692570595,"results":"270","hashOfConfig":"160"},{"size":1336,"mtime":1693205886499,"results":"271","hashOfConfig":"160"},{"size":1101,"mtime":1695403238366,"results":"272","hashOfConfig":"160"},{"size":588,"mtime":1693828448067,"results":"273","hashOfConfig":"160"},{"size":1085,"mtime":1695201957796,"results":"274","hashOfConfig":"160"},{"size":1190,"mtime":1693205886499,"results":"275","hashOfConfig":"160"},{"size":2789,"mtime":1695403238366,"results":"276","hashOfConfig":"160"},{"size":3236,"mtime":1695201957796,"results":"277","hashOfConfig":"160"},{"size":832,"mtime":1695547755734,"results":"278","hashOfConfig":"160"},{"size":837,"mtime":1695547755735,"results":"279","hashOfConfig":"160"},{"size":566,"mtime":1694602826584,"results":"280","hashOfConfig":"160"},{"size":2768,"mtime":1693828529955,"results":"281","hashOfConfig":"160"},{"size":1938,"mtime":1692283130999,"results":"282","hashOfConfig":"160"},{"size":1208,"mtime":1693917795832,"results":"283","hashOfConfig":"160"},{"size":1643,"mtime":1695547759578,"results":"284","hashOfConfig":"160"},{"size":5985,"mtime":1693555773282,"results":"285","hashOfConfig":"160"},{"size":2701,"mtime":1695547759579,"results":"286","hashOfConfig":"160"},{"size":2808,"mtime":1692351224580,"results":"287","hashOfConfig":"160"},{"size":398,"mtime":1691606930247,"results":"288","hashOfConfig":"160"},{"size":570,"mtime":1693470003175,"results":"289","hashOfConfig":"160"},{"size":461,"mtime":1693056501462,"results":"290","hashOfConfig":"160"},{"size":2761,"mtime":1693834072906,"results":"291","hashOfConfig":"160"},{"size":3791,"mtime":1695201957796,"results":"292","hashOfConfig":"160"},{"size":4352,"mtime":1695201957797,"results":"293","hashOfConfig":"160"},{"size":838,"mtime":1695133832765,"results":"294","hashOfConfig":"160"},{"size":68143,"mtime":1695201957797,"results":"295","hashOfConfig":"160"},{"size":712,"mtime":1695133832765,"results":"296","hashOfConfig":"160"},{"size":62873,"mtime":1695201957797,"results":"297","hashOfConfig":"160"},{"size":5075,"mtime":1695201957797,"results":"298","hashOfConfig":"160"},{"size":1868,"mtime":1695201957797,"results":"299","hashOfConfig":"160"},{"size":860,"mtime":1695291661246,"results":"300","hashOfConfig":"160"},{"size":889,"mtime":1695291661246,"results":"301","hashOfConfig":"160"},{"size":3032,"mtime":1695291661246,"results":"302","hashOfConfig":"160"},{"size":1731,"mtime":1695201957798,"results":"303","hashOfConfig":"160"},{"size":929,"mtime":1695291661246,"results":"304","hashOfConfig":"160"},{"size":985,"mtime":1695201957798,"results":"305","hashOfConfig":"160"},{"size":3175,"mtime":1695133832766,"results":"306","hashOfConfig":"160"},{"size":561,"mtime":1693056270297,"results":"307","hashOfConfig":"160"},{"size":3305,"mtime":1695291661246,"results":"308","hashOfConfig":"160"},{"size":3478,"mtime":1694602826584,"results":"309","hashOfConfig":"160"},{"size":37634,"mtime":1693056270297,"results":"310","hashOfConfig":"160"},{"size":4117,"mtime":1695291661247,"results":"311","hashOfConfig":"160"},{"size":3964,"mtime":1695716946947,"results":"312","hashOfConfig":"160"},{"size":5060,"mtime":1695291661247,"results":"313","hashOfConfig":"160"},{"size":2482,"mtime":1695133832766,"results":"314","hashOfConfig":"160"},{"size":2315,"mtime":1695740094723,"results":"315","hashOfConfig":"160"},{"size":976,"mtime":1695740094723,"results":"316","hashOfConfig":"160"},{"size":3193,"mtime":1695740094724,"results":"317","hashOfConfig":"160"},{"filePath":"318","messages":"319","suppressedMessages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mrlcrm",{"filePath":"321","messages":"322","suppressedMessages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"324","messages":"325","suppressedMessages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"327","messages":"328","suppressedMessages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"330","messages":"331","suppressedMessages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","suppressedMessages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"336","messages":"337","suppressedMessages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"339","messages":"340","suppressedMessages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"342","messages":"343","suppressedMessages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"345","messages":"346","suppressedMessages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"348","messages":"349","suppressedMessages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"351","messages":"352","suppressedMessages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","suppressedMessages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"357","messages":"358","suppressedMessages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"360","messages":"361","suppressedMessages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"363","messages":"364","suppressedMessages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","suppressedMessages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","suppressedMessages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","suppressedMessages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"375","messages":"376","suppressedMessages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"378","messages":"379","suppressedMessages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"381","messages":"382","suppressedMessages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","suppressedMessages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"387","messages":"388","suppressedMessages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390"},{"filePath":"391","messages":"392","suppressedMessages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"394","messages":"395","suppressedMessages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"397","messages":"398","suppressedMessages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"400","messages":"401","suppressedMessages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"403","messages":"404","suppressedMessages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406"},{"filePath":"407","messages":"408","suppressedMessages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"410","messages":"411","suppressedMessages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"413","messages":"414","suppressedMessages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"416","messages":"417","suppressedMessages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"419","messages":"420","suppressedMessages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"422","messages":"423","suppressedMessages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"425","messages":"426","suppressedMessages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"428","messages":"429","suppressedMessages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"431","messages":"432","suppressedMessages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"434","messages":"435","suppressedMessages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"437","messages":"438","suppressedMessages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"440","messages":"441","suppressedMessages":"442","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443"},{"filePath":"444","messages":"445","suppressedMessages":"446","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447"},{"filePath":"448","messages":"449","suppressedMessages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451"},{"filePath":"452","messages":"453","suppressedMessages":"454","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"455"},{"filePath":"456","messages":"457","suppressedMessages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"459","messages":"460","suppressedMessages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"462","messages":"463","suppressedMessages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"465","messages":"466","suppressedMessages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"468","messages":"469","suppressedMessages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"471","messages":"472","suppressedMessages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"474","messages":"475","suppressedMessages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"477","messages":"478","suppressedMessages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"480","messages":"481","suppressedMessages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"483","messages":"484","suppressedMessages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"486","messages":"487","suppressedMessages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"489","messages":"490","suppressedMessages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"492","messages":"493","suppressedMessages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495"},{"filePath":"496","messages":"497","suppressedMessages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"499","messages":"500","suppressedMessages":"501","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"502","messages":"503","suppressedMessages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"505","messages":"506","suppressedMessages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"508","messages":"509","suppressedMessages":"510","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"511","messages":"512","suppressedMessages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"514","messages":"515","suppressedMessages":"516","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"517","messages":"518","suppressedMessages":"519","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"520","messages":"521","suppressedMessages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"523","messages":"524","suppressedMessages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"526","messages":"527","suppressedMessages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"529","messages":"530","suppressedMessages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"532","messages":"533","suppressedMessages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"535","messages":"536","suppressedMessages":"537","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"538","messages":"539","suppressedMessages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"541"},{"filePath":"542","messages":"543","suppressedMessages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"545"},{"filePath":"546","messages":"547","suppressedMessages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"549","messages":"550","suppressedMessages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"552","messages":"553","suppressedMessages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"555","messages":"556","suppressedMessages":"557","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"558","messages":"559","suppressedMessages":"560","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"561","messages":"562","suppressedMessages":"563","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"564","messages":"565","suppressedMessages":"566","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"567","messages":"568","suppressedMessages":"569","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"570","messages":"571","suppressedMessages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"573","messages":"574","suppressedMessages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"576","messages":"577","suppressedMessages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"579","messages":"580","suppressedMessages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"582","messages":"583","suppressedMessages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"585","messages":"586","suppressedMessages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588"},{"filePath":"589","messages":"590","suppressedMessages":"591","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"592","messages":"593","suppressedMessages":"594","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"595"},{"filePath":"596","messages":"597","suppressedMessages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"599","messages":"600","suppressedMessages":"601","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"602","messages":"603","suppressedMessages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"605","messages":"606","suppressedMessages":"607","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"608","messages":"609","suppressedMessages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"611","messages":"612","suppressedMessages":"613","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"614","messages":"615","suppressedMessages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"617","messages":"618","suppressedMessages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"620"},{"filePath":"621","messages":"622","suppressedMessages":"623","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"624"},{"filePath":"625","messages":"626","suppressedMessages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"628","messages":"629","suppressedMessages":"630","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"631","messages":"632","suppressedMessages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"634","messages":"635","suppressedMessages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"637","messages":"638","suppressedMessages":"639","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"640","messages":"641","suppressedMessages":"642","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"643","messages":"644","suppressedMessages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"646","messages":"647","suppressedMessages":"648","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"649","messages":"650","suppressedMessages":"651","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"652","messages":"653","suppressedMessages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"655","messages":"656","suppressedMessages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"658","messages":"659","suppressedMessages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"661","messages":"662","suppressedMessages":"663","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"664","messages":"665","suppressedMessages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"667"},{"filePath":"668","messages":"669","suppressedMessages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"671","messages":"672","suppressedMessages":"673","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"674","messages":"675","suppressedMessages":"676","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"677"},{"filePath":"678","messages":"679","suppressedMessages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"681","messages":"682","suppressedMessages":"683","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"684"},{"filePath":"685","messages":"686","suppressedMessages":"687","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"688","messages":"689","suppressedMessages":"690","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"691","messages":"692","suppressedMessages":"693","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"694","messages":"695","suppressedMessages":"696","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"697","messages":"698","suppressedMessages":"699","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"700","messages":"701","suppressedMessages":"702","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"703","messages":"704","suppressedMessages":"705","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"706","messages":"707","suppressedMessages":"708","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"709","messages":"710","suppressedMessages":"711","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"712","messages":"713","suppressedMessages":"714","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"715","messages":"716","suppressedMessages":"717","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"718","messages":"719","suppressedMessages":"720","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"721","messages":"722","suppressedMessages":"723","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"724","messages":"725","suppressedMessages":"726","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"727","messages":"728","suppressedMessages":"729","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"730"},{"filePath":"731","messages":"732","suppressedMessages":"733","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"734","messages":"735","suppressedMessages":"736","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"737","messages":"738","suppressedMessages":"739","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"740"},{"filePath":"741","messages":"742","suppressedMessages":"743","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"744"},{"filePath":"745","messages":"746","suppressedMessages":"747","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"748"},{"filePath":"749","messages":"750","suppressedMessages":"751","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"752"},{"filePath":"753","messages":"754","suppressedMessages":"755","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"756","messages":"757","suppressedMessages":"758","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"759","messages":"760","suppressedMessages":"761","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"762","messages":"763","suppressedMessages":"764","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"765","messages":"766","suppressedMessages":"767","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"768","messages":"769","suppressedMessages":"770","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"771","messages":"772","suppressedMessages":"773","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"774","messages":"775","suppressedMessages":"776","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"777","messages":"778","suppressedMessages":"779","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"780","messages":"781","suppressedMessages":"782","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"783","messages":"784","suppressedMessages":"785","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"786","messages":"787","suppressedMessages":"788","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"789","messages":"790","suppressedMessages":"791","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"792","messages":"793","suppressedMessages":"794","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"795","messages":"796","suppressedMessages":"797","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"798","messages":"799","suppressedMessages":"800","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"801","messages":"802","suppressedMessages":"803","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"804","messages":"805","suppressedMessages":"806","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"807","messages":"808","suppressedMessages":"809","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"810","messages":"811","suppressedMessages":"812","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/TypeScript/ProductCard.type.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/TypeScript/authTypes.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/TypeScript/basePageTypes.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/TypeScript/categoryList.type.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/TypeScript/checkoutTypes.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/TypeScript/mainTypes.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/TypeScript/smtpjs.d.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/CategorySlice.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/cartControlSlice.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/cartSlice.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/favouriteSlice.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/fetchItemData.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/hooks.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/itemSlice.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/sessionSlice.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/store.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/thunkActionsAuth.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/thunkActionsCart.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/thunkActionsFavourite.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/types/cartControlTypes.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/types/cartTypes.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/app/types/sessionTypes.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/About/AboutComp.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/About/Map.tsx",["813"],[],"import React, { useEffect, useRef, useState } from 'react';\nimport { YMaps, Map, Placemark, ObjectManager } from '@pbe/react-yandex-maps';\n\nconst MapComp = () => {\n  const mapRef = useRef(null);\n  const [isTooltipVisible, setTooltipVisible] = useState(false);\n  const mapCreated = useRef(false);\n\n  useEffect(() => {\n    if (!window || !window.ymaps || !mapRef.current || mapCreated.current) {\n      return;\n    }\n\n    mapCreated.current = true;\n\n    window.ymaps.ready(() => {\n      const map = new window.ymaps.Map(mapRef.current!, {\n        center: [56.316843, 43.98731],\n        zoom: 20,\n      });\n\n      const placemark = new window.ymaps.Placemark(\n        [56.316843, 43.98731],\n        {},\n        {\n          balloonContent:\n            'Адрес: Россия, г.Нижний Новгород, ул. Малая Покровская, 20',\n        }\n      );\n\n      placemark.events.add('mouseenter', () => {\n        if (!isTooltipVisible) {\n          setTooltipVisible(true);\n          map.balloon.open([56.316843, 43.98731], {\n            contentBody:\n              'Адрес: Россия, г.Нижний Новгород, ул. Малая Покровская, 20',\n          });\n        }\n      });\n\n      placemark.events.add('mouseleave', () => {\n        if (isTooltipVisible) {\n          setTooltipVisible(false);\n          map.balloon.close();\n        }\n      });\n\n      map.geoObjects.add(placemark);\n    });\n  }, []);\n\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  return <div style={{ height: 700, width: 600 }} ref={mapRef}></div>;\n};\n\nexport default MapComp;\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/AdminInput.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/CheckBox.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/CustomButton.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/CustomFormControl.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/FormAddOrder/FormAddOrder.tsx",["814"],[],"import React, { ChangeEvent, MouseEvent } from 'react';\nimport { Button, Checkbox, FormControl, Collapse, Grid } from '@mui/material';\nimport { useState, useEffect } from 'react';\nimport { IItem } from '@/components/accComp/orders/types';\nimport { getAllItems } from '@/components/SearchBar/fetchSearch';\nimport SearchItemCard from '@/components/SearchItemCard/SearchItemCard';\nimport styles from './FormAddOrder.module.css';\nimport { IPersonalData } from '@/TypeScript/checkoutTypes';\nimport { createOrderFetch, getAllMaterials } from './api';\nimport InfoModal from '../InfoModal';\nimport { useRouter } from 'next/router';\nimport ResultContainerAddOrder from '../ResultContainerAddOrder/ResultContainerAddOrder';\nimport { ParaglidingSharp } from '@mui/icons-material';\nimport { IMaterial, IMaterials, IParamsFormData } from './types';\n\nexport default function FormAddOrder() {\n  //! ВСЕ STATES\n\n  // стейт для модалки после оформления заказа\n  const [openCreateOrderModal, setOpenCreateOrderModal] = useState(false);\n\n  // стейт для инфо для модалки после оформления заказа\n  const [modalInfo, setModalInfo] = useState('');\n\n  // стейт для данных пользователя\n  const [personalData, setPersonalData] = useState<IPersonalData>({\n    name: '',\n    email: '',\n    phone: '',\n    telegram_instagram: '',\n  });\n\n  // стейт для всех товаров в выпадающий список\n  const [allItems, setAllItems] = useState<IItem[]>([]);\n\n  // стейт для выбранных товаров\n  const [selectedItems, setSelectedItems] = useState<IItem[]>([]);\n\n  // стейт для открытия/закрытия выпадающего списка\n  const [isOpen, setIsOpen] = useState(false);\n\n  // общая стоимость\n  const [cartTotal, setCartTotal] = useState(0);\n\n  // введенный промокод\n  const [promocode, setPromocode] = useState('');\n\n  // использовал ли юзер промокод\n  const [promoUsed, setPromoUsed] = useState(false);\n\n  // ошибка с промокодом\n  const [promocodeErr, setPromocodeErr] = useState('');\n\n  // размер скидки\n  const [discount, setDiscount] = useState(0);\n\n  // размер скидки в %\n  const [discountPercent, setDiscountPercent] = useState(0);\n\n  // скидка за 2+ товара\n  const [twoItemDiscount, setTwoItemDiscount] = useState(0);\n\n  // комментарии к заказу\n  const [commentsInput, setCommentsInput] = useState('');\n\n  // ошибка заказа или статус\n  const [orderStatus, setOrderStatus] = useState('');\n\n  // какая выбрана доставка\n  const [selectedDelivery, setSelectedDelivery] = useState('showroom');\n\n  // чекбокс срочного пошива\n  const [urgentMaking, setUrgentMaking] = useState('');\n\n  // стоимость срочного пошива\n  const [urgencyFee, setUrgencyFee] = useState(0);\n\n  const [selectedItemsMaterials, setSelectedItemsMaterials] =\n    useState<IMaterials>({});\n\n  // Объявление состояния\n  const [paramsFormData, setParamsFormData] = useState<IParamsFormData>({});\n\n  // форма адреса\n  const [addressInputs, setAddressInputs] = useState({\n    city: '',\n    street: '',\n    number: '',\n    flat: '',\n  });\n\n  // записывет параметры товаров по индексу в массиве\n  const [userParams, setUserParams] = useState(\n    Array(selectedItems.length).fill('')\n  );\n\n  // стоимость доставки\n  const [deliveryCost, setDeliveryCost] = useState(0);\n\n  // отображать или нет форму адреса\n  const [showAddressInputs, setShowAddressInputs] = useState(false);\n\n  //! --------------------------------\n\n  //! Расчет стоимости\n\n  useEffect(() => {\n    const subtotal = selectedItems.reduce((sum, item) => sum + item.price, 0);\n    // фильтруем только жакеты\n    const jacketItems = selectedItems.filter((item) => item.category_id === 3);\n\n    if (selectedItems.length > 2) {\n      // если больше 2х товаров в корзине скидка 5%\n      const discountPercentage = 0.05;\n      // считаем размер скидки\n      const discountAmount = subtotal * discountPercentage;\n      // устанавливаем размер скидки для двух+ товаров\n      setTwoItemDiscount(discountAmount);\n      // если есть скидка по промокоду, то считаем с учетом той скидки\n      if (discount) {\n        // считает размер новой скидки по ее проценту\n        const newDisc = discountPercent * subtotal;\n        // записываем размер скидки в стейт\n        setDiscount(newDisc);\n        // пересчитываем и устанавливаем новый тотал\n        const updTotal = subtotal - newDisc - discountAmount + deliveryCost;\n        setCartTotal(updTotal);\n        if (urgentMaking) {\n          // если срочный пошив, считает 20% от корзины и устанавливаем размер стоимости пошива\n          const twentyPercentOfSubtotal = (subtotal * 20) / 100;\n          setUrgencyFee(twentyPercentOfSubtotal);\n          // обновляем ИТОГО с учетом скидок, срочного пошива и доставки\n          const updatedTotal =\n            subtotal -\n            newDisc -\n            discountAmount +\n            deliveryCost +\n            twentyPercentOfSubtotal;\n          setCartTotal(updatedTotal);\n        } else {\n          // если несрочно - то считаем тотал с учетом скидок и доставки\n          const updatedTotal =\n            subtotal - newDisc - discountAmount + deliveryCost;\n          setDiscount(newDisc);\n          setCartTotal(updatedTotal);\n          setUrgencyFee(0);\n        }\n      } else {\n        // если скидки нет (от промокода), то считаем так же срочную и несрочную доставку\n        if (urgentMaking) {\n          const twentyPercentOfSubtotal = (subtotal * 20) / 100;\n          setUrgencyFee(twentyPercentOfSubtotal);\n          const updatedTotal =\n            subtotal -\n            discount -\n            discountAmount +\n            deliveryCost +\n            twentyPercentOfSubtotal;\n          setCartTotal(updatedTotal);\n        } else {\n          const updatedTotal =\n            subtotal - discount - discountAmount + deliveryCost;\n          setCartTotal(updatedTotal);\n          setUrgencyFee(0);\n        }\n      }\n    } else if (jacketItems.length > 2) {\n      // если больше 2 товаров категории жакет, то подсчитываем их стоимость\n      const subtotalJackets = jacketItems.reduce(\n        (sum, item) => sum + item.price,\n        0\n      );\n      // считаем размер скидки 5% и пишем в стейт\n      const discountPercentage = 0.05;\n      const discountAmount = subtotalJackets * discountPercentage;\n      setTwoItemDiscount(discountAmount);\n      if (discount) {\n        // те же расчеты если есть скидка по промокоду\n        const newDisc = discountPercent * subtotal;\n        setDiscount(newDisc);\n        const updTotal = subtotal - newDisc - discountAmount + deliveryCost;\n        setCartTotal(updTotal);\n        if (urgentMaking) {\n          // те же расчеты если срочный пошив\n          const twentyPercentOfSubtotal = (subtotal * 20) / 100;\n          setUrgencyFee(twentyPercentOfSubtotal);\n          const updatedTotal =\n            subtotal -\n            newDisc -\n            discountAmount +\n            deliveryCost +\n            twentyPercentOfSubtotal;\n          setCartTotal(updatedTotal);\n        } else {\n          // те же расчеты если несрочный пошив\n          const updatedTotal =\n            subtotal - newDisc - discountAmount + deliveryCost;\n          setDiscount(newDisc);\n          setCartTotal(updatedTotal);\n          setUrgencyFee(0);\n        }\n      } else {\n        // если нет скидки по промокоду\n        if (urgentMaking) {\n          // те же расчеты если срочный пошив\n\n          const twentyPercentOfSubtotal = (subtotal * 20) / 100;\n          setUrgencyFee(twentyPercentOfSubtotal);\n          const updatedTotal =\n            subtotal -\n            discount -\n            discountAmount +\n            deliveryCost +\n            twentyPercentOfSubtotal;\n          setCartTotal(updatedTotal);\n        } else {\n          // те же расчеты несрочный пошив\n          const updatedTotal =\n            subtotal - discount - discountAmount + deliveryCost;\n          setCartTotal(updatedTotal);\n          setUrgencyFee(0);\n        }\n      }\n    } else {\n      // рассчитываем итоговую стоимость, если нет автоматических скидок по 2+ товарам категории\n      setTwoItemDiscount(0);\n      if (discount) {\n        // те же расчеты с учетом скидки по промокоду\n        const newDisc = discountPercent * subtotal;\n        setDiscount(newDisc);\n        const updTotal = subtotal - newDisc + deliveryCost;\n        setCartTotal(updTotal);\n        if (urgentMaking) {\n          // те же расчеты со срочным пошивом\n          const twentyPercentOfSubtotal = (subtotal * 20) / 100;\n          setUrgencyFee(twentyPercentOfSubtotal);\n          const updatedTotal =\n            subtotal - discount + deliveryCost + twentyPercentOfSubtotal;\n          setCartTotal(updatedTotal);\n        } else {\n          // те же расчеты с несрочным пошивом\n          const updatedTotal = subtotal - discount + deliveryCost;\n          setCartTotal(updatedTotal);\n          setUrgencyFee(0);\n        }\n      } else {\n        // те же расчеты когда нет скидки по промокоду\n        if (urgentMaking) {\n          // те же расчеты со срочным пошивом\n          const twentyPercentOfSubtotal = (subtotal * 20) / 100;\n          setUrgencyFee(twentyPercentOfSubtotal);\n          const updatedTotal =\n            subtotal - discount + deliveryCost + twentyPercentOfSubtotal;\n          setCartTotal(updatedTotal);\n        } else {\n          // те же расчеты с несрочным пошивом\n          const updatedTotal = subtotal + deliveryCost;\n          setCartTotal(updatedTotal);\n          setUrgencyFee(0);\n        }\n      }\n    }\n  }, [\n    selectedItems,\n    discount,\n    twoItemDiscount,\n    deliveryCost,\n    urgentMaking,\n    cartTotal,\n  ]);\n\n  //! Расчет стоимости заказа в зависимости от выбранного способа получения\n\n  useEffect(() => {\n    // рассчитывает стоимость доставки, если в шоурум - 0, если по адресу считает 300\n    if (selectedDelivery === 'showroom') {\n      setDeliveryCost(0);\n      setShowAddressInputs(false);\n    } else {\n      setDeliveryCost(300);\n      setShowAddressInputs(true);\n    }\n  }, [selectedDelivery]);\n\n  //! --------------------------------\n\n  //! Хэндлеры\n\n  // записывает изменения в инпутах формы введения мерок\n  const handleChange = (\n    e: ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n    itemId: number\n  ) => {\n    setParamsFormData((prevState) => ({\n      ...prevState,\n      [itemId]: {\n        ...prevState[itemId],\n        [e.target.name]: e.target.value,\n      },\n    }));\n  };\n\n  // Изменение состояния формы при выборе материала\n  const handleMaterialChange = (\n    event: ChangeEvent<HTMLSelectElement>,\n    itemId: number\n  ) => {\n    setParamsFormData((prevState) => ({\n      ...prevState,\n      [itemId]: {\n        ...prevState[itemId],\n        [event.target.name]: event.target.value,\n      },\n    }));\n  };\n\n  // Сохранение формы\n  const handleSaveSizesInputs = (itemId: number) => {\n    setUserParams((prevTexts) => {\n      if (!paramsFormData[itemId]) {\n        return { ...prevTexts, [itemId]: itemId };\n      }\n      return { ...prevTexts, [itemId]: paramsFormData[itemId] };\n    });\n    setModalInfo(`Данные по товару ${itemId} успешно сохранены!`);\n    setOpenCreateOrderModal(true);\n    setInterval(() => {\n      setOpenCreateOrderModal(false);\n    }, 1000);\n  };\n\n  // записывает изменения в форме персональных данных (если клиент не залогинен)\n  const handlePersonalDataInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setPersonalData((prev) => ({ ...prev, [e.target.name]: e.target.value }));\n  };\n\n  // отслеживает изменения в инпутах формы адреса доставки\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setAddressInputs((prev) => ({ ...prev, [e.target.name]: e.target.value }));\n  };\n\n  // отслеживает чекбокс Срочный пошив\n  const handleUrgentChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setUrgentMaking(e.target.checked ? 'Срочно' : '');\n  };\n\n  // отслеживает радио кнопки доставки - шоурум или сдек\n  const handleDeliveryChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setSelectedDelivery(e.target.value);\n  };\n\n  // отслеживает изменения в блоке Комментарии\n  const handleCommentChange = async (\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    setCommentsInput(e.target.value);\n  };\n\n  // отслеживает инпут промокода\n  const handlePromocodeChange = async (e: ChangeEvent<HTMLInputElement>) => {\n    setPromocode(e.target.value.trim());\n  };\n\n  // отрабатывает по нажатию на ПРИМЕНИТЬ (промокод)\n  const handleApplyPromocode = async (e: MouseEvent<HTMLButtonElement>) => {\n    // считаем подытог корзины\n    const subtotal = selectedItems.reduce((sum, item) => sum + item.price, 0);\n    // если введен промокод и это первый введенный промокод\n    if (promocode && !promoUsed) {\n      // проверяем на беке есть ли такой промокод\n      const isValidPromo = await fetch(\n        `${process.env.NEXT_PUBLIC_URL}cart/promocode/${promocode}`\n      );\n      const response = await isValidPromo.json();\n      if (isValidPromo.status === 200) {\n        // если такой промокод есть, то считаем скидку\n        if (discount === 0) {\n          // если до этого была ноль\n          setDiscountPercent(response.percent / 100);\n          const disc = (response.percent / 100) * subtotal;\n          setDiscount(disc);\n          setPromoUsed(true);\n          setPromocode('');\n        } else {\n          // если до этого уже была скидка\n          setDiscountPercent(response.percent / 100);\n          // плюсуем существующую скидку\n          const disc = discount + (response.percent / 100) * subtotal;\n          setDiscount(disc);\n          setPromoUsed(true);\n          setPromocode('');\n        }\n      } else {\n        // если ошибка с бека\n        setPromocodeErr(response);\n        setTimeout(() => {\n          setPromocodeErr('');\n        }, 1000);\n        setCartTotal(subtotal);\n      }\n    } else if (promoUsed) {\n      // если пользователь уже ввел 1 промокод\n      setPromocodeErr('Вы уже использовали промокод');\n      setTimeout(() => {\n        setPromocodeErr('');\n      }, 1000);\n    } else {\n      // если отправляет пустую строку\n      setPromocodeErr('Вы не ввели промокод');\n      setTimeout(() => {\n        setPromocodeErr('');\n      }, 1000);\n    }\n  };\n\n  //! --------------------------------\n  //! подгрузка всех товаров в выпадающий список\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await getAllItems();\n        setAllItems(data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // логика добавления в список выбранных товаров\n  const isItemChecked = (item: IItem) => {\n    return selectedItems.some((i) => i.id === item.id);\n  };\n\n  const handleCheckBox = (item: IItem) => {\n    if (isItemChecked(item)) {\n      setSelectedItems(selectedItems.filter((i) => i.id !== item.id));\n    } else {\n      setSelectedItems([...selectedItems, item]);\n    }\n  };\n\n  // логика открытия/закрытия списка\n  const handleToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  //! --------------------------------\n  //! подгрузка всех доступных материалов для товара\n\n  useEffect(() => {\n    selectedItems.forEach(async (item) => {\n      const response = await getAllMaterials(item.id);\n      const materials = response.materials;\n      setSelectedItemsMaterials((prevMaterials) => ({\n        ...prevMaterials,\n        [item.id]: materials,\n      }));\n    });\n  }, [selectedItems]);\n\n  //! --------------------------------\n\n  //! ГЛАВНАЯ ЛОГИКА СОЗДАНИЯ ЗАКАЗА\n\n  const router = useRouter();\n  let addressString: string;\n  if (selectedDelivery === 'post') {\n    addressString = `${addressInputs.city}, ${addressInputs.street} дом ${addressInputs.number}, квартира ${addressInputs.flat}`;\n  } else {\n    // если в шоурум, то записывает в переменную адрес шоурума\n    addressString = 'Нижний Новгород, ул. Ильинская, 79';\n  }\n\n  const handleCreateOrder = async () => {\n    // если доставка выбрана сдек, то склеивает данные в строку\n\n    const data = {\n      personalData,\n      cartTotal,\n      addressString,\n      commentsInput,\n      urgentMaking,\n      userParams,\n    };\n\n    if (!personalData) {\n      setModalInfo('Не хватает данных о заказчике');\n      setOpenCreateOrderModal(true);\n    } else if (!cartTotal) {\n      setModalInfo('Не хватает данных о стоимости заказа');\n      setOpenCreateOrderModal(true);\n    } else if (!addressString) {\n      setModalInfo('Не хватает данных об адресе доставки');\n      setOpenCreateOrderModal(true);\n    } else if (!userParams) {\n      setModalInfo('Вы не выбрали товар, так нельзя, это неправильно!');\n      setOpenCreateOrderModal(true);\n    } else {\n      const res = await createOrderFetch(data);\n      setModalInfo(res.message);\n      setOpenCreateOrderModal(true);\n      if (res.success) {\n        setTimeout(() => {\n          router.push('/admin/tasks');\n        }, 2000);\n      } else {\n        setTimeout(() => {\n          setOpenCreateOrderModal(false);\n        }),\n          2000;\n      }\n    }\n  };\n\n  return (\n    <>\n      <FormControl sx={{ m: 1, minWidth: 250 }}>\n        <div className={styles.headerContainer}>\n          <div className={styles.userParamsContainer}>\n            <section className={`${styles.orderBlockUserParams}`}>\n              <h2 className={styles.headerUserParams}>Данные заказчика</h2>\n              <div style={{ height: '470px' }} className={styles.formBlock}>\n                <div className={styles.deliveryService}>\n                  <div className={styles.deliveryServiceForm}>\n                    <div>\n                      <div className={styles.inputLocation}>\n                        <div className={styles.formControl}>\n                          <label className={styles.formControlLabel}>Имя</label>\n                          <input\n                            role='text'\n                            title='Имя'\n                            placeholder=''\n                            name='name'\n                            className={styles.formInput}\n                            onChange={handlePersonalDataInputChange}\n                          />\n                        </div>\n                        <div className={styles.formControl}>\n                          <label className={styles.formControlLabel}>\n                            Email\n                          </label>\n                          <input\n                            role='text'\n                            title='Email*'\n                            placeholder=''\n                            name='email'\n                            className={styles.formInput}\n                            onChange={handlePersonalDataInputChange}\n                          />\n                        </div>\n                      </div>\n                      <div className={styles.inputGroup}>\n                        <div className={styles.inputLocation}>\n                          <div className={styles.formControl}>\n                            <label className={styles.formControlLabel}>\n                              Телефон\n                            </label>\n                            <input\n                              type='tel'\n                              role='text'\n                              title='Телефон'\n                              name='phone'\n                              placeholder='+7(***)-***-**-**'\n                              pattern='\\+7\\(\\d{3}\\)-\\d{3}-\\d{2}-\\d{2}'\n                              className={styles.formInput}\n                              onChange={handlePersonalDataInputChange}\n                            />\n                          </div>\n                          <div className={styles.formControl}>\n                            <label className={styles.formControlLabel}>\n                              Telegram/Instagram\n                            </label>\n                            <input\n                              role='text'\n                              title='Telegram/Instagram'\n                              name='telegram_instagram'\n                              placeholder=''\n                              className={styles.formInput}\n                              onChange={handlePersonalDataInputChange}\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </section>\n          </div>\n\n          <div className={styles.orderDataContainer}>\n            <div className={styles.commentsDataContainer}>\n              <section\n                className={`${styles.orderBlockUserParams} ${styles.orderBlockDeliveries}`}\n              >\n                <h2 className={styles.headerUserParams}>\n                  Комментарии к заказу\n                </h2>\n                <div className={`${styles.formBlock} ${styles.commentCart}`}>\n                  <label\n                    className={`${styles.checkbox} ${styles.checkboxBordered} ${styles.checkboxActive} ${styles.checkboxRadio} ${styles.checkboxRight}`}\n                  >\n                    <div className={styles.formControl}>\n                      <label\n                        className={`${styles.formControlLabel} ${styles.formControlLabelVisible}`}\n                      ></label>\n                      <textarea\n                        className={`${styles.commentInput} ${styles.formInput}`}\n                        role='text'\n                        title='Комментарии'\n                        placeholder='Пожелания заказчика...'\n                        name='comments'\n                        rows={5}\n                        cols={50}\n                        onChange={handleCommentChange}\n                      />\n                    </div>\n                  </label>\n                </div>\n              </section>\n            </div>\n            <div className={styles.urgentDataContainer}>\n              <section\n                className={`${styles.orderBlockUserParams} ${styles.orderBlockDeliveries}`}\n              >\n                <h2 className={styles.headerUserParams}>Срочный пошив</h2>\n                <div className={styles.formBlock}>\n                  <label\n                    id='urgent'\n                    className={`${styles.checkbox} ${styles.checkboxBordered} ${styles.checkboxActive} ${styles.checkboxRadio} ${styles.checkboxRight}`}\n                  >\n                    <input\n                      type='checkbox'\n                      name='urgent'\n                      className={styles.checkboxIcon}\n                      onChange={handleUrgentChange}\n                    />\n                    <span className={styles.checkboxLabel}>\n                      <span className={styles.checkboxHeader}>\n                        Изготовление изделия за 5 дней\n                      </span>\n                      <span className={styles.checkboxDescription}>\n                        <em>+20% к стоимости изделия</em>\n                      </span>\n                    </span>\n                  </label>\n                </div>\n              </section>\n            </div>\n          </div>\n        </div>\n\n        <div className={styles.summOrderDataContainer}>\n          <section\n            className={`${styles.orderBlock} ${styles.orderBlockDeliveries}`}\n          >\n            <h2 className={styles.deliveryHeader}>Способ доставки</h2>\n            <div className={styles.formBlock}>\n              <label\n                className={`${styles.checkbox} ${styles.checkboxBordered} ${styles.checkboxActive} ${styles.checkboxRadio} ${styles.checkboxRight}`}\n              >\n                <input\n                  role='radio'\n                  type='radio'\n                  name='delivery'\n                  value='showroom'\n                  className={styles.checkboxIcon}\n                  onChange={handleDeliveryChange}\n                  defaultChecked={true}\n                />\n                <span className={styles.checkboxLabel}>\n                  <span className={styles.checkboxHeader}>\n                    Забрать в шоу-руме\n                  </span>\n                </span>\n              </label>\n            </div>\n            <div className={styles.formBlock}>\n              <label\n                className={`${styles.checkbox} ${styles.checkboxBordered} ${styles.checkboxActive} ${styles.checkboxRadio} ${styles.checkboxRight}`}\n              >\n                <input\n                  role='radio'\n                  type='radio'\n                  name='delivery'\n                  value='post'\n                  className={styles.checkboxIcon}\n                  onChange={handleDeliveryChange}\n                />\n                <span className={styles.checkboxLabel}>\n                  <span className={styles.checkboxHeader}>\n                    Доставка СДЭК или Почтой России\n                  </span>\n                </span>\n              </label>\n              {showAddressInputs && (\n                <div className={styles.deliveryService}>\n                  <div className={styles.deliveryServiceForm}>\n                    <div>\n                      <div className={styles.inputLocation}>\n                        <div className={styles.formControl}>\n                          <label className={styles.formControlLabel}>\n                            Город\n                          </label>\n                          <input\n                            role='text'\n                            title='Город'\n                            placeholder=''\n                            name='city'\n                            className={styles.formInput}\n                            onChange={handleInputChange}\n                          />\n                        </div>\n                        <div className={styles.formControl}>\n                          <label className={styles.formControlLabel}>\n                            Улица\n                          </label>\n                          <input\n                            role='text'\n                            title='Улица*'\n                            placeholder=''\n                            name='street'\n                            className={styles.formInput}\n                            onChange={handleInputChange}\n                          />\n                        </div>\n                      </div>\n                      <div className={styles.inputGroup}>\n                        <div className={styles.inputLocation}>\n                          <div className={styles.formControl}>\n                            <label className={styles.formControlLabel}>\n                              Дом\n                            </label>\n                            <input\n                              role='text'\n                              title='Дом'\n                              name='number'\n                              placeholder=''\n                              className={styles.formInput}\n                              onChange={handleInputChange}\n                            />\n                            <div className={styles.formControlButtons}></div>\n                          </div>\n                        </div>\n                        <div className={styles.formControl}>\n                          <label className={styles.formControlLabel}>\n                            Квартира/Офис\n                          </label>\n                          <input\n                            role='text'\n                            name='flat'\n                            title='Квартира/Офис'\n                            placeholder=''\n                            className={styles.formInput}\n                            onChange={handleInputChange}\n                          />\n                          <div className={styles.formControlButtons}></div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </section>\n        </div>\n\n        <div className={styles.selectItemsButtonContainer}>\n          <Button className={styles.button} onClick={handleToggle}>\n            {isOpen ? 'Скрыть список товаров' : 'Показать список товаров'}\n          </Button>\n        </div>\n\n        <div className={styles.itemListContainer}>\n          <Collapse in={isOpen}>\n            <Grid container spacing={2}>\n              {allItems.map((item, index) => (\n                <Grid item xs={3} key={index}>\n                  <Checkbox\n                    checked={isItemChecked(item)}\n                    onChange={() => handleCheckBox(item)}\n                  />\n                  <SearchItemCard item={item} />\n                </Grid>\n              ))}\n            </Grid>\n          </Collapse>\n        </div>\n\n        <div className={styles.selectedItemsContainer}>\n          {selectedItems.map((item, index) => (\n            <div key={item.id} className={styles.oneItemConteiner}>\n              {item.in_stock ? (\n                <>\n                  <div className={styles.basketItemContent}>\n                    <div className={styles.itemPrices}>\n                      <span className={styles.itemPricesPrice}>\n                        {item.model_params}\n                      </span>\n                    </div>\n                  </div>\n                </>\n              ) : (\n                <>\n                  <select\n                    value={paramsFormData[item.id]?.selectedMaterial}\n                    onChange={(event) => handleMaterialChange(event, item.id)}\n                    name='selectedMaterial'\n                  >\n                    {selectedItemsMaterials[item.id]?.map(\n                      (material: IMaterial, index: number) => (\n                        <option key={index} value={material.name}>\n                          {material.name}\n                        </option>\n                      )\n                    )}\n                  </select>\n\n                  <form action=''>\n                    <div className={styles.sizesFormBlock}>\n                      <div>\n                        <label\n                          htmlFor='height'\n                          className={styles.sizesFormLabel}\n                        >\n                          Ваш рост\n                        </label>\n                        <input\n                          type='text'\n                          name='height'\n                          className={styles.sizesFormInput}\n                          onChange={(e) => handleChange(e, item.id)}\n                        />\n                      </div>\n                      <div>\n                        <label\n                          htmlFor='length'\n                          className={styles.sizesFormLabel}\n                        >\n                          Длина изделия\n                        </label>\n                        <input\n                          type='text'\n                          name='length'\n                          className={styles.sizesFormInput}\n                          onChange={(e) => handleChange(e, item.id)}\n                        />\n                      </div>\n                      <div>\n                        <label\n                          htmlFor='sleeve'\n                          className={styles.sizesFormLabel}\n                        >\n                          Длина рукава\n                        </label>\n                        <input\n                          type='text'\n                          name='sleeve'\n                          className={styles.sizesFormInput}\n                          onChange={(e) => handleChange(e, item.id)}\n                        />\n                      </div>\n                      <div>\n                        <label htmlFor='bust' className={styles.sizesFormLabel}>\n                          Объем груди\n                        </label>\n                        <input\n                          type='text'\n                          name='bust'\n                          className={styles.sizesFormInput}\n                          onChange={(e) => handleChange(e, item.id)}\n                        />\n                      </div>\n                      <div>\n                        <label\n                          htmlFor='waist'\n                          className={styles.sizesFormLabel}\n                        >\n                          Объем талии\n                        </label>\n                        <input\n                          type='text'\n                          name='waist'\n                          className={styles.sizesFormInput}\n                          onChange={(e) => handleChange(e, item.id)}\n                        />\n                      </div>\n                      <div>\n                        <label htmlFor='hips' className={styles.sizesFormLabel}>\n                          Объем бедер\n                        </label>\n                        <input\n                          type='text'\n                          name='hips'\n                          className={styles.sizesFormInput}\n                          onChange={(e) => handleChange(e, item.id)}\n                        />\n                      </div>\n                      {item.category_id === 4 && (\n                        <div>\n                          <label\n                            htmlFor='saddle'\n                            className={styles.sizesFormLabel}\n                          >\n                            &quot;Седло&quot; брюк\n                          </label>\n                          <input\n                            type='text'\n                            name='saddle'\n                            className={styles.sizesFormInput}\n                            onChange={(e) => handleChange(e, item.id)}\n                          />\n                        </div>\n                      )}\n                      {item.category_id === 1 && (\n                        <>\n                          <div>\n                            <input\n                              type='checkbox'\n                              name='loops'\n                              id={`loops${item.id}`}\n                              className={styles.sizesFormCheckbox}\n                              onChange={(e) => handleChange(e, item.id)}\n                            />\n                            <label\n                              htmlFor={`loops${item.id}`}\n                              className={styles.sizesFormLabel}\n                            >\n                              Хочу шлёвки\n                            </label>\n                          </div>\n                          <div>\n                            <input\n                              type='checkbox'\n                              name='buttons'\n                              id={`buttons${item.id}`}\n                              value='pugovitsy'\n                              className={styles.sizesFormCheckbox}\n                              onChange={(e) => handleChange(e, item.id)}\n                            />\n                            <label\n                              htmlFor={`buttons${item.id}`}\n                              className={styles.sizesFormLabel}\n                            >\n                              Хочу пуговицы\n                            </label>\n                          </div>\n                        </>\n                      )}\n                      {item.category_id === 2 && (\n                        <div\n                          style={{ display: 'flex', flexDirection: 'column' }}\n                        >\n                          <div>\n                            <input\n                              type='checkbox'\n                              name='loops'\n                              id={`loops${item.id}`}\n                              className={styles.sizesFormCheckbox}\n                              onChange={(e) => handleChange(e, item.id)}\n                            />\n                            <label\n                              htmlFor={`loops${item.id}`}\n                              className={styles.sizesFormLabel}\n                            >\n                              Хочу шлёвки\n                            </label>\n                          </div>\n                          <div>\n                            <input\n                              type='radio'\n                              name='buttons'\n                              id={`pugovitsy${item.id}`}\n                              value='pugovitsy'\n                              className={styles.sizesFormCheckbox}\n                              onChange={(e) => handleChange(e, item.id)}\n                            />\n                            <label\n                              htmlFor={`pugovitsy${item.id}`}\n                              className={styles.sizesFormLabel}\n                            >\n                              Хочу пуговицы\n                            </label>\n                          </div>\n                          <div>\n                            <input\n                              type='radio'\n                              name='buttons'\n                              value='knopki'\n                              id={`knopki${item.id}`}\n                              className={styles.sizesFormCheckbox}\n                              onChange={(e) => handleChange(e, item.id)}\n                            />\n                            <label\n                              htmlFor={`knopki${item.id}`}\n                              className={styles.sizesFormLabel}\n                            >\n                              Хочу кнопки\n                            </label>\n                          </div>\n                          <div>\n                            <label\n                              htmlFor={`lining${item.id}`}\n                              className={styles.sizesFormLabel}\n                            >\n                              Утепление\n                            </label>\n                            <select\n                              name='lining'\n                              id={`lining${item.id}`}\n                              className={styles.sizesFormSelect}\n                              onChange={(e) => handleChange(e, item.id)}\n                            >\n                              <option value='none'>\n                                Без утепления (до 0 градусов)\n                              </option>\n                              <option value='minus5'>\n                                Тонкое утепление (до -5 градусов) +1.400₽\n                              </option>\n                              <option value='minus10'>\n                                Утепление с мембраной (до -10 градусов)\n                                *идеально для зимы* +1.400₽\n                              </option>\n                            </select>\n                          </div>\n                        </div>\n                      )}\n                      {item.category_id === 5 && (\n                        <>\n                          <div>\n                            <input\n                              type='checkbox'\n                              name='loops'\n                              id={`loops${item.id}`}\n                              className={styles.sizesFormCheckbox}\n                              onChange={(e) => handleChange(e, item.id)}\n                            />\n                            <label\n                              htmlFor={`loops${item.id}`}\n                              className={styles.sizesFormLabel}\n                            >\n                              Хочу шлёвки\n                            </label>\n                          </div>\n                          <div>\n                            <input\n                              type='radio'\n                              name='buttons'\n                              id={`pugovitsy${item.id}`}\n                              value='pugovitsy'\n                              className={styles.sizesFormCheckbox}\n                              onChange={(e) => handleChange(e, item.id)}\n                            />\n                            <label\n                              htmlFor={`pugovitsy${item.id}`}\n                              className={styles.sizesFormLabel}\n                            >\n                              Хочу пуговицы\n                            </label>\n                          </div>\n                          <div>\n                            <input\n                              type='radio'\n                              name='buttons'\n                              value='knopki'\n                              id={`knopki${item.id}`}\n                              className={styles.sizesFormCheckbox}\n                              onChange={(e) => handleChange(e, item.id)}\n                            />\n                            <label\n                              htmlFor={`knopki${item.id}`}\n                              className={styles.sizesFormLabel}\n                            >\n                              Хочу кнопки\n                            </label>\n                          </div>\n                          <div>\n                            <label\n                              htmlFor='lining'\n                              className={styles.sizesFormLabel}\n                            >\n                              Утепление\n                            </label>\n                            <select\n                              name='lining'\n                              id=''\n                              className={styles.sizesFormSelect}\n                              onChange={(e) => handleChange(e, item.id)}\n                            >\n                              <option value='minus15'>\n                                Утепление до -15 градусов\n                              </option>\n                              <option value='minus25'>\n                                Утепление до -25 градусов\n                              </option>\n                            </select>\n                          </div>\n                        </>\n                      )}\n                    </div>\n                  </form>\n                </>\n              )}\n              <button\n                className={styles.sizesFormBtn}\n                onClick={(event) => {\n                  event.preventDefault();\n                  handleSaveSizesInputs(item.id);\n                }}\n              >\n                Сохранить\n              </button>\n            </div>\n          ))}\n        </div>\n\n        <div className={styles.orderSummDataContainer}>\n          <ResultContainerAddOrder\n            personalData={personalData}\n            cartTotal={cartTotal}\n            addressString={addressString}\n            commentsInput={commentsInput}\n            urgentMaking={urgentMaking}\n          />\n          <div className={`${styles.orderBlock} ${styles.orderBlockSummary}`}>\n            <h1 className={styles.headerItemCart}>Стоимость заказа</h1>\n            <div className={styles.promocodeInputContainer}>\n              <p\n                className={`${styles.orderDescription} ${styles.orderDescriptionOnlinePayment}`}\n              >\n                <input\n                  className={styles.promocodeInput}\n                  type='text'\n                  placeholder='Промокод'\n                  value={promocode}\n                  onChange={handlePromocodeChange}\n                />\n              </p>\n              <button\n                className={`${styles.button} ${styles.buttonBlock}  ${styles.buttonBordered}`}\n                onClick={handleApplyPromocode}\n              >\n                Применить\n              </button>\n            </div>\n            {promocodeErr && (\n              <p className={`${styles.errorMsgCart} ${styles.pcErr}`}>\n                {promocodeErr}\n              </p>\n            )}\n            {promoUsed && (\n              <p className={`${styles.errorMsgCart} ${styles.pcErr}`}>\n                Вы использовали промокод\n              </p>\n            )}\n            <div className={styles.orderSummary}>\n              <div className={styles.summary}>\n                <div className={styles.orderSummaryRow}>\n                  <span>Товары ({selectedItems.length}):</span>\n                  <div className={styles.itemPrices}>\n                    {(!promocodeErr && discount) || twoItemDiscount ? (\n                      <>\n                        <span\n                          className={styles.itemPricesPrice}\n                          style={{ textDecoration: 'line-through' }}\n                        >\n                          {selectedItems\n                            .reduce((sum, item) => sum + item.price, 0)\n                            .toLocaleString()}{' '}\n                          &#8381;\n                        </span>\n                      </>\n                    ) : (\n                      <>\n                        <span className={styles.itemPricesPrice}>\n                          {selectedItems\n                            .reduce((sum, item) => sum + item.price, 0)\n                            .toLocaleString()}{' '}\n                          &#8381;\n                        </span>\n                      </>\n                    )}\n                  </div>\n                </div>\n                <div className={styles.orderSummaryRow}>\n                  <span>Скидка:</span>\n                  <div className={styles.itemPrices}>\n                    {twoItemDiscount ? (\n                      <span className={styles.itemPricesPrice}>\n                        {(discount + twoItemDiscount).toLocaleString()} &#8381;\n                      </span>\n                    ) : (\n                      <span className={styles.itemPricesPrice}>\n                        {discount.toLocaleString()} &#8381;\n                      </span>\n                    )}\n                  </div>\n                </div>\n                <div className={styles.orderSummaryRow}>\n                  <span>Доставка:</span>\n                  <div className={styles.itemPrices}>\n                    <span className={styles.itemPricesPrice}>\n                      {deliveryCost.toLocaleString()} &#8381;\n                    </span>\n                  </div>\n                </div>\n                {urgencyFee ? (\n                  <div className={styles.orderSummaryRow}>\n                    <span>Срочность:</span>\n                    <div className={styles.itemPrices}>\n                      <span className={styles.itemPricesPrice}>\n                        {urgencyFee.toLocaleString()} &#8381;\n                      </span>\n                    </div>\n                  </div>\n                ) : (\n                  <></>\n                )}\n              </div>\n            </div>\n            <div\n              className={`${styles.orderSummary} ${styles.orderSummaryTotal}`}\n            >\n              <div className={styles.orderSummaryRow}>\n                <span>Итого:</span>\n                <div className={styles.itemPrices}>\n                  <span className={styles.itemPrices}>\n                    {cartTotal.toLocaleString()} &#8381;\n                  </span>\n                </div>\n              </div>\n            </div>\n            {!orderStatus && (\n              <button\n                className={`${styles.button} ${styles.buttonBlock} ${styles.buttonBig} ${styles.buttonBordered} ${styles.orderButton}`}\n                onClick={() => {\n                  handleCreateOrder();\n                }}\n              >\n                <span className={styles.buttonContent}>Оформить заказ</span>\n              </button>\n            )}\n            {orderStatus && (\n              <p className={styles.orderStatusCart}>{orderStatus}</p>\n            )}\n          </div>\n        </div>\n      </FormControl>\n      <InfoModal\n        open={openCreateOrderModal}\n        setOpen={setOpenCreateOrderModal}\n        info={modalInfo}\n      />\n    </>\n  );\n}\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/FormAddOrder/api.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/FormAddOrder/types.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/FormAddUser/FormAddUser.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/FormAddUser/api.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/FormCatCol.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/Formas.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/HTTP/adminApi.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/InfoModal.jsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/InputFiles.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/ItemInputs.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/ItemTable/ItemTable.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/Modal/CatModal/CatModal.tsx",["815"],[],"import Modal from '@mui/material/Modal';\nimport { useState, useEffect, useRef, FormEvent, ChangeEvent } from 'react';\nimport { dataAxios } from '../../HTTP/adminApi';\nimport styles from './CatModal.module.css';\nimport AdminInput from '../../AdminInput';\nimport InputFiles from '../../InputFiles';\nimport CustomButton from '../../CustomButton';\nimport InfoModal from '../../InfoModal';\nimport CustomFormControl from '../../CustomFormControl';\n\nexport default function CatModal({\n  openChange,\n  setOpenChange,\n  open,\n  setOpen,\n  message,\n  setMessage,\n}: {\n  openChange: boolean;\n  setOpenChange: React.Dispatch<React.SetStateAction<boolean>>;\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  message: string;\n  setMessage: React.Dispatch<React.SetStateAction<string>>;\n}) {\n  const formRef = useRef(null);\n  const [files, setFile] = useState();\n  const [description, setDescription] = useState({});\n  const [conten, setConten] = useState([]);\n  const [name, setName] = useState('');\n  const address = 'category';\n  // TODO ошибка типизации\n  const id = description.category_id;\n\n  useEffect(() => {\n    dataAxios(setConten, setMessage, address);\n  }, []);\n\n  const changeHandlerFiles = (e: ChangeEvent<HTMLInputElement>) => {\n    // TODO ошибка типизации\n    setFile({ ...files, photos: e.target.files });\n  };\n\n  const changeHandlerDescription = (e: ChangeEvent<HTMLInputElement>) => {\n    setDescription({ ...description, [e.target.name]: e.target.value });\n  };\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n  };\n  const submit = async (e: FormEvent<HTMLFormElement>, url: string) => {\n    try {\n      e.preventDefault();\n      const formData = new FormData();\n      if (\n        url === `create-${address}` ||\n        (url === `update-${address}` && files)\n      ) {\n        // TODO ошибка типизации\n        for (let key in files.photos) {\n          formData.append('photos', files.photos[key]);\n        }\n      }\n      formData.append('description', JSON.stringify(description));\n      const val = await Object.fromEntries(formData.entries());\n      // TODO ошибка типизации\n      await dataAxios(setConten, setMessage, address, formData, url, id);\n      setOpen(true);\n      setTimeout(() => {\n        setMessage('');\n        setOpen(false);\n      }, 1000);\n      setOpenChange(false);\n      // TODO ошибка типизации\n      formRef.current.reset();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <>\n      <Modal\n        className={styles.modal}\n        open={openChange}\n        onClose={() => setOpenChange(false)}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <div className={styles.mainContainer}>\n          <div className={styles.headerDiv}>\n            <h2>Категория</h2>\n          </div>\n          <form\n            ref={formRef}\n            // TODO ошибка типизации\n            onSubmit={submit}\n            encType=\"multipart/form-data\"\n            className={styles.formContainer}\n          >\n            <div className={styles.selectContainer}>\n              <CustomFormControl\n                styleSize={'200'}\n                infoText={'Выберите категорию'}\n                arr={conten}\n                valueState={name}\n                name={'category_id'}\n                label={'category'}\n                handleChange={handleChange}\n                changeHandlerDescription={changeHandlerDescription}\n              />\n            </div>\n\n            <div className={styles.inputContainer}>\n              <AdminInput\n                changeHandler={changeHandlerDescription}\n                name={'name'}\n                label={'Название'}\n                types={'text'}\n              />\n              <AdminInput\n                changeHandler={changeHandlerDescription}\n                name={'urlName'}\n                label={'Английское название'}\n                types={'text'}\n              />\n            </div>\n\n            <div className={styles.inputContainer}>\n              <InputFiles\n                text={'Фото категории'}\n                file={files}\n                changeHandlerFiles={changeHandlerFiles}\n                shouldAllowMultiple={false}\n              />\n            </div>\n\n            <div className={styles.buttonContainer}>\n              <CustomButton\n                label={'Добавить'}\n                submit={submit}\n                url={'create-category'}\n              />\n              <CustomButton\n                label={'Изменить'}\n                submit={submit}\n                url={'update-category'}\n              />\n              <CustomButton\n                label={'Удалить'}\n                submit={submit}\n                url={'delete-category'}\n              />\n            </div>\n          </form>\n          <div />\n          <InfoModal info={message} open={open} setOpen={setOpen} />\n        </div>\n      </Modal>\n    </>\n  );\n}\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/Modal/ColModal/ColModal.tsx",["816"],[],"import Modal from '@mui/material/Modal';\nimport { useState, useEffect, useRef, ChangeEvent, FormEvent } from 'react';\nimport { dataAxios } from '../../HTTP/adminApi';\nimport styles from './ColModal.module.css';\nimport AdminInput from '../../AdminInput';\nimport InputFiles from '../../InputFiles';\nimport CustomButton from '../../CustomButton';\nimport InfoModal from '../../InfoModal';\nimport CheckBox from '../../CheckBox';\nimport CustomFormControl from '../../CustomFormControl';\n\nexport default function ColModal({\n  openChange,\n  setOpenChange,\n  open,\n  setOpen,\n  message,\n  setMessage,\n}: {\n  openChange: boolean;\n  setOpenChange: React.Dispatch<React.SetStateAction<boolean>>;\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  message: string;\n  setMessage: React.Dispatch<React.SetStateAction<string>>;\n}) {\n  const formRef = useRef(null);\n  const [files, setFile] = useState();\n  const [description, setDescription] = useState({});\n  const [conten, setConten] = useState([]);\n  const [name, setName] = useState('');\n  const address = 'collection';\n  // TODO ошибка типизации\n  const id = description.collection_id;\n\n  useEffect(() => {\n    dataAxios(setConten, setMessage, address);\n  }, []);\n\n  const changeHandlerFiles = (e: ChangeEvent<HTMLInputElement>) => {\n    // TODO ошибка типизации\n    setFile({ ...files, photos: e.target.files });\n  };\n\n  const changeHandlerDescript = (e: ChangeEvent<HTMLInputElement>) => {\n    setDescription({ ...description, [e.target.name]: e.target.checked });\n  };\n\n  const changeHandlerDescription = (e: ChangeEvent<HTMLInputElement>) => {\n    setDescription({ ...description, [e.target.name]: e.target.value });\n  };\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n  };\n\n  const submit = async (e: FormEvent<HTMLFormElement>, url: string) => {\n    try {\n      e.preventDefault();\n      const formData = new FormData();\n      if (\n        url === `create-${address}` ||\n        (url === `update-${address}` && files)\n      ) {\n        // TODO ошибка типизации\n        for (let key in files.photos) {\n          formData.append('photos', files.photos[key]);\n        }\n      }\n      formData.append('description', JSON.stringify(description));\n      const val = await Object.fromEntries(formData.entries());\n      // TODO ошибка типизации\n      await dataAxios(setConten, setMessage, address, formData, url, id);\n      setOpen(true);\n      setTimeout(() => {\n        setMessage('');\n        setOpen(false);\n      }, 1000);\n      setOpenChange(false);\n      // TODO ошибка типизации\n      formRef.current.reset();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <>\n      <Modal\n        className={styles.modal}\n        open={openChange}\n        onClose={() => setOpenChange(false)}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <div className={styles.mainContainer}>\n          <div className={styles.headerDiv}>\n            <h2>Коллекция</h2>\n          </div>\n          <form\n            ref={formRef}\n            // TODO ошибка типизации\n            onSubmit={submit}\n            encType=\"multipart/form-data\"\n            className={styles.formContainer}\n          >\n            <div className={styles.selectContainer}>\n              <CustomFormControl\n                styleSize={'200'}\n                infoText={'Выберите коллекцию'}\n                arr={conten}\n                valueState={name}\n                name={'collection_id'}\n                label={'collection'}\n                handleChange={handleChange}\n                changeHandlerDescription={changeHandlerDescription}\n              />\n            </div>\n\n            <div className={styles.inputContainer}>\n              <AdminInput\n                changeHandler={changeHandlerDescription}\n                name={'name'}\n                label={'Название'}\n                types={'text'}\n              />\n              <AdminInput\n                changeHandler={changeHandlerDescription}\n                name={'description'}\n                label={'Описание'}\n                types={'text'}\n              />\n              <AdminInput\n                changeHandler={changeHandlerDescription}\n                name={'urlName'}\n                label={'Английское название'}\n                types={'text'}\n              />\n            </div>\n\n            <div className={styles.inputContainer}>\n              <CheckBox\n                changeHandler={changeHandlerDescript}\n                name={'current'}\n                placeholder={'current'}\n                label={' Актуальность'}\n              />\n            </div>\n\n            <div className={styles.inputContainer}>\n              <InputFiles\n                text={'Фото коллекции'}\n                file={files}\n                changeHandlerFiles={changeHandlerFiles}\n                shouldAllowMultiple={false}\n              />\n            </div>\n\n            <div className={styles.buttonContainer}>\n              <CustomButton\n                label={'Добавить'}\n                submit={submit}\n                url={'create-collection'}\n              />\n              <CustomButton\n                label={'Изменить'}\n                submit={submit}\n                url={'update-collection'}\n              />\n              <CustomButton\n                label={'Удалить'}\n                submit={submit}\n                url={'delete-collection'}\n              />\n            </div>\n          </form>\n          <div />\n          <InfoModal info={message} open={open} setOpen={setOpen} />\n        </div>\n      </Modal>\n    </>\n  );\n}\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/Modal/ItemModal/ItemModal.tsx",["817"],[],"import Modal from '@mui/material/Modal';\nimport { useState, useEffect, useRef, ChangeEvent, FormEvent } from 'react';\nimport * as React from 'react';\nimport { dataAxios } from '../../HTTP/adminApi';\nimport styles from './ItemModal.module.css';\n\nimport InfoModal from '../../InfoModal';\nimport ItemInputs from '../../ItemInputs';\nimport CustomFormControl from '../../CustomFormControl';\nimport InputFiles from '../../InputFiles';\nimport CheckBox from '../../CheckBox';\nimport CustomButton from '../../CustomButton';\n\nimport Box from '@mui/material/Box';\n\nexport default function ItemModal({\n  openChange,\n  setOpenChange,\n  id,\n  setContent,\n  open,\n  setOpen,\n  message,\n  setMessage,\n  itemData,\n}: {\n  openChange: boolean;\n  setOpenChange: React.Dispatch<React.SetStateAction<boolean>>;\n  id: number | undefined;\n  setContent: React.Dispatch<React.SetStateAction<[]>>;\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  message: string;\n  setMessage: React.Dispatch<React.SetStateAction<string>>;\n  // TODO типизация - any заглушка\n  itemData: any;\n}) {\n  const formRef = useRef(null);\n  const [files, setFile] = useState({});\n  const [description, setDescription] = useState({\n    category_id: 1,\n    collection_id: 1,\n    material_id: 1,\n    in_stock: false,\n    bestseller: false,\n  });\n\n  const [category, setCategory] = useState([]);\n  const [collection, setCollection] = useState([]);\n  const [material, setMaterial] = useState([]);\n  const [nameCat, setNameCat] = useState('');\n  const [nameCol, setNameCol] = useState('');\n  const [nameMat, setNameMat] = useState('');\n  const address = 'item';\n  const addressCat = 'category';\n  const addressCol = 'collection';\n  const addressMat = 'material';\n  const [formData, setFormData] = useState({\n    name: '',\n    article: '',\n    description: '',\n    model_params: '',\n    characteristics: '',\n    price: '',\n    new_price: '',\n    in_stock: false,\n    purchased: false,\n    bestseller: false,\n    collection_id: 1,\n    material_id: 1,\n    category_id: 1,\n  });\n  const [isInStock, setIsInStock] = useState(false);\n  const resetFormData = () => {\n    setFormData({\n      name: '',\n      article: '',\n      description: '',\n      model_params: '',\n      characteristics: '',\n      price: '',\n      new_price: '',\n      in_stock: false,\n      purchased: false,\n      bestseller: false,\n      collection_id: 1,\n      material_id: 1,\n      category_id: 1,\n    });\n    setNameCat('');\n    setNameCol('');\n    setNameMat('');\n  };\n  useEffect(() => {\n    if (itemData !== null) {\n      setFormData({\n        name: itemData.name || '',\n        article: itemData.article || '',\n        description: itemData.description || '',\n        model_params: itemData.model_params || '',\n        characteristics: itemData.characteristics || '',\n        price: itemData.price || '',\n        new_price: itemData.new_price || '',\n        in_stock: itemData.in_stock || false,\n        purchased: itemData.purchased || false,\n        bestseller: itemData.bestseller || false,\n        collection_id: itemData.collection_id || 1,\n        material_id: itemData.material_id || 1,\n        category_id: itemData.category_id || 1,\n      });\n      setNameCat(itemData.category_id || 1);\n      setNameCol(itemData.collection_id || 1);\n      setNameMat(itemData.material_id || 1);\n    }\n  }, [itemData]);\n\n  useEffect(() => {\n    dataAxios(setCategory, setMessage, addressCat);\n    dataAxios(setCollection, setMessage, addressCol);\n    dataAxios(setMaterial, setMessage, addressMat);\n  }, []);\n  useEffect(() => {\n    if (!openChange) {\n      resetFormData();\n    }\n  }, [openChange]);\n\n  const changeHandlerFiles = (e: ChangeEvent<HTMLInputElement>) => {\n    setFile({ ...files, photos: e.target.files });\n  };\n\n  // TODO типизация - any заглушка\n  const changeHandler = (props: any) => {\n    const { name, value } = props.target;\n\n    setDescription({ ...description, [name]: value });\n    setFormData({ ...formData, [name]: value });\n  };\n  const changeCheckboxHandler = (name: string, value: string) => {\n    setDescription({ ...description, [name]: value });\n    setFormData({ ...formData, [name]: value });\n\n    if (name === 'in_stock') {\n      setIsInStock(Boolean(value));\n    }\n  };\n\n  const handleCategoryChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setNameCat(e.target.value);\n  };\n  const handleCollectionChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setNameCol(e.target.value);\n  };\n\n  const handleMaterialChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setNameMat(e.target.value);\n  };\n\n  const submit = async (e: FormEvent<HTMLFormElement>, url: string) => {\n    try {\n      e.preventDefault();\n\n      if (formData.in_stock && !formData.new_price) {\n        setMessage('Заполните поле с новой ценой');\n        setOpen(true);\n        setTimeout(() => {\n          setMessage('');\n          setOpen(false);\n        }, 1000);\n        return;\n      }\n\n      const formDataToSend = new FormData();\n\n      if (\n        url === `create-${address}` ||\n        (url === `update-${address}` && files)\n      ) {\n        // TODO ошибка типизации\n        for (let key in files.photos) {\n          formDataToSend.append('photos', files.photos[key]);\n        }\n      }\n\n      formDataToSend.append('description', JSON.stringify(description));\n\n      // TODO ошибка типизации\n      await dataAxios(setContent, setMessage, address, formDataToSend, url, id);\n      setOpen(true);\n      setTimeout(() => {\n        setMessage('');\n        setOpen(false);\n      }, 1000);\n      // TODO ошибка типизации\n      formRef.current.reset();\n      setOpenChange(false);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <>\n      <Modal\n        className={styles.modal}\n        open={openChange}\n        onClose={() => setOpenChange(false)}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <div className={styles.mainContainer}>\n          <form\n            ref={formRef}\n            // TODO ошибка типизации\n            onSubmit={submit}\n            encType=\"multipart/form-data\"\n            className={styles.formContainer}\n          >\n            <div className={styles.selectContainer}>\n              <CustomFormControl\n                styleSize={'200'}\n                infoText={'Выберите коллекцию'}\n                arr={collection}\n                valueState={nameCol}\n                name={'collection_id'}\n                label={'collection'}\n                handleChange={handleCollectionChange}\n                changeHandlerDescription={changeHandler}\n              />\n              <CustomFormControl\n                styleSize={'200'}\n                infoText={'Выберите категорию'}\n                arr={category}\n                valueState={nameCat}\n                name={'category_id'}\n                label={'category'}\n                handleChange={handleCategoryChange}\n                changeHandlerDescription={changeHandler}\n              />\n              <CustomFormControl\n                infoText={'Выберите материал'}\n                arr={material}\n                valueState={nameMat}\n                name={'material_id'}\n                label={'material'}\n                handleChange={handleMaterialChange}\n                changeHandlerDescription={changeHandler}\n                required={isInStock}\n              />\n            </div>\n            <Box className={styles.inputBox}>\n              <ItemInputs changeHandler={changeHandler} formData={formData} />\n            </Box>\n\n            <div className={styles.checkBoxContainer}>\n              <div className={styles.checkBoxMiniContainer}>\n                <CheckBox\n                  changeCheckboxHandler={changeCheckboxHandler}\n                  name={'bestseller'}\n                  placeholder={'bestseller'}\n                  label={' bestseller'}\n                  checked={formData.bestseller}\n                />\n                <CheckBox\n                  changeCheckboxHandler={changeCheckboxHandler}\n                  name={'in_stock'}\n                  placeholder={'in_stock'}\n                  label={' В наличии'}\n                  checked={formData.in_stock}\n                />\n              </div>\n              <InputFiles\n                file={files}\n                changeHandlerFiles={changeHandlerFiles}\n                shouldAllowMultiple={true}\n              />\n              {id === undefined ? (\n                <>\n                  <CustomButton\n                    label={'Добавить'}\n                    submit={submit}\n                    url={'create-item'}\n                  />\n                </>\n              ) : (\n                <>\n                  <CustomButton\n                    label={'Изменить'}\n                    submit={submit}\n                    url={'update-item'}\n                  />\n                  <CustomButton\n                    label={'Удалить'}\n                    submit={submit}\n                    url={'delete-item'}\n                  />\n                </>\n              )}\n            </div>\n          </form>\n          <InfoModal info={message} open={open} setOpen={setOpen} />\n        </div>\n      </Modal>\n    </>\n  );\n}\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/Modal/MatModal/MatModal.tsx",["818"],[],"import Modal from '@mui/material/Modal';\nimport { useState, useEffect, useRef, ChangeEvent, FormEvent } from 'react';\nimport CustomFormControl from '../../CustomFormControl';\nimport { dataAxios } from '../../HTTP/adminApi';\n// import styles from '../../../../styles/admin/CatCol.module.css';\nimport InfoModal from '../../InfoModal';\nimport CustomButton from '../../CustomButton';\nimport InputFiles from '../../InputFiles';\nimport AdminInput from '../../AdminInput';\nimport styles from './MatModal.module.css';\n\nexport default function MatModal({\n  openChange,\n  setOpenChange,\n  open,\n  setOpen,\n  message,\n  setMessage,\n}: {\n  openChange: boolean;\n  setOpenChange: React.Dispatch<React.SetStateAction<boolean>>;\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  message: string;\n  setMessage: React.Dispatch<React.SetStateAction<string>>;\n}) {\n  const formRef = useRef(null);\n  const [files, setFile] = useState();\n  const [description, setDescription] = useState({});\n  const [category, setCategory] = useState([]);\n  const [content, setContent] = useState([]);\n  const [name, setName] = useState('');\n  const [nameCat, setNameCat] = useState('');\n  const address = 'material';\n  const addressCat = 'category';\n  // TODO ошибка типизации\n  const id = description.material_id;\n\n  useEffect(() => {\n    dataAxios(setCategory, setMessage, addressCat);\n    dataAxios(setContent, setMessage, address);\n  }, []);\n\n  const changeHandlerFiles = (e: ChangeEvent<HTMLInputElement>) => {\n    // TODO ошибка типизации\n    setFile({ ...files, photos: e.target.files });\n  };\n\n  const changeHandlerDescription = (e: ChangeEvent<HTMLInputElement>) => {\n    setDescription({ ...description, [e.target.name]: e.target.value });\n  };\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n  };\n\n  const handleCategoryChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setNameCat(e.target.value);\n  };\n\n  const submit = async (e: FormEvent<HTMLFormElement>, url: string) => {\n    try {\n      e.preventDefault();\n      const formData = new FormData();\n      if (\n        url === `create-${address}` ||\n        (url === `update-${address}` && files)\n      ) {\n        // TODO ошибка типизации\n        for (let key in files.photos) {\n          formData.append('photos', files.photos[key]);\n        }\n      }\n      formData.append('description', JSON.stringify(description));\n      const val = await Object.fromEntries(formData.entries());\n      // TODO ошибка типизации\n      await dataAxios(setContent, setMessage, address, formData, url, id);\n      setOpen(true);\n      setTimeout(() => {\n        setMessage('');\n        setOpen(false);\n      }, 1000);\n      setOpenChange(false);\n      // TODO ошибка типизации\n      formRef.current.reset();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <>\n      <Modal\n        className={styles.modal}\n        open={openChange}\n        onClose={() => setOpenChange(false)}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <div className={styles.mainContainer}>\n          <div className={styles.headerDiv}>\n            <h2>Материал</h2>\n          </div>\n          <form\n            ref={formRef}\n            // TODO ошибка типизации\n            onSubmit={submit}\n            encType=\"multipart/form-data\"\n            className={styles.formContainer}\n          >\n            <div className={styles.selectContainer}>\n              <CustomFormControl\n                styleSize={'200'}\n                infoText={'Выберите категорию'}\n                arr={category}\n                valueState={nameCat}\n                name={'category_id'}\n                label={'category'}\n                handleChange={handleCategoryChange}\n                changeHandlerDescription={changeHandlerDescription}\n              />\n              <CustomFormControl\n                styleSize={'200'}\n                infoText={'Выберите материал'}\n                arr={content}\n                valueState={name}\n                name={'material_id'}\n                label={'material'}\n                handleChange={handleChange}\n                changeHandlerDescription={changeHandlerDescription}\n              />\n            </div>\n\n            <div className={styles.inputContainer}>\n              <AdminInput\n                changeHandler={changeHandlerDescription}\n                name={'name'}\n                label={'Имя'}\n                types={'text'}\n              />\n            </div>\n\n            <div className={styles.inputContainer}>\n              <InputFiles\n                text={'Фото материала'}\n                file={files}\n                changeHandlerFiles={changeHandlerFiles}\n                shouldAllowMultiple={false}\n              />\n            </div>\n\n            <div className={styles.buttonContainer}>\n              <CustomButton\n                label={'Добавить'}\n                submit={submit}\n                url={'create-material'}\n              />\n              <CustomButton\n                label={'Изменить'}\n                submit={submit}\n                url={'update-material'}\n              />\n              <CustomButton\n                label={'Удалить'}\n                submit={submit}\n                url={'delete-material'}\n              />\n            </div>\n          </form>\n          <div />\n          <InfoModal info={message} open={open} setOpen={setOpen} />\n        </div>\n      </Modal>\n    </>\n  );\n}\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/PromocodeComp/PromocodeComp.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/PromocodeComp/api.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/PromocodeComp/types.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/ResultContainerAddOrder/ResultContainerAddOrder.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/TasksForm/TasksForm.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/TasksForm/myFontBinary.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/TasksForm/taskformTypes.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/infoContainer/InfoContainer.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/oneUserComp/OneUserComp.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/oneUserComp/types.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/order/OrderAdmin.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Admin/order/types.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/CartMin.tsx",["819","820"],[],"import { MouseEvent, useEffect, useState } from 'react';\nimport styles from './CartMin.module.css';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport LikeButton from '@/components/likeButton/LikeButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { useAppDispatch, useAppSelector } from '@/app/hooks';\nimport { useCartControl } from './useCartControl';\nimport DelBtn from './DelBtn';\nimport { RootState } from '@/app/store';\nimport { emptyCart } from '@/app/cartSlice';\nimport { setCartTotal } from '@/app/cartControlSlice';\nimport { emptyCartThunk } from '@/app/thunkActionsCart';\n\nconst CartMin: React.FC<{\n  show: boolean;\n  handleCartIconClick: (e: MouseEvent<HTMLButtonElement>) => void;\n}> = ({ show, handleCartIconClick }) => {\n  const dispatch = useAppDispatch();\n  const { delError, fetchCartItems } = useCartControl();\n  const user = useAppSelector((state: RootState) => state.sessionSlice.user);\n  const cartItemsList = useAppSelector(\n    (state: RootState) => state.cartSlice.cartItems\n  );\n  const [showDiv, setShowDiv] = useState<boolean>(show);\n\n  useEffect(() => {\n    fetchCartItems();\n  }, [dispatch, user]);\n\n  useEffect(() => {\n    const subtotalStock = cartItemsList\n      .filter((item) => item.in_stock)\n      .reduce((sum, item) => sum + item.new_price, 0);\n    const subtotal = cartItemsList\n      .filter((item) => !item.in_stock)\n      .reduce((sum, item) => sum + item.price, 0);\n\n    dispatch(setCartTotal(subtotal + subtotalStock));\n  }, [cartItemsList]);\n\n  const emptyCartMin = async () => {\n    user\n      ? await dispatch(emptyCartThunk())\n      : localStorage.setItem('cartItems', '[]');\n    fetchCartItems();\n  };\n\n  const handleCloseCart = (e: MouseEvent<HTMLButtonElement>) => {\n    setShowDiv((prev) => !prev);\n    setTimeout(() => {\n      handleCartIconClick(e);\n    }, 1001);\n  };\n\n  return (\n    <div\n      className={`${styles.container}  ${\n        cartItemsList.length === 0 ? styles.empty : ''\n      } ${showDiv ? styles.showdiv : styles.hidediv}`}\n    >\n      <>\n        {cartItemsList?.length === 0 ? (\n          <div className={styles.headerCart}>\n            <p className={styles.emptyCartMsg}>\n              Сейчас в вашей корзине пусто.{' '}\n              <Link href=\"/catalog\">Загляните в каталог</Link>\n            </p>\n            <button\n              className={styles.basketItemDeleteButton}\n              type=\"button\"\n              onClick={handleCloseCart}\n            >\n              <CloseIcon sx={{ fontSize: '2rem', color: '#656565' }} />\n            </button>\n          </div>\n        ) : (\n          <>\n            <div className={styles.headerCart}>\n              <h1 className={styles.headerItemCart}>\n                Корзина&nbsp;<span>({cartItemsList.length})</span>\n              </h1>\n              <button\n                className={styles.basketItemDeleteButton}\n                type=\"button\"\n                onClick={handleCloseCart}\n              >\n                <CloseIcon sx={{ fontSize: '2rem', color: '#656565' }} />\n              </button>\n            </div>\n\n            <p className={styles.errorMsgCart}>{delError}</p>\n            <div className={styles.cartContainer}>\n              {cartItemsList.map((item) => (\n                <div className={styles.basketItem} key={item.id}>\n                  <div className={styles.basketItemLeft}>\n                    <Link href={`/catalog/categoryName/${item.id}`}>\n                      <Image\n                        width={80}\n                        height={100}\n                        src={`${process.env.NEXT_PUBLIC_IMAGE_URL}${item.Photos[0].photo}`}\n                        alt={item.name}\n                        className={styles.basketItemImage}\n                      />\n                    </Link>\n                    <div className={styles.basketItemContentLeft}>\n                      <Link\n                        href={`/catalog/categoryName/${item.id}`}\n                        className={styles.basketItemTitle}\n                      >\n                        {item.name}\n                      </Link>\n                      <div className={styles.basketItemProperties}>\n                        <div>Артикул: {item.article}</div>\n                      </div>\n                      <div className={styles.basketItemProperties}>\n                        <div>\n                          Материал: {item.Material.name.split(' - ')[0]}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className={styles.basketItemRight}>\n                    <div className={styles.basketItemContentRight}>\n                      <div className={styles.iconsContainer}>\n                        <LikeButton itemId={item.id} />\n                        <DelBtn itemId={item.id} />\n                      </div>\n                      {item.in_stock ? (\n                        <div className={styles.twoPrices}>\n                          <div className={styles.itemPrice}>\n                            <span\n                              className={`${styles.itemPricesPrice}  ${styles.strikethrough}`}\n                            >\n                              {item.price.toLocaleString()} &#8381;\n                            </span>\n                          </div>\n                          <div className={styles.itemPrice}>\n                            <span\n                              className={`${styles.itemPricesPrice} ${styles.red}`}\n                            >\n                              {item.new_price.toLocaleString()} &#8381;\n                            </span>\n                          </div>\n                        </div>\n                      ) : (\n                        <div className={styles.itemPrice}>\n                          <span className={styles.itemPricesPrice}>\n                            {item.price.toLocaleString()} &#8381;\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n              <div className={styles.totalOrder}>\n                Сумма:{' '}\n                {cartItemsList\n                  .reduce((sum, item) => sum + item.price, 0)\n                  .toLocaleString()}{' '}\n                &#8381;\n              </div>\n              <Link href=\"/checkout\">\n                <button className={styles.orderButton}>\n                  <span className={styles.buttonContent}>\n                    Перейти к оформлению\n                  </span>\n                </button>\n              </Link>\n              <button className={styles.clearCartButton} onClick={emptyCartMin}>\n                <span className={styles.buttonContent}>Очистить корзину</span>\n              </button>\n            </div>\n          </>\n        )}\n      </>\n    </div>\n  );\n};\n\nexport default CartMin;\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/CommentForm.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/CustomFormPart.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/DelBtn.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/DeliveryForm.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/ItemDisplay.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/LSCart/LSItemDisplay.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/MeasurementsForm.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/PersonalDataForm.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/RightBlock.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/UrgencyForm.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/coatSizeForm.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/furCoatSizeForm.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/trenchSizeForm.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/trousersSizeForm.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Cart/useCartControl.ts",["821","822","823","824"],[],"import React, {\n  ChangeEvent,\n  MouseEvent,\n  useState,\n  useEffect,\n  useRef,\n} from 'react';\nimport { useRouter } from 'next/router';\nimport { delCartItem, emptyCart } from '@/app/cartSlice';\nimport {\n  delCartItemThunk,\n  emptyCartThunk,\n  getCartItemsByIdThunk,\n  getCartItemsThunk,\n} from '@/app/thunkActionsCart';\nimport { useAppDispatch, useAppSelector } from '@/app/hooks';\nimport { RootState } from '@/app/store';\nimport { ICustomFormInputs, IOrderData } from '@/TypeScript/checkoutTypes';\nimport { ILocalStorageCartItem } from '@/app/types/cartTypes';\nimport {\n  setAddressInputs,\n  setCartTotal,\n  setCommentsInput,\n  setDeliveryCost,\n  setDiscount,\n  setDiscountPercent,\n  setLiningCost,\n  setOrderStatus,\n  setParamsFormData,\n  setPersonalData,\n  setPromoUsed,\n  setPromocode,\n  setPromocodeErr,\n  setSelectedDelivery,\n  setShowAddressInputs,\n  setShowParamsForm,\n  setTwoItemDiscount,\n  setUrgencyFee,\n  setUrgentMaking,\n  setUserParams,\n} from '@/app/cartControlSlice';\n\nexport const useCartControl = () => {\n  const user = useAppSelector((state: RootState) => state.sessionSlice.user);\n  const name = useAppSelector((state: RootState) => state.sessionSlice.name);\n  const dispatch = useAppDispatch();\n  const router = useRouter();\n  const cartItemsList = useAppSelector(\n    (state: RootState) => state.cartSlice.cartItems\n  );\n  const {\n    urgentMaking,\n    urgencyFee,\n    userParams,\n    showParamsForm,\n    commentsInput,\n    paramsFormData,\n    selectedDelivery,\n    deliveryCost,\n    showAddressInputs,\n    addressInputs,\n    personalData,\n    promocode,\n    promocodeErr,\n    promoUsed,\n    discount,\n    discountPercent,\n    twoItemDiscount,\n    liningCost,\n    cartTotal,\n    orderStatus,\n  } = useAppSelector((state) => state.cartControlSlice);\n  // ошибка при удалении товара из корзины\n  const [delError, setDelError] = useState<string>('');\n\n  // промокод для отправки на бек\n  const [dbPc, setDbPc] = useState<string>('');\n\n  const [showSpinner, setShowSpinner] = useState<boolean>(false);\n\n  const userParamsRef = useRef(userParams);\n\n  // стукается через санку на бек, грузит список товаров добавленных в корзину\n  const fetchCartItems = async (): Promise<void> => {\n    try {\n      if (!user) {\n        const itemsLocal = localStorage.getItem('cartItems');\n        if (itemsLocal !== null) {\n          const parsedItems = JSON.parse(itemsLocal);\n          await dispatch(getCartItemsByIdThunk(parsedItems));\n        }\n      } else {\n        await dispatch(getCartItemsThunk());\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const countCartTotal = (): void => {\n    let liningCost = 0;\n    // подсчитывает подытог, добавляет 1400 к стоимости товара у которого добавлено утепление\n    const subtotal = cartItemsList.reduce((sum, item) => {\n      const itemsLocal = localStorage.getItem('cartItems');\n      const localData = itemsLocal ? JSON.parse(itemsLocal) : [];\n      if (user) {\n        if (item?.Carts[0]?.CartItem.lining !== '') {\n          liningCost += 1400;\n          // здесь рассчитывать тоже без + 1400 и потом плюсовать liningCost к subtotal?\n          // чтобы не применялась скидка к утеплению\n          return sum + item.price + 1400;\n        } else {\n          return sum + item.price;\n        }\n      } else {\n        if (\n          localData?.find((data: ILocalStorageCartItem) => data.id === item.id)\n            ?.lining &&\n          localData?.find((data: ILocalStorageCartItem) => data.id === item.id)\n            .lining !== ''\n        ) {\n          liningCost += 1400;\n          return sum + item.price + 1400;\n        } else {\n          return sum + item.price;\n        }\n      }\n    }, 0);\n    // записывает стоимость утепления\n    dispatch(setLiningCost(liningCost));\n    if (cartItemsList.length > 2) {\n      // скидка 5% для корзины в которой >2 товаров\n      const threePlusItemsDiscount = subtotal * 0.05;\n      dispatch(setTwoItemDiscount(threePlusItemsDiscount));\n      // обновляет итого с учетом стоимости доставки и скидки 5%\n      const updTotal = subtotal + deliveryCost - threePlusItemsDiscount;\n      dispatch(setCartTotal(updTotal));\n      // если есть скидка по промокоду\n      if (discountPercent > 0) {\n        // рассчитывает итог\n        const totalWithBothDiscountsAndDelivery =\n          subtotal * (1 - discountPercent) +\n          deliveryCost -\n          threePlusItemsDiscount;\n        dispatch(setCartTotal(totalWithBothDiscountsAndDelivery));\n        // расчет размера скидки от подытога\n        dispatch(setDiscount(discountPercent * subtotal));\n        if (urgentMaking) {\n          // расчет стоимости срочного пошива\n          dispatch(setUrgencyFee(subtotal * 0.2));\n          // перерасчет итого с учетом скидки по промокоду (применяется только к подытогу) + срочный пошив и доставка\n          dispatch(\n            setCartTotal(totalWithBothDiscountsAndDelivery + urgencyFee)\n          );\n        }\n      }\n      // если срочный пошив и скидки по промокоду нет\n      if (urgentMaking && discountPercent <= 0) {\n        // расчет стоимости срочного пошива\n        dispatch(setUrgencyFee(subtotal * 0.2));\n        // перерасчет итого (подытог + доставка - скидка за +2 товара) + срочный пошив\n        dispatch(setCartTotal(updTotal + urgencyFee));\n      }\n    } else {\n      // <= 2 товаров в корзине\n      dispatch(setTwoItemDiscount(0));\n      const updTotal = subtotal + deliveryCost;\n      dispatch(setCartTotal(updTotal));\n      // если есть скидка по промокоду\n      if (discountPercent > 0) {\n        // рассчитывает новый итог\n        dispatch(setCartTotal(subtotal * (1 - discountPercent) + deliveryCost));\n        // рассчитывает размер скидки\n        dispatch(setDiscount(discountPercent * subtotal));\n        if (urgentMaking) {\n          // рассчитывает стоимость срочного пошива\n          dispatch(setUrgencyFee(subtotal * 0.2));\n          // перерасчет итого\n          dispatch(\n            setCartTotal(\n              subtotal * (1 - discountPercent) + urgencyFee + deliveryCost\n            )\n          );\n        }\n      }\n      // если срочный пошив и скидки по промокоду нет\n      if (urgentMaking && discountPercent <= 0) {\n        // расчет срочного пошива\n        dispatch(setUrgencyFee(subtotal * 0.2));\n        // перерасчет итого (подытог + доставка) + срочный пошив\n        dispatch(setCartTotal(updTotal + urgencyFee));\n      }\n    }\n  };\n\n  useEffect(() => {\n    // стукается через санку на бек, грузит список товаров добавленных в корзину\n    userParamsRef.current = userParams;\n    fetchCartItems();\n  }, [dispatch, user, userParamsRef, showParamsForm]);\n\n  useEffect(() => {\n    if (cartItemsList.length > 0) {\n      const setParams = async () => {\n        await dispatch(setUserParams(Array(cartItemsList.length).fill('')));\n      };\n      setParams();\n    }\n  }, [cartItemsList]);\n\n  useEffect(() => {\n    // подсчет ИТОГО заказа\n    countCartTotal();\n  }, [\n    cartItemsList,\n    discountPercent,\n    discount,\n    twoItemDiscount,\n    deliveryCost,\n    urgentMaking,\n    urgencyFee,\n    dispatch,\n    cartTotal,\n    userParamsRef,\n  ]);\n\n  useEffect(() => {\n    // подсчет стоимости доставки в зависимости от почта\\шоурум\n    countDeliveryCost();\n  }, [selectedDelivery]);\n\n  // отрабатыват по клику на иконку удаления\n  // удаляет из массива и с бека через санку\n  const handleDeleteItemFromCart = async (itemId: number): Promise<void> => {\n    try {\n      if (user) {\n        const data = { itemId, user };\n        await dispatch(delCartItemThunk(data));\n        await dispatch(getCartItemsThunk());\n      } else {\n        await dispatch(delCartItem(itemId));\n\n        const itemsLocal = localStorage.getItem('cartItems');\n        if (itemsLocal !== null) {\n          const cartItems = JSON.parse(itemsLocal) || [];\n          const updatedCartItems = cartItems.filter(\n            (item: ILocalStorageCartItem) => item.id !== itemId\n          );\n          localStorage.setItem('cartItems', JSON.stringify(updatedCartItems));\n          await dispatch(getCartItemsByIdThunk(updatedCartItems));\n        }\n      }\n    } catch (err) {\n      console.log(err);\n      setDelError('Не получилось удалить товар, попробуйте позже.');\n    }\n  };\n\n  // отображает форму введения мерок под товаром\n  const handleDisplaySizesForm = (index: number, itemId: number): void => {\n    const updatedValue = !showParamsForm[itemId];\n    dispatch(setShowParamsForm({ itemId, value: updatedValue }));\n  };\n\n  // записывает изменения в форме персональных данных (если клиент не залогинен)\n  const handlePersonalDataInputChange = (\n    e: ChangeEvent<HTMLInputElement>\n  ): void => {\n    dispatch(\n      setPersonalData({ ...personalData, [e.target.name]: e.target.value })\n    );\n  };\n\n  // записывает изменения в инпутах формы введения мерок\n  const handleChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    // setParamsFormData({ ...paramsFormData, [e.target.name]: e.target.value });\n    dispatch(\n      setParamsFormData({ ...paramsFormData, [e.target.name]: e.target.value })\n    );\n  };\n\n  // дозаписывает изменения в кастомизированных формах\n  // имеется в виду для брюк добавляет седло\n  // для пальто и шуб утепление, etc\n  const handleCustomFormChange = (updatedFields: ICustomFormInputs): void => {\n    dispatch(setParamsFormData({ ...paramsFormData, ...updatedFields }));\n  };\n\n  // отслеживает изменения в инпутах формы адреса доставки\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    dispatch(\n      setAddressInputs({ ...addressInputs, [e.target.name]: e.target.value })\n    );\n  };\n\n  // отслеживает чекбокс Срочный пошив\n  const handleUrgentChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    dispatch(setUrgentMaking(e.target.checked));\n  };\n\n  // отслеживает радио кнопки доставки - шоурум или сдек\n  const handleDeliveryChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    dispatch(setSelectedDelivery(e.target.value));\n  };\n\n  // рассчитывает стоимость доставки, если в шоурум - 0, если по адресу считает 300\n  const countDeliveryCost = (): void => {\n    if (selectedDelivery === 'showroom') {\n      dispatch(setDeliveryCost(0));\n      dispatch(setShowAddressInputs(false));\n    } else {\n      dispatch(setDeliveryCost(300));\n      dispatch(setShowAddressInputs(true));\n    }\n  };\n\n  // отслеживает изменения в блоке Комментарии\n  const handleCommentChange = (e: ChangeEvent<HTMLTextAreaElement>): void => {\n    dispatch(setCommentsInput(e.target.value));\n  };\n\n  // отрабатывает по клику на СОХРАНИТЬ при введении мерок\n  const handleSaveSizesInputs = async (\n    index: number,\n    itemId: number\n  ): Promise<void> => {\n    dispatch(setParamsFormData({ ...paramsFormData, itemId: itemId }));\n    if (!user) {\n      // введенные мерки сохраняются в локалсторедж к соответствующим товарам\n      const itemsLocal = localStorage.getItem('cartItems');\n      if (itemsLocal !== null) {\n        const cartItems = JSON.parse(itemsLocal) || [];\n        const itemToUpdate = cartItems.find(\n          (item: ILocalStorageCartItem) => item.id === itemId\n        );\n        if (itemToUpdate) {\n          itemToUpdate.height = paramsFormData.height || '';\n          itemToUpdate.length = paramsFormData.length || '';\n          itemToUpdate.sleeve = paramsFormData.sleeve || '';\n          itemToUpdate.bust = paramsFormData.bust || '';\n          itemToUpdate.waist = paramsFormData.waist || '';\n          itemToUpdate.hips = paramsFormData.hips || '';\n          itemToUpdate.saddle = paramsFormData.saddle || '';\n          itemToUpdate.loops = paramsFormData.loops || false;\n          itemToUpdate.buttons = paramsFormData.buttons || '';\n          itemToUpdate.lining = paramsFormData.lining || '';\n        }\n        localStorage.setItem('cartItems', JSON.stringify(cartItems));\n        // сохраняет параметры для отображения\n        const userParamsText = `Ваш рост: ${\n          paramsFormData.height\n        }см, длина изделия: ${paramsFormData.length}см, длина рукава: ${\n          paramsFormData.sleeve\n        }см, объем груди: ${paramsFormData.bust}см, объем талии: ${\n          paramsFormData.waist\n        }см, объем бедер: ${paramsFormData.hips}см${\n          paramsFormData.saddle ? `, седло: ${paramsFormData.saddle}` : ''\n        }${\n          paramsFormData.lining ? `, утепление: ${paramsFormData.lining}` : ''\n        }${\n          paramsFormData.buttons ? `, фурнитура: ${paramsFormData.buttons}` : ''\n        }${paramsFormData.loops ? `, со шлёвками` : ''}`;\n        const updatedUserParams = [...userParams];\n        updatedUserParams[index] = userParamsText;\n        dispatch(setUserParams(updatedUserParams));\n        setParamsFormData({});\n        handleDisplaySizesForm(index, itemId);\n      }\n    }\n    // записывает мерки к товару в CartItems\n    const response = await fetch(\n      `${process.env.NEXT_PUBLIC_URL}cart/measures/${itemId}`,\n      {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(paramsFormData),\n      }\n    );\n    const res = await response.json();\n    if (response.status === 200) {\n      // выводит мерки, если всё ок\n      // и прячет форму\n      const userParamsText = `Ваш рост: ${res.height}см, длина изделия: ${\n        res.length\n      }см, длина рукава: ${res.sleeve}см, объем груди: ${\n        res.bust\n      }см, объем талии: ${res.waist}см, объем бедер: ${res.hips}см${\n        res.saddle ? `, седло: ${res.saddle}` : ''\n      }${res.lining ? `, утепление: ${res.lining}` : ''}${\n        res.buttons ? `, фурнитура: ${res.buttons}` : ''\n      }${res.loops ? `, со шлёвками` : ''}`;\n      // setUserParams((prevTexts) => {\n      //   const updatedTexts = [...prevTexts];\n      //   updatedTexts[index] = userParams;\n      //   return updatedTexts;\n      // });\n      const updatedUserParams = [...userParams];\n      updatedUserParams[index] = userParamsText;\n      dispatch(setUserParams(updatedUserParams));\n      handleDisplaySizesForm(index, itemId);\n    }\n  };\n\n  // отслеживает инпут промокода\n  const handlePromocodeChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    dispatch(setPromocode(e.target.value.trim()));\n  };\n\n  // отрабатывает по нажатию на ПРИМЕНИТЬ (промокод)\n  const handleApplyPromocode = async (\n    e: MouseEvent<HTMLButtonElement>\n  ): Promise<void> => {\n    // считаем подытог корзины\n    const subtotal = cartItemsList.reduce((sum, item) => sum + item.price, 0);\n    // если введен промокод и это первый введенный промокод\n    if (promocode && !promoUsed) {\n      // проверяем на беке есть ли такой промокод\n      const isValidPromo = await fetch(\n        `${process.env.NEXT_PUBLIC_URL}cart/promocode/${promocode}`,\n        {\n          method: 'GET',\n          credentials: 'include',\n        }\n      );\n      const response = await isValidPromo.json();\n      if (isValidPromo.status === 200) {\n        setDbPc(promocode);\n        dispatch(setDiscountPercent(response.percent / 100));\n        dispatch(setPromoUsed(true));\n        dispatch(setPromocode(''));\n      } else {\n        // если ошибка с бека\n        dispatch(setPromocodeErr(response));\n        setTimeout(() => {\n          setDbPc('');\n          dispatch(setPromoUsed(false));\n          dispatch(setPromocodeErr(''));\n        }, 1000);\n        dispatch(setCartTotal(subtotal));\n      }\n    } else if (promoUsed) {\n      // если пользователь уже ввел 1 промокод\n      dispatch(setPromocodeErr('Вы уже использовали промокод'));\n      setTimeout(() => {\n        setDbPc('');\n        dispatch(setPromoUsed(false));\n        dispatch(setPromocodeErr(''));\n      }, 1000);\n    } else {\n      // если отправляет пустую строку\n      dispatch(setPromocodeErr('Вы не ввели промокод'));\n      setTimeout(() => {\n        dispatch(setPromocodeErr(''));\n      }, 1000);\n    }\n  };\n\n  //  отправляет письмо с подтверждением заказа\n  function sendMail(name: string, user: string, order: string) {\n    Email.send({\n      SecureToken: 'ef79f30f-8ef6-4205-979a-b8e46f36a527',\n      To: user,\n      From: 'maxkosh1994@gmail.com',\n      Subject: 'Сообщение от команды Cape&Coat',\n      Body: `Уважаемый(ая) ${name}, вы указали этот почтовый ящик (${user}) при оформлении заказа на сайте Cape&Coat. ${order}`,\n    });\n  }\n\n  // Стучится на бек и создает заказ, если все проверки прошли\n  const createOrder = async (data: IOrderData): Promise<void> => {\n    setShowSpinner(true);\n    try {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_URL}order/new`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n      const re = await response.json();\n\n      if (re.message === 'Что-то пошло не так, попробуйте позже') {\n        // если ошибка на беке\n        setShowSpinner(false);\n        dispatch(setOrderStatus(re.message));\n        setTimeout(() => {\n          dispatch(setOrderStatus(''));\n        }, 2000);\n      } else if (re.message === 'Вы уже использовали этот промокод') {\n        setShowSpinner(false);\n        dispatch(setOrderStatus(re.message));\n        dispatch(setPromoUsed(false));\n        setDbPc('');\n        dispatch(setDiscount(0));\n        setTimeout(() => {\n          dispatch(setOrderStatus(''));\n        }, 2000);\n      } else {\n        // если все ок - очищает корзину, массив в редаксе и редиректит на спасибку\n        setTimeout(() => {\n          setShowSpinner(false);\n          router.push('/thankyou');\n        }, 1200);\n        await dispatch(emptyCartThunk(user));\n        await dispatch(emptyCart());\n        localStorage.setItem('cartItems', JSON.stringify([]));\n        sendMail(name, user, re.message);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // отрабатывает по нажатию на ОФОРМИТЬ\n  const handleCreateOrder = () => {\n    // проверяет введен ли адрес\n    if (selectedDelivery !== '') {\n      let addressString;\n      // если доставка выбрана сдек, то склеивает данные в строку\n      if (selectedDelivery === 'post') {\n        addressString = `${addressInputs.city}, ${addressInputs.street} дом ${addressInputs.number}, квартира ${addressInputs.flat}`;\n      } else {\n        // если в шоурум, то записывает в переменную адрес шоурума\n        addressString = 'Нижний Новгород, ул. Ильинская, 79';\n      }\n\n      // проверяем заполнил ли клиент мерки для всех товаров на пошив\n      let isMeasuresAdded;\n      if (user) {\n        isMeasuresAdded = cartItemsList\n          .filter((item) => !item.in_stock)\n          .every((item) => {\n            const cartItems = item.Carts.map((cart) => cart.CartItem);\n            return cartItems.every((cartItem) => {\n              return (\n                cartItem.height !== '' &&\n                cartItem.length !== '' &&\n                cartItem.sleeve !== '' &&\n                cartItem.bust !== '' &&\n                cartItem.waist !== '' &&\n                cartItem.hips !== ''\n              );\n            });\n          });\n      } else {\n        // проверяем мерки в локалсторедж\n        const localData = JSON.parse(localStorage.getItem('cartItems') || '[]');\n        isMeasuresAdded = localData\n          .filter((item: ILocalStorageCartItem) => !item.in_stock)\n          .every((oneItem: ILocalStorageCartItem) => {\n            return (\n              oneItem.height !== undefined &&\n              oneItem.height !== '' &&\n              oneItem.length !== undefined &&\n              oneItem.length !== '' &&\n              oneItem.sleeve !== undefined &&\n              oneItem.sleeve !== '' &&\n              oneItem.bust !== undefined &&\n              oneItem.bust !== '' &&\n              oneItem.waist !== undefined &&\n              oneItem.waist !== '' &&\n              oneItem.hips !== undefined &&\n              oneItem.hips !== ''\n            );\n          });\n      }\n      // если адрес корректный\n      if (addressString.length > 18) {\n        // проверяем мерки\n        if (!isMeasuresAdded) {\n          dispatch(\n            setOrderStatus('Пожалуйста, введите все мерки для пошива изделия')\n          );\n          setTimeout(() => {\n            dispatch(setOrderStatus(''));\n          }, 2000);\n        } else {\n          // если адрес и мерки в порядке\n\n          // создаем объект, который передадим на бек,\n          // в нем email клиента, сумма заказа, адрес, комментарии и срочный ли пошив\n          if (user) {\n            // если клиент залогинен, собираем объект\n            const orderData = {\n              user,\n              cartTotal,\n              addressString,\n              commentsInput,\n              urgentMaking,\n              dbPc,\n            };\n            // вызываем функцию создания заказа\n            createOrder(orderData);\n          } else {\n            // если клиент не залогинен - собираем объект с данными из формы персональных данных\n            const itemsWithMeasurements = JSON.parse(\n              localStorage.getItem('cartItems') || '[]'\n            );\n            const orderData = {\n              personalData,\n              cartTotal,\n              addressString,\n              commentsInput,\n              urgentMaking,\n              dbPc,\n              itemsWithMeasurements,\n            };\n            // вызываем функцию создания заказа\n            if (\n              !personalData.name ||\n              !personalData.email ||\n              !personalData.password ||\n              !personalData.phone\n            ) {\n              dispatch(\n                setOrderStatus('Пожалуйста, заполните все поля личных данных')\n              );\n              setTimeout(() => {\n                dispatch(setOrderStatus(''));\n              }, 2000);\n            } else {\n              createOrder(orderData);\n            }\n          }\n        }\n      } else {\n        // если адрес доставки некорректный\n        dispatch(setOrderStatus('Пожалуйста, заполните адрес доставки'));\n        setTimeout(() => {\n          dispatch(setOrderStatus(''));\n        }, 2000);\n      }\n    } else {\n      // если не выбран способ доставки\n      dispatch(setOrderStatus('Пожалуйста, выберите способ доставки'));\n      setTimeout(() => {\n        dispatch(setOrderStatus(''));\n      }, 2000);\n    }\n  };\n\n  return {\n    showSpinner,\n    delError,\n    setDelError,\n    dbPc,\n    setDbPc,\n    fetchCartItems,\n    countDeliveryCost,\n    handleDisplaySizesForm,\n    handlePersonalDataInputChange,\n    handleDeleteItemFromCart,\n    handleSaveSizesInputs,\n    handlePromocodeChange,\n    handleApplyPromocode,\n    handleChange,\n    handleInputChange,\n    handleCustomFormChange,\n    handleUrgentChange,\n    handleDeliveryChange,\n    handleCommentChange,\n    countCartTotal,\n    handleCreateOrder,\n    createOrder,\n    userParamsRef,\n  };\n};\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/CartButton/CartButton.tsx",["825"],[],"import React, { useEffect, useState } from 'react';\nimport LikeButton from '../likeButton/LikeButton';\n\nimport {\n  addCartItem,\n  delCartItem,\n  delItemInCart,\n  getCartItems,\n} from '@/app/cartSlice';\nimport { useAppDispatch } from '@/app/hooks';\nimport './CartButtonStyle.css';\nimport { Item } from '@/app/itemSlice';\nimport {\n  getCartItemsByIdThunk,\n  getCartItemsThunk,\n} from '@/app/thunkActionsCart';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '@/app/store';\n\ninterface IcartButtonProps {\n  itemId: number;\n  selectedMaterialId: number;\n  selectedMaterialName: string;\n  setMaterialAlert: React.Dispatch<React.SetStateAction<string>>;\n  itemData: Item;\n}\n\nexport default function CartButton({\n  itemId,\n  selectedMaterialId,\n  selectedMaterialName,\n  setMaterialAlert,\n  itemData,\n}: IcartButtonProps): JSX.Element {\n  // const [cartData, setCartData] = useState([]);\n  const [isInCart, setIsInCart] = useState(false);\n\n  const dispatch = useAppDispatch();\n  const user = useSelector((state) => state.sessionSlice.user);\n\n  const cartItems = useSelector(\n    (state: RootState) => state.cartSlice.cartItems\n  );\n\n  useEffect(() => {\n    if (user) {\n      const isInCart = cartItems.some(\n        (el) => el.id == itemId || el.item_id == itemId\n      );\n      setIsInCart(isInCart);\n    } else {\n      const cartFromStorage = JSON.parse(\n        localStorage.getItem('cartItems') || '[]'\n      );\n      const isItemInCart = cartFromStorage.some(\n        (element) => element.id === itemId\n      );\n      setIsInCart(isItemInCart);\n      itemData.in_stock === false\n        ? (itemData.Material.name = '')\n        : (selectedMaterialName = '');\n    }\n  }, [cartItems, user, itemId]);\n\n  const cartHandler = async () => {\n    try {\n      if (!selectedMaterialId && !isInCart && !itemData.in_stock) {\n        const materialAlertElement = document.getElementById('alert');\n\n        if (materialAlertElement) {\n          materialAlertElement.scrollIntoView({ behavior: 'smooth' });\n        }\n\n        setMaterialAlert('alert');\n        setTimeout(() => {\n          setMaterialAlert('');\n        }, 1000);\n        return;\n      }\n      if (!user) {\n        const cartItemsFromStorage =\n          JSON.parse(localStorage.getItem('cartItems')!) || [];\n\n        let materialName = selectedMaterialName\n          ? selectedMaterialName\n          : itemData.Material.name;\n\n        const isItemInCart = cartItemsFromStorage.find(\n          (item) => item.id === itemId\n        );\n\n        if (isItemInCart) {\n          setIsInCart(isInCart);\n        } else {\n          const updatedCartItems = [\n            ...cartItemsFromStorage,\n            {\n              id: itemId,\n              material_name: materialName,\n              in_stock: itemData.in_stock,\n            },\n          ];\n          localStorage.setItem('cartItems', JSON.stringify(updatedCartItems));\n          setIsInCart(!isInCart);\n          await dispatch(getCartItemsByIdThunk(updatedCartItems));\n          return;\n        }\n      } else {\n        if (!isInCart) {\n          const material = selectedMaterialName\n            ? selectedMaterialName\n            : itemData.Material.name;\n\n          const materialName = { material_name: material };\n          const res = await fetch(\n            `${process.env.NEXT_PUBLIC_URL}cart/item/${itemId}`,\n            {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              credentials: 'include',\n              body: JSON.stringify(materialName),\n            }\n          );\n          if (res.ok) {\n            const data = await res.json();\n            await dispatch(getCartItemsThunk());\n            // dispatch(addCartItem(data));\n            setIsInCart(!isInCart);\n          }\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className=\"product__actions\">\n      <div className=\"product__actions-line\">\n        <div className=\"product__actions-button\">\n          <button\n            onClick={cartHandler}\n            type=\"button\"\n            className={`ui-button ui-button-wide ui-button-dark${\n              isInCart ? ' in-cart' : ''\n            }`}\n          >\n            <div className={`ui-ripple${isInCart ? ' in-cart-btn' : ''}`}>\n              <div className={`ui-button-content${isInCart ? ' in-cart' : ''}`}>\n                {isInCart ? 'В корзине' : 'В корзину'}\n              </div>\n            </div>\n          </button>\n        </div>\n        <div className=\"product__actions-additional\">\n          <div className=\"product__favorites\">\n            <LikeButton itemId={itemId} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Footer/Footer.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ItemLeftPart/ItemLeftPart.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ItemMaterials/ItemMaterials.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ItemPage/BasePage.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ItemRightPart/ItemRightPart.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Layout/Layout.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Navbar/Logo.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Navbar/MobileMenu/MobileMenu.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Navbar/Navbar.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Navbar/NavigationMenu/NavigationMenu.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Navbar/NavigationMenu/fetchNavigationMenuData.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ProductCard/CartIconButton.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ProductCard/FavoriteIconButton.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ProductCard/ProductCard.tsx",["826","827"],[],"import React from 'react';\nimport styles from './ProductCard.module.css';\nimport { IProductCard } from '@/TypeScript/ProductCard.type';\nimport useProductCardLogic from './useProductCardLogic';\nimport FavoriteIconButton from './FavoriteIconButton';\nimport CartIconButton from './CartIconButton';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport numeral from 'numeral';\n\nconst ProductCard: React.FC<IProductCard> = ({\n  id,\n  material_name,\n  article,\n  photo,\n  name,\n  price,\n  isFavorite: initialIsFavorite,\n  isCart: initialIsCart,\n  newPrice,\n  isItemInFavoritesState,\n  urlName,\n}: IProductCard) => {\n  const { isFavorite, isCart, favoriteHandler, cartHandler } =\n    useProductCardLogic(\n      id,\n      material_name,\n      article,\n      photo,\n      name,\n      price,\n      initialIsFavorite,\n      initialIsCart,\n      newPrice,\n      urlName\n    );\n  const router = useRouter();\n\n  const linkToShow = router.asPath.replace(/^\\/catalog|\\/\\d+$/g, '');\n\n  return (\n    <div className={styles.Card} key={id}>\n      {linkToShow[0] === '/' ? (\n        <Link\n          href={\n            router.pathname === '/'\n              ? `/${urlName}/${id}`\n              : `/catalog${linkToShow}/${id}`\n          }\n          as={\n            router.pathname === '/'\n              ? `/catalog/${urlName}/${id}`\n              : `/catalog${linkToShow}/${id}`\n          }\n        >\n          <span className={styles.CardMedia}>\n            <img\n              src={`${process.env.NEXT_PUBLIC_IMAGE_URL}${photo}`}\n              alt={name}\n              className={styles.Image}\n            />\n          </span>\n          <h1 className={styles.NameCard}>{name}</h1>\n        </Link>\n      ) : (\n        <Link\n          href={\n            router.pathname === '/'\n              ? `/${urlName}/${id}`\n              : `/catalog${linkToShow}/${id}`\n          }\n          as={\n            router.pathname === '/'\n              ? `/catalog/${urlName}/${id}`\n              : `/catalog/${linkToShow}/${id}`\n          }\n        >\n          <span className={styles.CardMedia}>\n            <img\n              src={`${process.env.NEXT_PUBLIC_IMAGE_URL}${photo}`}\n              alt={name}\n              className={styles.Image}\n            />\n          </span>\n          <h1 className={styles.NameCard}>{name}</h1>\n        </Link>\n      )}\n\n      {newPrice ? (\n        <div className={styles.CardContent}>\n          <h3 className={styles.NewPrice}>\n            {numeral(newPrice).format('0,0')} ₽\n          </h3>\n          <h3 className={styles.OldPrice}>{numeral(price).format('0,0')} ₽</h3>\n          <div className={styles.Icons}>\n            <FavoriteIconButton\n              isFavorite={isFavorite}\n              onClick={favoriteHandler}\n              itemId={id}\n            />\n            <CartIconButton isCart={isCart} onClick={cartHandler} itemId={id} />\n          </div>\n        </div>\n      ) : (\n        <div className={styles.CardContent}>\n          <h3 className={styles.PriceOne}>{numeral(price).format('0,0')} ₽</h3>\n          <div className={styles.Icons}>\n            <FavoriteIconButton\n              isFavorite={isFavorite}\n              onClick={favoriteHandler}\n              itemId={id}\n            />\n            <CartIconButton isCart={isCart} onClick={cartHandler} itemId={id} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProductCard;\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ProductCard/thunkProduct.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ProductCard/useProductCardLogic.ts",["828","829"],[],"import { useState, useEffect } from 'react';\nimport { useAppDispatch } from '../../app/hooks';\nimport { useSelector } from 'react-redux';\nimport { toggleFavorite, toggleCart } from '../../app/CategorySlice';\nimport {\n  addToFavorites,\n  removeFromFavorites,\n  addToCart,\n  removeFromCart,\n} from './thunkProduct';\nimport { fetchFavouritesData } from '../../app/thunkActionsFavourite';\nimport {\n  getCartItemsByIdThunk,\n  getCartItemsThunk,\n} from '../../app/thunkActionsCart';\nimport { setFavourites, setLikedStatus } from '../../app/favouriteSlice';\nimport { RootState } from '../../app/store';\nimport { ILocalStorageCartItems } from '@/app/types/cartTypes';\nimport { IProductCard } from '@/TypeScript/ProductCard.type';\n\nconst useProductCardLogic = (\n  id: number,\n  material_name: string,\n  article: string | number,\n  photo: string,\n  name: string,\n  price: number,\n  initialIsFavorite: boolean,\n  initialIsCart: boolean,\n  newPrice?: number,\n  urlName?: string\n) => {\n  const dispatch = useAppDispatch();\n  const [isFavorite, setIsFavorite] = useState(initialIsFavorite);\n  const [isCart, setIsCart] = useState(initialIsCart);\n  const [favCard, setFavCard] = useState();\n\n  const { user } = useSelector((state: RootState) => state.sessionSlice);\n\n  const favoriteHandler = async () => {\n    if (!user) {\n      const favoritesFromStorage =\n        JSON.parse(localStorage.getItem('favorites')!) || [];\n\n      const isItemInFavorites = favoritesFromStorage.includes(id);\n\n      if (isItemInFavorites) {\n        const updatedFavorites = favoritesFromStorage.filter(\n          (favId: number) => favId !== id\n        );\n        localStorage.setItem('favorites', JSON.stringify(updatedFavorites));\n        setIsFavorite(!isFavorite);\n        await dispatch(setFavourites(updatedFavorites));\n      } else {\n        const updatedFavorites = [...favoritesFromStorage, id];\n        localStorage.setItem('favorites', JSON.stringify(updatedFavorites));\n        setIsFavorite(!isFavorite);\n        await dispatch(setFavourites(updatedFavorites));\n      }\n    } else {\n      setIsFavorite(!isFavorite);\n      try {\n        const favoriteData: IProductCard = {\n          id,\n          material_name,\n          article,\n          photo,\n          name,\n          newPrice,\n          price,\n          isFavorite: !isFavorite,\n          isCart,\n        };\n        const favoriteAction = isFavorite\n          ? removeFromFavorites\n          : addToFavorites;\n        const favorite = await favoriteAction(favoriteData);\n        setFavCard(favorite);\n        await dispatch(fetchFavouritesData());\n        await dispatch(setLikedStatus(!isFavorite));\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  const cartHandler = async () => {\n    if (!user) {\n      const cartItemsFromStorage =\n        JSON.parse(localStorage.getItem('cartItems')!) || [];\n\n      const isItemInCart = cartItemsFromStorage.find(\n        (item: ILocalStorageCartItems) => item.id === id\n      );\n\n      if (isItemInCart) {\n        const updatedCartItems = cartItemsFromStorage.filter(\n          (item: ILocalStorageCartItems) => item.id !== id\n        );\n        localStorage.setItem('cartItems', JSON.stringify(updatedCartItems));\n        setIsCart(!isCart);\n        await dispatch(getCartItemsByIdThunk(updatedCartItems));\n      } else {\n        const updatedCartItems = [\n          ...cartItemsFromStorage,\n          { id, material_name, in_stock: newPrice ? true : false },\n        ];\n        localStorage.setItem('cartItems', JSON.stringify(updatedCartItems));\n        setIsCart(!isCart);\n        await dispatch(getCartItemsByIdThunk(updatedCartItems));\n      }\n    } else {\n      setIsCart(!isCart);\n      try {\n        const cartData: IProductCard = {\n          id,\n          material_name,\n          article,\n          photo,\n          name,\n          newPrice,\n          price,\n          isFavorite,\n          isCart: !isCart,\n        };\n\n        if (!isCart) {\n          const inCart = await addToCart(cartData);\n          const itemInCart = inCart[1];\n          setIsCart(itemInCart);\n          await dispatch(getCartItemsThunk());\n        } else {\n          const delCart = await removeFromCart(cartData);\n          await dispatch(getCartItemsThunk());\n          setIsCart(false);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (user) {\n      //TODO если ничего не меняет, то проще так оставить : одна строка вместо кучи кода\n\n      // const cartItemsFromStorage = localStorage.getItem('cartItems');\n      const cartItemsFromStorage =\n        JSON.parse(localStorage.getItem('cartItems')!) || [];\n      // let cartFromStorage = [];\n      // console.log('!!!!!!', cartItemsFromStorage);\n      // console.log('typeof', typeof cartItemsFromStorage);\n\n      // if (cartItemsFromStorage) {\n      //   try {\n      //     cartFromStorage = JSON.parse(cartItemsFromStorage);\n      //   } catch (error) {\n      //     console.error('Error parsing cartItems from localStorage:', error);\n      //   }\n      if (cartItemsFromStorage.length > 0) {\n        Promise.all(\n          cartItemsFromStorage.map(async (cartId: ILocalStorageCartItems) => {\n            const cartData = {\n              id: cartId.id,\n              material_name: cartId.material_name,\n            };\n            console.log({ cartData });\n            return addToCart(cartData);\n          })\n        )\n          .then(() => {\n            localStorage.removeItem('cartItems');\n            dispatch(getCartItemsThunk());\n          })\n          .catch((error) => {\n            console.error('Error while adding item in cart:', error);\n          });\n      }\n      const fetchData = async () => {\n        try {\n          const response = await fetch(\n            process.env.NEXT_PUBLIC_URL + 'cart/cartInCat',\n            {\n              method: 'GET',\n              credentials: 'include',\n            }\n          );\n          if (response.status === 200) {\n            const allItemInCart = await response.json();\n            const isProductInCart = allItemInCart.includes(id);\n            setIsCart(isProductInCart);\n          }\n          dispatch(toggleCart(id));\n        } catch (err) {\n          console.log(err);\n        }\n      };\n\n      fetchData();\n      // }\n    } else {\n      const cartFromStorage = JSON.parse(\n        localStorage.getItem('cartItems') || '[]'\n      );\n\n      async function fetchUpdCartItems(\n        cartFromStorage: ILocalStorageCartItems[]\n      ) {\n        try {\n          await dispatch(getCartItemsByIdThunk(cartFromStorage));\n        } catch (error) {\n          console.error('Error while fetching cart items:', error);\n        }\n      }\n      fetchUpdCartItems(cartFromStorage);\n      const isItemInCart = cartFromStorage.some(\n        (element: ILocalStorageCartItems) => element.id === id\n      );\n      setIsCart(isItemInCart);\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (user) {\n      const favoritesFromStorage =\n        JSON.parse(localStorage.getItem('favorites')!) || [];\n\n      if (favoritesFromStorage.length > 0) {\n        Promise.all(\n          favoritesFromStorage.map(async (favId: number) => {\n            const favoriteData = {\n              id: favId,\n            };\n            return addToFavorites(favoriteData);\n          })\n        )\n          .then(() => {\n            // Удалить данные из localStorage после успешной отправки\n            localStorage.removeItem('favorites');\n\n            // Запросить обновленные данные об избранных с сервера\n            dispatch(fetchFavouritesData());\n          })\n          .catch((error) => {\n            console.error('Error while adding favorites:', error);\n          });\n      }\n      const fetchData = async () => {\n        try {\n          const response = await fetch(\n            process.env.NEXT_PUBLIC_URL + 'favorite',\n            {\n              method: 'GET',\n              credentials: 'include',\n            }\n          );\n          if (response.status === 200) {\n            const favorites = await response.json();\n            const isProductFavorite = favorites.includes(id);\n            setIsFavorite(isProductFavorite);\n          }\n          dispatch(toggleFavorite(id));\n        } catch (err) {\n          console.log(err);\n        }\n      };\n\n      fetchData();\n    } else {\n      const favoritesFromStorage = JSON.parse(\n        localStorage.getItem('favorites') || '[]'\n      );\n      const itemsLocal = localStorage.getItem('cartItems');\n      if (itemsLocal !== null) {\n        const parsedItems = JSON.parse(itemsLocal);\n        dispatch(getCartItemsByIdThunk(parsedItems));\n      }\n\n      dispatch(setFavourites(favoritesFromStorage));\n\n      const isItemInFavorites = favoritesFromStorage.includes(id);\n      setIsFavorite(isItemInFavorites);\n    }\n  }, [user]);\n\n  return {\n    isFavorite,\n    isCart,\n    favoriteHandler,\n    cartHandler,\n    urlName,\n  };\n};\n\nexport default useProductCardLogic;\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/SearchBar/SearchBar.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/SearchBar/fetchSearch.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/SearchContainer/SearchContainer.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/SearchContainer/types.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/SearchItemCard/SearchItemCard.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/SearchItemCard/types.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/Social/Social.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/ToTopArrow/ToTopArrow.tsx",["830"],[],"import React, { useState, useEffect } from 'react';\nimport styles from './ToTopArrow.module.css';\nimport { useMediaQuery } from '@mui/material';\n\nconst BackToTopArrow = () => {\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n  const isNotDesktop = useMediaQuery('(max-width:1000px)');\n\n  useEffect(() => {\n    const scrollListener = () => {\n      1;\n      if (window.scrollY > 300 && !isNotDesktop) {\n        setIsVisible(true);\n      } else {\n        setIsVisible(false);\n      }\n    };\n\n    window.addEventListener('scroll', scrollListener);\n\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    };\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  return (\n    <div\n      className={`${styles.backToTop} ${isVisible ? styles.show : ''}`}\n      onClick={scrollToTop}\n    >\n      <a href=\"#\">^</a>\n    </div>\n  );\n};\n\nexport default BackToTopArrow;\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/favorites/Favorites.tsx",["831"],[],"import React, { useEffect, useState } from 'react';\nimport styles from './Favorites.module.css';\n// import ProductCard from '../../ProductCard/ProductCard';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../app/store';\nimport { useAppDispatch } from '../../../app/hooks';\nimport {\n  fetchAllFavorites,\n  fetchFavouritesData,\n} from '../../../app/thunkActionsFavourite';\nimport ProductCard from '@/components/ProductCard/ProductCard';\nimport { addToFavorites } from '@/components/ProductCard/thunkProduct';\nimport { toggleFavorite } from '@/app/CategorySlice';\n\nexport default function Favorites() {\n  let itemData = useSelector(\n    (state: RootState) => state.favouriteSlice.favoriteItemList\n  );\n  const { user } = useSelector((state: RootState) => state.sessionSlice);\n\n  const dispatch = useAppDispatch();\n  const [favoriteItems, setFavoriteItems] = useState<any[]>([]);\n\n  useEffect(() => {\n    dispatch(fetchAllFavorites());\n  }, []);\n\n  useEffect(() => {\n    const favoritesFromStorage =\n      JSON.parse(localStorage.getItem('favorites')!) || '[]';\n\n    const fetchData = async () => {\n      const fetchedItems = [];\n\n      for (const id of favoritesFromStorage) {\n        try {\n          const response = await fetch(\n            process.env.NEXT_PUBLIC_URL + 'item/' + id,\n            {\n              credentials: 'include',\n            }\n          );\n          if (response.status === 200) {\n            let itemData = await response.json();\n\n            fetchedItems.push(itemData);\n          } else if (response.status === 404) {\n            console.log('Товар не найден');\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      }\n\n      setFavoriteItems(fetchedItems);\n    };\n\n    fetchData();\n  }, []);\n\n  if (!user) {\n    itemData = [];\n  }\n\n  const renderProductCards =\n    itemData && Array.isArray(itemData)\n      ? itemData.map((item) => (\n          <ProductCard\n            key={item.id}\n            id={item.id}\n            material_name={item.Material.name}\n            article={item.article}\n            photo={item.Photos[0].photo}\n            name={item.name}\n            price={item.price}\n            newPrice={item.new_price}\n            isFavorite={item.isFavorite}\n            isCart={item.isCart}\n          />\n        )\n        )\n      : null;\n\n  const renderProductCardsLocal =\n    favoriteItems && Array.isArray(favoriteItems)\n      ? favoriteItems.map((item) => (\n          <ProductCard\n            key={item.item.id}\n            id={item.item.id}\n            material_name={item.item.Material.name}\n            article={item.item.article}\n            photo={item.item.Photos[0].photo}\n            name={item.item.name}\n            price={item.item.price}\n            newPrice={item.item.new_price}\n            isFavorite={item.item.isFavorite}\n            isCart={item.isCart}\n          />\n        ))\n      : null;\n\n  return (\n    <>\n      {itemData?.length > 0 ? (\n        <div className={styles.ContainerOneCard}>\n          <div className={styles.ProductCardsContainer}>\n            {renderProductCards}\n          </div>\n        </div>\n      ) : favoriteItems?.length > 0 ? (\n        <div className={styles.ContainerOneCard}>\n          <div className={styles.ProductCardsContainer}>\n            {renderProductCardsLocal}\n          </div>\n        </div>\n      ) : (\n        <div className={styles.infoContainer}>\n          <p className={styles.infoP}>У вас пока нет товаров в избранном</p>\n        </div>\n      )}\n    </>\n  );\n}\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/modalEditInfo/FetchEditUserInfo.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/modalEditInfo/ModalEditInfo.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/modalEditInfo/types.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/orderComp/OrderComp.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/orderComp/types.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/orders/FetchOrderData.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/orders/Orders.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/orders/types.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/profile/FetchUserInfo.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/profile/Profile.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/profile/userDataTypes.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/sureModal/SureModal.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/accComp/sureModal/types.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/carousel/CustomCarousel.tsx",["832"],[],"import React, { useEffect, useState } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport SwiperCore from 'swiper/core';\nimport { Navigation, Pagination } from 'swiper/modules';\nimport 'swiper/css';\nimport 'swiper/css/navigation';\nimport 'swiper/css/pagination';\n\nSwiperCore.use([Pagination, Navigation]);\n\ninterface ImageData {\n  id: number;\n  url: string;\n}\n\ninterface CustomCarouselProps {\n  imageData: ImageData[];\n}\n\nexport default function CustomCarousel({\n  imageData,\n}: CustomCarouselProps): JSX.Element {\n  return (\n    <Swiper\n      slidesPerView={3}\n      centeredSlides={true}\n      spaceBetween={0}\n      pagination={{\n        type: 'bullets',\n      }}\n      loop={true}\n      slideToClickedSlide={true}\n      className=\"mySwiper\"\n      breakpoints={{\n        180: {\n          slidesPerView: 1,\n        },\n        320: {\n          slidesPerView: 1,\n        },\n        640: {\n          slidesPerView: 1,\n        },\n        768: {\n          slidesPerView: 1,\n        },\n      }}\n    >\n      {imageData &&\n        imageData.map((item) => (\n          <SwiperSlide key={item.id} className=\"slide-container\">\n            <img\n              src={item.url}\n              alt={`Image ${item.id}`}\n              style={{ width: '100%' }}\n            />\n          </SwiperSlide>\n        ))}\n    </Swiper>\n  );\n}\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/catalog/CategoryList/categoryList.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/cookieConsent/CookieConsent.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/customImgModal/CustomImgModal.tsx",["833"],[],"import Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Modal from '@mui/material/Modal';\nimport './customImgModalStyel.css';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 600,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  '@media (max-width: 767px)': {\n    width: 300,\n  },\n};\n// TODO компонент нигде не используется - удалить ?\n\nexport default function CustomImgModal({ open, onClose, imageUrl }) {\n  return (\n    <div>\n      <Modal\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={{ ...style }}>\n          <div className=\"modalContentStyle\">\n            <img\n              className=\"modalImgStyle\"\n              src={imageUrl}\n              alt=\"Enlarged Textile\"\n            />\n          </div>\n        </Box>\n      </Modal>\n    </div>\n  );\n}\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/customList/CustomList.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/likeButton/LikeButton.tsx",["834"],[],"import React, { useState, useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '@/app/hooks';\n\nimport { RootState } from '@/app/store';\nimport { IconButton } from '@mui/material';\nimport { Badge } from '@mui/base';\nimport FavoriteOutlinedIcon from '@mui/icons-material/FavoriteOutlined';\nimport FavoriteBorderOutlinedIcon from '@mui/icons-material/FavoriteBorderOutlined';\nimport { useSelector } from 'react-redux';\n\nimport {\n  fetchFavouritesData,\n  fetchItemData,\n  fetchOneFavourite,\n} from '@/app/thunkActionsFavourite';\nimport { setFavourites } from '@/app/favouriteSlice';\n\ninterface LikeButtonProps {\n  itemId: number;\n}\n\nconst LikeButton: React.FC<LikeButtonProps> = ({ itemId }) => {\n  const [isLiked, setIsLiked] = useState(false);\n\n  const user = useSelector((state: RootState) => state.sessionSlice.user);\n  const dispatch = useAppDispatch();\n  const favourites = useAppSelector(\n    (state: RootState) => state.favouriteSlice.favourites\n  );\n\n  useEffect(() => {\n    dispatch(fetchItemData(itemId));\n    dispatch(fetchFavouritesData());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (user) {\n      const checkLike = favourites.some((el) => el.item_id == itemId);\n      setIsLiked(checkLike);\n    } else {\n      const likeFromStorage = JSON.parse(\n        localStorage.getItem('favorites') || '[]'\n      );\n      const isItemInFav = likeFromStorage.includes(itemId);\n      setIsLiked(isItemInFav);\n    }\n  }, [favourites, user, itemId]);\n\n  const favHandler = async () => {\n    if (!user) {\n\n      const favoritesFromStorage =\n        JSON.parse(localStorage.getItem('favorites')!) || [];\n\n      const isItemInFavorites = favoritesFromStorage.includes(itemId);\n\n      if (isItemInFavorites) {\n        const updatedFavorites = favoritesFromStorage.filter(\n          (favId: number) => favId !== itemId\n        );\n        localStorage.setItem('favorites', JSON.stringify(updatedFavorites));\n        setIsLiked(!isLiked);\n        await dispatch(setFavourites(updatedFavorites));\n      } else {\n        const updatedFavorites = [...favoritesFromStorage, itemId];\n        localStorage.setItem('favorites', JSON.stringify(updatedFavorites));\n        setIsLiked(!isLiked);\n        await dispatch(setFavourites(updatedFavorites));\n        return;\n      }\n    } else {\n      if (itemId) {\n        await dispatch(fetchOneFavourite(itemId));\n        setIsLiked(!isLiked);\n      }\n    }\n  };\n\n  return (\n    <IconButton onClick={favHandler} size=\"small\">\n      <Badge>\n        {isLiked ? (\n          <FavoriteOutlinedIcon sx={{ fontSize: '2rem', color: '#656565' }} />\n        ) : (\n          <FavoriteBorderOutlinedIcon\n            sx={{ fontSize: '2rem', color: '#656565' }}\n          />\n        )}\n      </Badge>\n    </IconButton>\n  );\n};\nexport default LikeButton;\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/main/BottomBlock.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/main/HorizontalBlock.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/main/VerticalBlock.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/main/consts.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/navAdminComp/NavAdminComp.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/navFAQComp/NavFAQComp.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/404.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/FAQ/deliveryFAQ.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/FAQ/measurementsFAQ.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/FAQ/orderFAQ.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/FAQ/returnFAQ.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/_app.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/_document.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/about.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/account.tsx",["835"],[],"import React, { useState, useEffect } from 'react';\n\nimport { Button } from '@mui/material';\nimport styles from '../styles/Account.module.css';\nimport LogoutIcon from '@mui/icons-material/Logout';\nimport Favorites from '@/components/accComp/favorites/Favorites';\nimport Profile from '@/components/accComp/profile/Profile';\nimport Orders from '@/components/accComp/orders/Orders';\nimport SureModal from '@/components/accComp/sureModal/SureModal';\nimport Head from 'next/head';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '@/app/store';\nimport { useRouter } from 'next/router';\n\nexport default function Account() {\n  const [open, setOpen] = useState<boolean>(false);\n  const [selectedComponent, setSelectedComponent] = useState('profile');\n\n  const router = useRouter();\n\n  const isUserLogin = useSelector(\n    (state: RootState) => state.sessionSlice.session\n  );\n\n  useEffect(() => {\n    if (!isUserLogin) {\n      router.push('/signin');\n    }\n  }, [isUserLogin]);\n\n  const renderComponent = () => {\n    switch (selectedComponent) {\n      case 'favorites':\n        return <Favorites />;\n      case 'profile':\n        return <Profile />;\n      case 'orders':\n        return <Orders />;\n      default:\n        return null;\n    }\n  };\n\n  const handleOpen = () => setOpen(true);\n\n  return (\n    <>\n      <Head>\n        <title>Cape&Coat | Профиль</title>\n        <meta name='title' content='Cape and Coat' />\n        <meta name='viewport' content='width=device-width, initial-scale=1' />\n        <link rel='icon' href='/favicon.ico' />\n        <meta name='robots' content='noindex,nofollow' />\n      </Head>\n\n      {isUserLogin && (\n        <div className={styles.mainDiv}>\n          <div className={styles.routesDiv}>\n            <Button\n              onClick={() => setSelectedComponent('favorites')}\n              className={styles.button}\n            >\n              Избранное\n            </Button>\n            <Button\n              onClick={() => setSelectedComponent('profile')}\n              className={styles.button}\n              type='button'\n            >\n              Данные\n            </Button>\n            <Button\n              onClick={() => setSelectedComponent('orders')}\n              className={styles.button}\n              type='button'\n            >\n              Заказы\n            </Button>\n            <Button\n              onClick={handleOpen}\n              className={styles.button}\n              type='button'\n            >\n              <LogoutIcon />\n              Выйти\n            </Button>\n            <SureModal open={open} setOpen={setOpen} />\n          </div>\n          <div className={styles.elContainer}>{renderComponent()}</div>\n        </div>\n      )}\n    </>\n  );\n}\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/address.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/admin/content.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/admin/newOrder.tsx",["836"],[],"import FormAddOrder from '@/components/Admin/FormAddOrder/FormAddOrder';\nimport NavAdminComp from '@/components/navAdminComp/NavAdminComp';\nimport Head from 'next/head';\nimport React from 'react';\nimport { RootState } from '@/app/store';\nimport { useRouter } from 'next/router';\nimport { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\nexport default function NewOrder() {\n  const isAdmin = useSelector((state: RootState) => state.sessionSlice.isAdmin);\n\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!isAdmin) {\n      router.push('/signin');\n    }\n  }, [isAdmin]);\n\n  return (\n    <>\n      {isAdmin && (\n        <>\n          <Head>\n            <meta name=\"robots\" content=\"noindex,nofollow\" />\n          </Head>\n          <NavAdminComp />\n          <FormAddOrder />\n        </>\n      )}\n    </>\n  );\n}\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/admin/ordersHistory.tsx",["837"],[],"import { useState, useEffect } from 'react';\nimport { format, parseISO } from 'date-fns';\nimport { ru } from 'date-fns/locale';\nimport { Modal } from '@mui/material';\nimport {\n  allOrderDataFetch,\n  updateOrderFieldFetch,\n  updateOrderItemFieldFetch,\n} from '../../components/Admin/HTTP/adminApi';\nimport styles from '../../styles/admin/OrdersAdmin.module.css';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Button,\n  TextField,\n  Checkbox,\n} from '@mui/material';\nimport InfoModal from '../../components/Admin/InfoModal';\nimport NavAdminComp from '@/components/navAdminComp/NavAdminComp';\nimport { IOrderAdmin } from '@/components/Admin/order/types';\nimport InfoContainer from '@/components/Admin/infoContainer/InfoContainer';\nimport TasksForm from '@/components/Admin/TasksForm/TasksForm';\nimport {\n  IItemData,\n  ITaskInfo,\n} from '@/components/Admin/TasksForm/taskformTypes';\nimport Head from 'next/head';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '@/app/store';\nimport { useRouter } from 'next/router';\n\n// TODO типизация, много, не комменчу каждую ошибку\n\nexport default function Order() {\n  const [orders, setOrders] = useState([]);\n  const [message, setMessage] = useState('');\n  const [statusVal, setStatus] = useState({\n    status: 'Заказ принят',\n  });\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    allOrderDataFetch(setOrders);\n  }, []);\n  //! ---------------------------ЗАЩИТА СТРАНИЦЫ-------------------------------------\n\n  const isAdmin = useSelector((state: RootState) => state.sessionSlice.isAdmin);\n\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!isAdmin) {\n      router.push('/signin');\n    }\n  }, [isAdmin]);\n\n  //! ---------------------------ЛОГИКА ИЗМЕНЕНИЯ ПОЛЕЙ ЗАКАЗА-------------------------------------\n\n  const [editingOrderData, setEditingOrderData] = useState({\n    id: null,\n    field: '',\n    value: '',\n  });\n\n  const handleFieldClick = (orderId, currentField, currentFieldValue) => {\n    setEditingOrderData({\n      id: orderId,\n      field: currentField,\n      value: currentFieldValue.toString(),\n    });\n  };\n\n  const handleFieldChange = (event) => {\n    setEditingOrderData((prev) => ({\n      ...prev,\n      value: event.target.value,\n    }));\n  };\n\n  const handleFieldChangeBoolean = (event) => {\n    setEditingOrderData((prev) => ({\n      ...prev,\n      value: event.target.checked,\n    }));\n  };\n\n  const handleFieldConfirm = async () => {\n    const { id, field, value } = editingOrderData;\n    const updatedOrder = await updateOrderFieldFetch(id, field, value);\n    if (updatedOrder) {\n      const newOrders = orders.map((order) =>\n        order.id === id ? updatedOrder : order\n      );\n      setOrders(newOrders);\n    }\n    setEditingOrderData({\n      id: null,\n      field: '',\n      value: '',\n    });\n  };\n\n  //! --------------------Логика изменения полей с мерками--------------------------\n\n  const handleFieldClickMeasurements = (\n    orderId,\n    itemId,\n    currentField,\n    currentFieldValue\n  ) => {\n    setEditingOrderData({\n      id: orderId,\n      itemId: itemId,\n      field: currentField,\n      value: currentFieldValue?.toString(),\n    });\n  };\n\n  const handleFieldConfirmMeasurements = async () => {\n    const { id, itemId, field, value } = editingOrderData;\n\n    const updatedOrder = await updateOrderItemFieldFetch(\n      id,\n      itemId,\n      field,\n      value\n    );\n    if (updatedOrder) {\n      const newOrders = orders.map((order) =>\n        order.id === id ? updatedOrder : order\n      );\n      setOrders(newOrders);\n    }\n    setEditingOrderData({\n      id: null,\n      itemId: null,\n      field: '',\n      value: '',\n    });\n  };\n\n  //! --------------------Логика пагинации-------------------------------------------\n\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  let ordersByMonth = orders?.reduce((acc, order) => {\n    let date = format(parseISO(order?.createdAt), 'MMMM yyyy');\n    let found = acc.find((a) => a.date === date);\n\n    if (!found) {\n      acc.push({ date: date, orders: [order] });\n    } else {\n      found.orders.push(order);\n    }\n\n    return acc;\n  }, []);\n\n  ordersByMonth = ordersByMonth?.sort((a, b) => {\n    const dateA = new Date(\n      a.date.split(' ')[1],\n      months.indexOf(a.date.split(' ')[0])\n    );\n    const dateB = new Date(\n      b.date.split(' ')[1],\n      months.indexOf(b.date.split(' ')[0])\n    );\n    return dateA - dateB;\n  });\n\n  const [pageNumber, setPageNumber] = useState(0);\n\n  const totalMonths = ordersByMonth[pageNumber]?.orders.reduce(\n    (accumulator, order) => accumulator + Number(order.total),\n    0\n  );\n\n  //! Логика составления заданий\n\n  const [openModal, setOpenModal] = useState<boolean>(false);\n  const [itemInfo, setItemInfo] = useState<IItemData>({\n    id: 0,\n    name: '',\n    article: '',\n    description: '',\n    model_params: '',\n    characteristics: '',\n    price: 0,\n    new_price: 0,\n    in_stock: false,\n    bestseller: false,\n    collection_id: 0,\n    material_id: 0,\n    category_id: 0,\n    createdAt: '',\n    updatedAt: '',\n    OrderItem: {\n      order_id: 0,\n      item_id: 0,\n      height: '',\n      length: '',\n      sleeve: '',\n      bust: '',\n      waist: '',\n      hips: '',\n      saddle: '',\n      loops: false,\n      buttons: '',\n      lining: '',\n      createdAt: '',\n      updatedAt: '',\n    },\n    Material: {\n      id: 0,\n      name: '',\n      photo: '',\n      category_id: 0,\n      createdAt: '',\n      updatedAt: '',\n    },\n  });\n\n  const [taskInfo, setTaskInfo] = useState<ITaskInfo>({\n    id: 0,\n    createdAt: '',\n    updatedAt: '',\n  });\n\n  const handleFormTask = async (item: IItemData) => {\n    const response = await fetch(`${process.env.NEXT_PUBLIC_URL}admin/tasks/`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      credentials: 'include',\n      body: JSON.stringify(item),\n    });\n    const res = await response.json();\n    setTaskInfo(res.newTask);\n    setItemInfo(item);\n    setOpenModal(true);\n  };\n\n  return (\n    <>\n      {isAdmin && (\n        <>\n          <Head>\n            <meta name=\"robots\" content=\"noindex,nofollow\" />\n          </Head>\n          <NavAdminComp />\n          <InfoContainer />\n          <div className={styles.mainDiv}>\n            <div className={styles.infoTotalContainer}>\n              <p className={styles.infoPTotal}>\n                Итого за месяц заказов на {totalMonths?.toLocaleString()}р\n              </p>\n            </div>\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'center',\n                margin: '10px 0',\n              }}\n            >\n              <select\n                onChange={(event) => setPageNumber(event.target.selectedIndex)}\n                value={ordersByMonth[pageNumber]?.date}\n                style={{\n                  padding: '5px 10px',\n                  fontSize: '16px',\n                }}\n              >\n                {ordersByMonth.map((item, index) => (\n                  <option key={index} value={item.date}>\n                    {item.date}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <TableContainer className={styles.tableContainer} component={Paper}>\n              <Table className={styles.table} aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow className={styles.tableRow}>\n                    <TableCell\n                      sx={{ padding: '0px' }}\n                      className={styles.tableCell}\n                    >\n                      №\n                    </TableCell>\n                    <TableCell\n                      sx={{ padding: '0px' }}\n                      className={styles.tableCell}\n                    >\n                      Срочность\n                    </TableCell>\n                    <TableCell className={styles.tableMiddleCell}>\n                      Дата оформления*\n                    </TableCell>\n                    <TableCell className={styles.tableMiddleCell}>\n                      Дата готовности\n                    </TableCell>\n                    <TableCell className={styles.tableCell}>ФИО*</TableCell>\n                    <TableCell className={styles.tableCell}>\n                      Telegram/Insta*\n                    </TableCell>\n                    <TableCell className={styles.tableCell}>Email*</TableCell>\n                    <TableCell className={styles.tableCell}>Телефон*</TableCell>\n                    <TableCell className={styles.tableCell}>\n                      Тип оплаты\n                    </TableCell>\n                    <TableCell className={styles.tableCell}>\n                      Стоимость\n                    </TableCell>\n                    <TableCell className={styles.tableCell}>\n                      Предоплата\n                    </TableCell>\n                    <TableCell className={styles.tableCell}>Остаток*</TableCell>\n                    <TableCell className={styles.tableMiddleCell}>\n                      Адрес\n                    </TableCell>\n                    <TableCell className={styles.tableCellBig}>\n                      Комментарии\n                    </TableCell>\n\n                    <TableCell className={styles.tableCellMini}>Рост</TableCell>\n                    <TableCell className={styles.tableCellMini}>\n                      Длина\n                    </TableCell>\n                    <TableCell className={styles.tableCellMini}>\n                      Рукав\n                    </TableCell>\n                    <TableCell className={styles.tableCellMini}>\n                      Об.груди\n                    </TableCell>\n                    <TableCell className={styles.tableCellMini}>\n                      Талия\n                    </TableCell>\n                    <TableCell className={styles.tableCellMini}>\n                      Бёдра\n                    </TableCell>\n                    <TableCell className={styles.tableCellMini}>\n                      Седло\n                    </TableCell>\n                    <TableCell className={styles.tableCellMini}>\n                      Петли\n                    </TableCell>\n                    <TableCell className={styles.tableCellMini}>\n                      Кнопки/Пуговицы\n                    </TableCell>\n                    <TableCell className={styles.tableCellMini}>\n                      Подкладка\n                    </TableCell>\n\n                    <TableCell className={styles.tableMiddleCell}>\n                      Товары*\n                    </TableCell>\n                    <TableCell className={styles.tableMiddleCell}>\n                      Материалы*\n                    </TableCell>\n                    <TableCell className={styles.tableCellBig}>\n                      Комментарии менеджера\n                    </TableCell>\n                    <TableCell className={styles.tableMiddleCell}>\n                      Статус\n                    </TableCell>\n                    <TableCell className={styles.tableCell}>Задание</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {ordersByMonth[pageNumber]?.orders?.map(\n                    (order: IOrderAdmin) => (\n                      <TableRow\n                        key={order.id}\n                        sx={{\n                          backgroundColor:\n                            order?.status === 'Заказ создан' ||\n                            order?.status ===\n                              'Уточнение мерок, отправка реквизитов для внесения предоплаты' ||\n                            order?.status === 'Ожидание предоплаты' ||\n                            order?.status === 'Предоплата получена'\n                              ? 'rgba(147, 215, 255, 0.392)'\n                              : order?.status === 'Задание сформировано' ||\n                                order?.status ===\n                                  'Задание передано на производство' ||\n                                order?.status ===\n                                  'Обратная связь по заданию от производства' ||\n                                order?.status === 'Изделия в производстве'\n                              ? 'rgba(237, 255, 186, 0.39)'\n                              : order?.status === 'Изделие отшито' ||\n                                order?.status === 'Забрали заказ с производства'\n                              ? 'rgba(222, 142, 230, 0.49)'\n                              : order?.status ===\n                                  'Оповещение клиента, отправка реквизитов для внесения полной оплаты' ||\n                                order?.status === 'Получена полная оплата'\n                              ? 'rgba(158, 255, 158, 0.39)'\n                              : order?.status === 'Заказ отправлен'\n                              ? 'rgba(133, 317, 130, 0.69)'\n                              : order?.status === 'Возврат заказа' ||\n                                order?.status === 'Перешив заказа'\n                              ? 'rgba(220, 61, 61, 0.79)'\n                              : 'inherit',\n                        }}\n                      >\n                        <TableCell className={styles.tableCell}>\n                          {order?.id}\n                        </TableCell>\n\n                        <TableCell\n                          sx={{\n                            backgroundColor: order?.urgent ? 'red' : 'inherit',\n                          }}\n                          className={styles.tableCell}\n                          onClick={() =>\n                            handleFieldClick(\n                              order?.id,\n                              'urgent',\n                              !order?.urgent\n                            )\n                          }\n                        >\n                          {editingOrderData.id === order?.id &&\n                          editingOrderData.field === 'urgent' ? (\n                            <div className={styles.checkBoxContainer}>\n                              <Checkbox\n                                className={styles.checkBox}\n                                checked={\n                                  editingOrderData.value === 'urgent'\n                                    ? order?.urgent\n                                    : editingOrderData.value\n                                }\n                                onChange={handleFieldChangeBoolean}\n                                inputProps={{\n                                  'aria-label': 'primary checkbox',\n                                }}\n                              />\n                              <Button\n                                className={styles.buttonInput}\n                                type=\"submit\"\n                                variant=\"contained\"\n                                onClick={handleFieldConfirm}\n                              >\n                                Изменить\n                              </Button>\n                            </div>\n                          ) : (\n                            <div>{order?.urgent ? 'Срочно' : 'Не срочно'}</div>\n                          )}\n                        </TableCell>\n\n                        <TableCell className={styles.tableCell}>\n                          <span>\n                            {format(\n                              parseISO(order?.createdAt),\n                              \"dd MMMM yyyy'г'\",\n                              {\n                                locale: ru,\n                              }\n                            )}\n                          </span>\n                        </TableCell>\n                        <TableCell\n                          className={styles.tableCell}\n                          onClick={() =>\n                            handleFieldClick(\n                              order?.id,\n                              'getReadyAt',\n                              order?.getReadyAt\n                            )\n                          }\n                        >\n                          {editingOrderData.id === order?.id &&\n                          editingOrderData.field === 'getReadyAt' ? (\n                            <div className={styles.inputContainer}>\n                              <TextField\n                                type=\"date\"\n                                className={styles.dateInput}\n                                fullWidth\n                                required\n                                value={editingOrderData.value}\n                                onChange={handleFieldChange}\n                              />\n                              <Button\n                                className={styles.buttonInput}\n                                type=\"submit\"\n                                variant=\"contained\"\n                                onClick={handleFieldConfirm}\n                              >\n                                Сохранить\n                              </Button>\n                            </div>\n                          ) : order?.getReadyAt ? (\n                            <span>\n                              {format(\n                                parseISO(order?.getReadyAt),\n                                \"dd MMMM yyyy'г'\",\n                                {\n                                  locale: ru,\n                                }\n                              )}\n                            </span>\n                          ) : (\n                            <span></span>\n                          )}\n                        </TableCell>\n\n                        <TableCell className={styles.tableCell}>\n                          {order?.User?.full_name}\n                        </TableCell>\n                        <TableCell className={styles.tableCell}>\n                          {order?.User?.telegram_instagram}\n                        </TableCell>\n                        <TableCell className={styles.tableCell}>\n                          {order.User?.email}\n                        </TableCell>\n                        <TableCell className={styles.tableCell}>\n                          {order.User?.phone}\n                        </TableCell>\n                        <TableCell\n                          className={styles.tableCell}\n                          onClick={() =>\n                            handleFieldClick(\n                              order?.id,\n                              'payment_type',\n                              order?.payment_type\n                            )\n                          }\n                        >\n                          {editingOrderData.id === order?.id &&\n                          editingOrderData.field === 'payment_type' ? (\n                            <div className={styles.inputContainer}>\n                              <input\n                                style={{ width: '100px' }}\n                                onChange={handleFieldChange}\n                                className={styles.inputText}\n                                type=\"text\"\n                                fullWidth\n                                required\n                                value={editingOrderData.value}\n                              />\n                              <Button\n                                className={styles.buttonInput}\n                                type=\"submit\"\n                                variant=\"contained\"\n                                onClick={handleFieldConfirm}\n                              >\n                                Сохранить\n                              </Button>\n                            </div>\n                          ) : (\n                            <span>{order?.payment_type}</span>\n                          )}\n                        </TableCell>\n                        <TableCell\n                          className={styles.tableCell}\n                          onClick={() =>\n                            handleFieldClick(order?.id, 'total', order?.total)\n                          }\n                        >\n                          {editingOrderData.id === order?.id &&\n                          editingOrderData.field === 'total' ? (\n                            <div className={styles.inputContainer}>\n                              <input\n                                style={{ width: '100px', fontSize: 'medium' }}\n                                onChange={handleFieldChange}\n                                className={styles.inputText}\n                                type=\"number\"\n                                required\n                                value={editingOrderData.value}\n                              />\n                              <Button\n                                className={styles.buttonInput}\n                                type=\"submit\"\n                                variant=\"contained\"\n                                onClick={handleFieldConfirm}\n                              >\n                                Сохранить\n                              </Button>\n                            </div>\n                          ) : (\n                            <span>{order?.total}</span>\n                          )}\n                        </TableCell>\n                        <TableCell\n                          className={styles.tableCell}\n                          onClick={() =>\n                            handleFieldClick(\n                              order?.id,\n                              'prepayment',\n                              order?.prepayment\n                            )\n                          }\n                        >\n                          {editingOrderData.id === order?.id &&\n                          editingOrderData.field === 'prepayment' ? (\n                            <div className={styles.inputContainer}>\n                              <input\n                                style={{ width: '100px', fontSize: 'medium' }}\n                                onChange={handleFieldChange}\n                                className={styles.inputText}\n                                type=\"number\"\n                                required\n                                value={editingOrderData.value}\n                              />\n                              <Button\n                                className={styles.buttonInput}\n                                type=\"submit\"\n                                variant=\"contained\"\n                                onClick={handleFieldConfirm}\n                              >\n                                Сохранить\n                              </Button>\n                            </div>\n                          ) : (\n                            <span>{order?.prepayment}</span>\n                          )}\n                        </TableCell>\n                        <TableCell className={styles.tableCell}>\n                          {order?.residual_amount?.toLocaleString()}\n                        </TableCell>\n                        <TableCell\n                          className={styles.tableCell}\n                          onClick={() =>\n                            handleFieldClick(\n                              order?.id,\n                              'address',\n                              order?.address\n                            )\n                          }\n                        >\n                          {editingOrderData.id === order?.id &&\n                          editingOrderData.field === 'address' ? (\n                            <div className={styles.inputContainer}>\n                              <input\n                                onChange={handleFieldChange}\n                                className={styles.inputText}\n                                type=\"text\"\n                                name=\"address\"\n                                placeholder=\"Введите адрес...\"\n                                value={editingOrderData.value}\n                              />\n                              <Button\n                                className={styles.buttonInput}\n                                type=\"submit\"\n                                variant=\"contained\"\n                                onClick={handleFieldConfirm}\n                              >\n                                Сохранить\n                              </Button>\n                            </div>\n                          ) : (\n                            <span>{order?.address}</span>\n                          )}\n                        </TableCell>\n                        <TableCell\n                          className={styles.tableCell}\n                          onClick={() =>\n                            handleFieldClick(\n                              order?.id,\n                              'comments',\n                              order?.comments\n                            )\n                          }\n                        >\n                          {editingOrderData.id === order?.id &&\n                          editingOrderData.field === 'comments' ? (\n                            <div className={styles.inputContainer}>\n                              <TextField\n                                sx={{\n                                  height: '80px',\n                                  fontSize: '14px',\n                                  paddingTop: '4px',\n                                  paddingBottom: '4px',\n                                }}\n                                type=\"text\"\n                                className=\"text-field\"\n                                fullWidth\n                                required\n                                multiline\n                                rows={4}\n                                value={editingOrderData.value}\n                                onChange={handleFieldChange}\n                                InputProps={{\n                                  sx: {\n                                    fontSize: '14px',\n                                    paddingTop: '2px',\n                                    paddingBottom: '2px',\n                                  },\n                                }}\n                              />\n                              <Button\n                                className={styles.buttonInput}\n                                type=\"submit\"\n                                variant=\"contained\"\n                                onClick={handleFieldConfirm}\n                              >\n                                Сохранить\n                              </Button>\n                            </div>\n                          ) : (\n                            <span>{order?.comments}</span>\n                          )}\n                        </TableCell>\n\n                        <TableCell className={styles.tableCell}>\n                          {order?.Items?.map((item) => (\n                            <div\n                              style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                              }}\n                              key={item?.article}\n                            >\n                              {editingOrderData.id === order?.id &&\n                              editingOrderData.itemId === item?.id &&\n                              editingOrderData.field === 'height' ? (\n                                <div className={styles.inputContainer}>\n                                  <input\n                                    style={{\n                                      width: '100px',\n                                      fontSize: 'medium',\n                                    }}\n                                    type=\"number\"\n                                    className=\"text-field\"\n                                    required\n                                    autoFocus\n                                    value={editingOrderData.value}\n                                    onChange={handleFieldChange}\n                                  />\n                                  <Button\n                                    className={styles.buttonInput}\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    onClick={handleFieldConfirmMeasurements}\n                                  >\n                                    Сохранить\n                                  </Button>\n                                </div>\n                              ) : (\n                                <p\n                                  style={{\n                                    borderBottom: '0.5px solid black',\n                                    marginBottom: '10px',\n                                    marginTop: '5px',\n                                  }}\n                                  onClick={() =>\n                                    handleFieldClickMeasurements(\n                                      order?.id,\n                                      item?.id,\n                                      'height',\n                                      item?.OrderItem?.height\n                                    )\n                                  }\n                                >\n                                  {item?.article}: {item?.OrderItem?.height}\n                                </p>\n                              )}\n                            </div>\n                          ))}\n                        </TableCell>\n\n                        <TableCell className={styles.tableCell}>\n                          {order?.Items?.map((item) => (\n                            <div\n                              style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                              }}\n                              key={item?.id}\n                            >\n                              {editingOrderData.id === order?.id &&\n                              editingOrderData.itemId === item?.id &&\n                              editingOrderData.field === 'length' ? (\n                                <div className={styles.inputContainer}>\n                                  <input\n                                    style={{\n                                      width: '100px',\n                                      fontSize: 'medium',\n                                    }}\n                                    type=\"number\"\n                                    className=\"text-field\"\n                                    required\n                                    autoFocus\n                                    value={editingOrderData.value}\n                                    onChange={handleFieldChange}\n                                  />\n                                  <Button\n                                    className={styles.buttonInput}\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    onClick={handleFieldConfirmMeasurements}\n                                  >\n                                    Сохранить\n                                  </Button>\n                                </div>\n                              ) : (\n                                <p\n                                  style={{\n                                    borderBottom: '0.5px solid black',\n                                    marginBottom: '10px',\n                                    marginTop: '5px',\n                                  }}\n                                  onClick={() =>\n                                    handleFieldClickMeasurements(\n                                      order?.id,\n                                      item?.id,\n                                      'length',\n                                      item?.OrderItem?.length\n                                    )\n                                  }\n                                >\n                                  {item?.article}: {item?.OrderItem?.length}\n                                </p>\n                              )}\n                            </div>\n                          ))}\n                        </TableCell>\n\n                        <TableCell className={styles.tableCell}>\n                          {order?.Items?.map((item) => (\n                            <div\n                              style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                              }}\n                              key={item?.id}\n                            >\n                              {editingOrderData.id === order?.id &&\n                              editingOrderData.itemId === item?.id &&\n                              editingOrderData.field === 'sleeve' ? (\n                                <div className={styles.inputContainer}>\n                                  <input\n                                    style={{\n                                      width: '100px',\n                                      fontSize: 'medium',\n                                    }}\n                                    type=\"number\"\n                                    className=\"text-field\"\n                                    required\n                                    autoFocus\n                                    value={editingOrderData.value}\n                                    onChange={handleFieldChange}\n                                  />\n                                  <Button\n                                    className={styles.buttonInput}\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    onClick={handleFieldConfirmMeasurements}\n                                  >\n                                    Сохранить\n                                  </Button>\n                                </div>\n                              ) : (\n                                <p\n                                  style={{\n                                    borderBottom: '0.5px solid black',\n                                    marginBottom: '10px',\n                                    marginTop: '5px',\n                                  }}\n                                  onClick={() =>\n                                    handleFieldClickMeasurements(\n                                      order?.id,\n                                      item?.id,\n                                      'sleeve',\n                                      item?.OrderItem?.sleeve\n                                    )\n                                  }\n                                >\n                                  {item?.article}: {item?.OrderItem?.sleeve}\n                                </p>\n                              )}\n                            </div>\n                          ))}\n                        </TableCell>\n\n                        <TableCell className={styles.tableCell}>\n                          {order?.Items?.map((item) => (\n                            <div\n                              style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                              }}\n                              key={item?.id}\n                            >\n                              {editingOrderData.id === order?.id &&\n                              editingOrderData.itemId === item?.id &&\n                              editingOrderData.field === 'bust' ? (\n                                <div className={styles.inputContainer}>\n                                  <input\n                                    style={{\n                                      width: '100px',\n                                      fontSize: 'medium',\n                                    }}\n                                    type=\"number\"\n                                    className=\"text-field\"\n                                    required\n                                    autoFocus\n                                    value={editingOrderData.value}\n                                    onChange={handleFieldChange}\n                                  />\n                                  <Button\n                                    className={styles.buttonInput}\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    onClick={handleFieldConfirmMeasurements}\n                                  >\n                                    Сохранить\n                                  </Button>\n                                </div>\n                              ) : (\n                                <p\n                                  style={{\n                                    borderBottom: '0.5px solid black',\n                                    marginBottom: '10px',\n                                    marginTop: '5px',\n                                  }}\n                                  onClick={() =>\n                                    handleFieldClickMeasurements(\n                                      order?.id,\n                                      item?.id,\n                                      'bust',\n                                      item?.OrderItem?.bust\n                                    )\n                                  }\n                                >\n                                  {item?.article}: {item?.OrderItem?.bust}\n                                </p>\n                              )}\n                            </div>\n                          ))}\n                        </TableCell>\n\n                        <TableCell className={styles.tableCell}>\n                          {order?.Items?.map((item) => (\n                            <div\n                              style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                              }}\n                              key={item?.id}\n                            >\n                              {editingOrderData.id === order?.id &&\n                              editingOrderData.itemId === item?.id &&\n                              editingOrderData.field === 'waist' ? (\n                                <div className={styles.inputContainer}>\n                                  <input\n                                    style={{\n                                      width: '100px',\n                                      fontSize: 'medium',\n                                    }}\n                                    type=\"number\"\n                                    className=\"text-field\"\n                                    required\n                                    autoFocus\n                                    value={editingOrderData.value}\n                                    onChange={handleFieldChange}\n                                  />\n                                  <Button\n                                    className={styles.buttonInput}\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    onClick={handleFieldConfirmMeasurements}\n                                  >\n                                    Сохранить\n                                  </Button>\n                                </div>\n                              ) : (\n                                <p\n                                  style={{\n                                    borderBottom: '0.5px solid black',\n                                    marginBottom: '10px',\n                                    marginTop: '5px',\n                                  }}\n                                  onClick={() =>\n                                    handleFieldClickMeasurements(\n                                      order?.id,\n                                      item?.id,\n                                      'waist',\n                                      item?.OrderItem?.waist\n                                    )\n                                  }\n                                >\n                                  {item?.article}: {item?.OrderItem?.waist}\n                                </p>\n                              )}\n                            </div>\n                          ))}\n                        </TableCell>\n\n                        <TableCell className={styles.tableCell}>\n                          {order?.Items?.map((item) => (\n                            <div\n                              style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                              }}\n                              key={item?.id}\n                            >\n                              {editingOrderData.id === order?.id &&\n                              editingOrderData.itemId === item?.id &&\n                              editingOrderData.field === 'hips' ? (\n                                <div className={styles.inputContainer}>\n                                  <input\n                                    style={{\n                                      width: '100px',\n                                      fontSize: 'medium',\n                                    }}\n                                    type=\"number\"\n                                    className=\"text-field\"\n                                    required\n                                    autoFocus\n                                    value={editingOrderData.value}\n                                    onChange={handleFieldChange}\n                                  />\n                                  <Button\n                                    className={styles.buttonInput}\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    onClick={handleFieldConfirmMeasurements}\n                                  >\n                                    Сохранить\n                                  </Button>\n                                </div>\n                              ) : (\n                                <p\n                                  style={{\n                                    borderBottom: '0.5px solid black',\n                                    marginBottom: '10px',\n                                    marginTop: '5px',\n                                  }}\n                                  onClick={() =>\n                                    handleFieldClickMeasurements(\n                                      order?.id,\n                                      item?.id,\n                                      'hips',\n                                      item?.OrderItem?.hips\n                                    )\n                                  }\n                                >\n                                  {item?.article}: {item?.OrderItem?.hips}\n                                </p>\n                              )}\n                            </div>\n                          ))}\n                        </TableCell>\n\n                        <TableCell className={styles.tableCell}>\n                          {order?.Items?.map((item) => (\n                            <div\n                              style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                              }}\n                              key={item?.id}\n                            >\n                              {editingOrderData.id === order?.id &&\n                              editingOrderData.itemId === item?.id &&\n                              editingOrderData.field === 'saddle' ? (\n                                <div className={styles.inputContainer}>\n                                  <input\n                                    style={{\n                                      width: '100px',\n                                      fontSize: 'medium',\n                                    }}\n                                    type=\"text\"\n                                    className=\"text-field\"\n                                    required\n                                    autoFocus\n                                    value={editingOrderData.value}\n                                    onChange={handleFieldChange}\n                                  />\n                                  <Button\n                                    className={styles.buttonInput}\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    onClick={handleFieldConfirmMeasurements}\n                                  >\n                                    Сохранить\n                                  </Button>\n                                </div>\n                              ) : (\n                                <p\n                                  style={{\n                                    borderBottom: '0.5px solid black',\n                                    marginBottom: '10px',\n                                    marginTop: '5px',\n                                  }}\n                                  onClick={() =>\n                                    handleFieldClickMeasurements(\n                                      order?.id,\n                                      item?.id,\n                                      'saddle',\n                                      item?.OrderItem?.saddle\n                                    )\n                                  }\n                                >\n                                  {item?.article}: {item?.OrderItem?.saddle}\n                                </p>\n                              )}\n                            </div>\n                          ))}\n                        </TableCell>\n\n                        <TableCell className={styles.tableCell}>\n                          {order?.Items?.map((item) => (\n                            <div\n                              style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                              }}\n                              key={item?.id}\n                            >\n                              {editingOrderData.id === order?.id &&\n                              editingOrderData.itemId === item?.id &&\n                              editingOrderData.field === 'loops' ? (\n                                <div className={styles.checkBoxContainer}>\n                                  <Checkbox\n                                    className={styles.checkBox}\n                                    checked={\n                                      editingOrderData.value === undefined\n                                        ? item?.OrderItem?.loops\n                                        : editingOrderData.value\n                                    }\n                                    onChange={handleFieldChangeBoolean}\n                                  />\n                                  <Button\n                                    className={styles.buttonCheckBox}\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    onClick={handleFieldConfirmMeasurements}\n                                  >\n                                    Сохранить\n                                  </Button>\n                                </div>\n                              ) : (\n                                <p\n                                  style={{\n                                    borderBottom: '0.5px solid black',\n                                    marginBottom: '10px',\n                                    marginTop: '5px',\n                                  }}\n                                  onClick={() =>\n                                    handleFieldClickMeasurements(\n                                      order?.id,\n                                      item?.id,\n                                      'loops',\n                                      !item?.OrderItem?.loops\n                                    )\n                                  }\n                                >\n                                  {item?.article}:\n                                  <Checkbox\n                                    className={styles.checkBox}\n                                    checked={item?.OrderItem?.loops}\n                                    disabled\n                                  />\n                                </p>\n                              )}\n                            </div>\n                          ))}\n                        </TableCell>\n\n                        <TableCell className={styles.tableCell}>\n                          {order?.Items?.map((item) => (\n                            <div\n                              style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                              }}\n                              key={item?.id}\n                            >\n                              {editingOrderData.id === order?.id &&\n                              editingOrderData.itemId === item?.id &&\n                              editingOrderData.field === 'buttons' ? (\n                                <div className={styles.inputContainer}>\n                                  <input\n                                    type=\"text\"\n                                    style={{\n                                      width: '100px',\n                                      fontSize: 'medium',\n                                    }}\n                                    className=\"text-field\"\n                                    required\n                                    autoFocus\n                                    value={editingOrderData.value}\n                                    onChange={handleFieldChange}\n                                  />\n                                  <Button\n                                    className={styles.buttonInput}\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    onClick={handleFieldConfirmMeasurements}\n                                  >\n                                    Сохранить\n                                  </Button>\n                                </div>\n                              ) : (\n                                <p\n                                  style={{\n                                    borderBottom: '0.5px solid black',\n                                    marginBottom: '10px',\n                                    marginTop: '5px',\n                                  }}\n                                  onClick={() =>\n                                    handleFieldClickMeasurements(\n                                      order?.id,\n                                      item?.id,\n                                      'buttons',\n                                      item?.OrderItem?.buttons\n                                    )\n                                  }\n                                >\n                                  {item?.article}: {item?.OrderItem?.buttons}\n                                </p>\n                              )}\n                            </div>\n                          ))}\n                        </TableCell>\n\n                        <TableCell className={styles.tableCell}>\n                          {order?.Items?.map((item) => (\n                            <div\n                              style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                              }}\n                              key={item?.id}\n                            >\n                              {editingOrderData.id === order?.id &&\n                              editingOrderData.itemId === item?.id &&\n                              editingOrderData.field === 'lining' ? (\n                                <div className={styles.inputContainer}>\n                                  <input\n                                    type=\"text\"\n                                    style={{\n                                      width: '100px',\n                                      fontSize: 'medium',\n                                    }}\n                                    className=\"text-field\"\n                                    required\n                                    autoFocus\n                                    value={editingOrderData.value}\n                                    onChange={handleFieldChange}\n                                  />\n                                  <Button\n                                    className={styles.buttonInput}\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    onClick={handleFieldConfirmMeasurements}\n                                  >\n                                    Сохранить\n                                  </Button>\n                                </div>\n                              ) : (\n                                <p\n                                  style={{\n                                    borderBottom: '0.5px solid black',\n                                    marginBottom: '10px',\n                                    marginTop: '5px',\n                                  }}\n                                  onClick={() =>\n                                    handleFieldClickMeasurements(\n                                      order?.id,\n                                      item?.id,\n                                      'lining',\n                                      item?.OrderItem?.lining\n                                    )\n                                  }\n                                >\n                                  {item?.article}: {item?.OrderItem?.lining}\n                                </p>\n                              )}\n                            </div>\n                          ))}\n                        </TableCell>\n\n                        <TableCell className={styles.tableCell}>\n                          {order?.Items?.map((item) => (\n                            <div\n                              style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                                borderBottom: '0.5px solid black',\n                                marginBottom: '10px',\n                                marginTop: '5px',\n                              }}\n                              key={item?.article}\n                            >\n                              {item?.name}, арт:{item?.article}\n                              {item?.in_stock && (\n                                <span\n                                  style={{\n                                    backgroundColor: 'red',\n                                    width: '60%',\n                                    color: 'white',\n                                    padding: '1px',\n                                    borderRadius: '5px',\n                                  }}\n                                >\n                                  В НАЛИЧИИ\n                                </span>\n                              )}\n                            </div>\n                          ))}\n                        </TableCell>\n\n                        <TableCell className={styles.tableCell}>\n                          {order?.Items?.map((item) => (\n                            <div\n                              style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                              }}\n                              key={item?.id}\n                            >\n                              {editingOrderData.id === order?.id &&\n                              editingOrderData.itemId === item?.id &&\n                              editingOrderData.field === 'selected_material' ? (\n                                <div className={styles.inputContainer}>\n                                  <input\n                                    type=\"text\"\n                                    style={{\n                                      width: '100px',\n                                      fontSize: 'medium',\n                                    }}\n                                    className=\"text-field\"\n                                    required\n                                    autoFocus\n                                    value={editingOrderData.value}\n                                    onChange={handleFieldChange}\n                                  />\n                                  <Button\n                                    className={styles.buttonInput}\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    onClick={handleFieldConfirmMeasurements}\n                                  >\n                                    Сохранить\n                                  </Button>\n                                </div>\n                              ) : (\n                                <p\n                                  style={{\n                                    borderBottom: '0.5px solid black',\n                                    marginBottom: '10px',\n                                    marginTop: '5px',\n                                  }}\n                                  onClick={() =>\n                                    handleFieldClickMeasurements(\n                                      order?.id,\n                                      item?.id,\n                                      'selected_material',\n                                      item?.OrderItem?.selected_material\n                                    )\n                                  }\n                                >\n                                  {item?.article}:{' '}\n                                  {item?.OrderItem?.selected_material}\n                                </p>\n                              )}\n                            </div>\n                          ))}\n                        </TableCell>\n\n                        <TableCell\n                          className={styles.tableCell}\n                          onClick={() =>\n                            handleFieldClick(\n                              order?.id,\n                              'admin_comments',\n                              order?.admin_comments\n                            )\n                          }\n                        >\n                          {editingOrderData.id === order?.id &&\n                          editingOrderData.field === 'admin_comments' ? (\n                            <div className={styles.inputContainer}>\n                              <TextField\n                                sx={{\n                                  height: '80px',\n                                  fontSize: '14px',\n                                  paddingTop: '4px',\n                                  paddingBottom: '4px',\n                                }}\n                                type=\"text\"\n                                className=\"text-field\"\n                                fullWidth\n                                required\n                                multiline\n                                rows={4}\n                                value={editingOrderData.value}\n                                onChange={handleFieldChange}\n                                InputProps={{\n                                  sx: {\n                                    fontSize: '14px',\n                                    paddingTop: '2px',\n                                    paddingBottom: '2px',\n                                  },\n                                }}\n                              />\n                              <Button\n                                className={styles.buttonInput}\n                                type=\"submit\"\n                                variant=\"contained\"\n                                onClick={handleFieldConfirm}\n                              >\n                                Сохранить\n                              </Button>\n                            </div>\n                          ) : (\n                            <span>{order?.admin_comments}</span>\n                          )}\n                        </TableCell>\n                        <TableCell\n                          className={styles.tableCell}\n                          onClick={() =>\n                            handleFieldClick(order?.id, 'status', order?.status)\n                          }\n                        >\n                          {editingOrderData.id === order?.id &&\n                          editingOrderData.field === 'status' ? (\n                            <div className={styles.inputContainer}>\n                              <select\n                                onChange={handleFieldChange}\n                                className={styles.select}\n                                name=\"status\"\n                              >\n                                <option value=\"Заказ создан\">\n                                  {'Заказ создан'}\n                                </option>\n                                <option value=\"Уточнение мерок, отправка реквизитов для внесения предоплаты\">\n                                  {\n                                    'Уточнение мерок, отправка реквизитов для внесения предоплаты'\n                                  }\n                                </option>\n                                <option value=\"Ожидание предоплаты\">\n                                  {'Ожидание предоплаты'}\n                                </option>\n                                <option value=\"Предоплата получена\">\n                                  {'Предоплата получена'}\n                                </option>\n                                <option value=\"Задание сформировано\">\n                                  {'Задание сформировано'}\n                                </option>\n                                <option value=\"Задание передано на производство\">\n                                  {'Задание передано на производство'}\n                                </option>\n                                <option value=\"Обратная связь по заданию от производства\">\n                                  {'Обратная связь по заданию от производства'}\n                                </option>\n                                <option value=\"Изделия в производстве\">\n                                  {'Изделия в производстве'}\n                                </option>\n                                <option value=\"Изделие отшито\">\n                                  {'Изделие отшито'}\n                                </option>\n                                <option value=\"Забрали заказ с производства\">\n                                  {'Забрали заказ с производства'}\n                                </option>\n                                <option value=\"Оповещение клиента, отправка реквизитов для внесения полной оплаты\">\n                                  {\n                                    'Оповещение клиента, отправка реквизитов для внесения полной оплаты'\n                                  }\n                                </option>\n                                <option value=\"Получена полная оплата\">\n                                  {'Получена полная оплата'}\n                                </option>\n                                <option value=\"Заказ отправлен\">\n                                  {'Заказ отправлен'}\n                                </option>\n                                <option value=\"Возврат заказа\">\n                                  {'Возврат заказа'}\n                                </option>\n                                <option value=\"Перешив заказа\">\n                                  {'Перешив заказа'}\n                                </option>\n                              </select>\n                              <Button\n                                className={styles.buttonInput}\n                                type=\"submit\"\n                                variant=\"contained\"\n                                onClick={handleFieldConfirm}\n                              >\n                                Сохранить\n                              </Button>\n                            </div>\n                          ) : (\n                            <span>{order?.status}</span>\n                          )}\n                        </TableCell>\n                        <TableCell className={styles.tableCell}>\n                          {order?.Items?.map((item) => (\n                            <Button\n                              key={item.id}\n                              className={styles.button}\n                              type=\"submit\"\n                              variant=\"contained\"\n                              onClick={() => handleFormTask(item)}\n                            >\n                              Сформировать\n                            </Button>\n                          ))}\n                        </TableCell>\n                      </TableRow>\n                    )\n                  )}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            <TasksForm\n              openModal={openModal}\n              itemInfo={itemInfo}\n              taskInfo={taskInfo}\n              setOpenModal={setOpenModal}\n            />\n          </div>\n        </>\n      )}\n    </>\n  );\n}","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/admin/promo.tsx",["838"],[],"import PromocodeComp from '@/components/Admin/PromocodeComp/PromocodeComp';\nimport NavAdminComp from '@/components/navAdminComp/NavAdminComp';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '@/app/store';\nimport { useRouter } from 'next/router';\nimport { useEffect } from 'react';\n\nexport default function Promo() {\n  const isAdmin = useSelector((state: RootState) => state.sessionSlice.isAdmin);\n\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!isAdmin) {\n      router.push('/signin');\n    }\n  }, [isAdmin]);\n\n  return (\n    <>\n      {isAdmin && (\n        <>\n          <NavAdminComp />\n          <PromocodeComp />\n        </>\n      )}\n    </>\n  );\n}\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/admin/tasks.tsx",["839"],[],"import { useState, useEffect } from 'react';\nimport { format, parseISO } from 'date-fns';\nimport { ru } from 'date-fns/locale';\nimport {\n  allOrderDataFetch,\n  updateOrderFieldFetch,\n  updateOrderItemFieldFetch,\n} from '../../components/Admin/HTTP/adminApi';\nimport styles from '../../styles/admin/OrdersAdmin.module.css';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Button,\n  TextField,\n  Checkbox,\n} from '@mui/material';\nimport InfoModal from '../../components/Admin/InfoModal';\nimport NavAdminComp from '@/components/navAdminComp/NavAdminComp';\nimport { IOrderAdmin } from '@/components/Admin/order/types';\nimport InfoContainer from '@/components/Admin/infoContainer/InfoContainer';\nimport {\n  IItemData,\n  ITaskInfo,\n} from '@/components/Admin/TasksForm/taskformTypes';\nimport TasksForm from '@/components/Admin/TasksForm/TasksForm';\nimport Head from 'next/head';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '@/app/store';\nimport { useRouter } from 'next/router';\n\n// TODO типизация, много, не комменчу каждую ошибку\n\nexport default function Tasks() {\n  const [orders, setOrders] = useState([]);\n  const [message, setMessage] = useState('');\n  const [statusVal, setStatus] = useState({\n    status: 'Заказ принят',\n  });\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    allOrderDataFetch(setOrders);\n  }, []);\n\n  //! --------------------Защита страницы-------------------------------------\n  const isAdmin = useSelector((state: RootState) => state.sessionSlice.isAdmin);\n\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!isAdmin) {\n      router.push('/signin');\n    }\n  }, [isAdmin]);\n\n  //! --------------------Логика фильтрации-------------------------------------\n\n  const filteredOrders = orders?.filter(\n    (order) => order?.status !== 'Заказ отправлен'\n  );\n  const sortedOrders = filteredOrders?.sort((a, b) => {\n    if (a.urgent && !b.urgent) return -1;\n    if (!a.urgent && b.urgent) return 1;\n    return a.getReadyAt.localeCompare(b.getReadyAt);\n  });\n\n  //! ---------------------------ЛОГИКА ИЗМЕНЕНИЯ ПОЛЕЙ ЗАКАЗА-------------------------------------\n\n  const [editingOrderData, setEditingOrderData] = useState({\n    id: null,\n    field: '',\n    value: '',\n  });\n\n  const handleFieldClick = (orderId, currentField, currentFieldValue) => {\n    setEditingOrderData({\n      id: orderId,\n      field: currentField,\n      value: currentFieldValue.toString(),\n    });\n  };\n\n  const handleFieldChange = (event) => {\n    setEditingOrderData((prev) => ({\n      ...prev,\n      value: event.target.value,\n    }));\n  };\n\n  const handleFieldChangeBoolean = (event) => {\n    setEditingOrderData((prev) => ({\n      ...prev,\n      value: event.target.checked,\n    }));\n  };\n\n  const handleFieldConfirm = async () => {\n    const { id, field, value } = editingOrderData;\n    const updatedOrder = await updateOrderFieldFetch(id, field, value);\n    if (updatedOrder) {\n      const newOrders = orders.map((order) =>\n        order.id === id ? updatedOrder : order\n      );\n      setOrders(newOrders);\n    }\n    setEditingOrderData({\n      id: null,\n      field: '',\n      value: '',\n    });\n  };\n\n  //! --------------------Логика изменения полей с мерками--------------------------\n\n  const handleFieldClickMeasurements = (\n    orderId,\n    itemId,\n    currentField,\n    currentFieldValue\n  ) => {\n    setEditingOrderData({\n      id: orderId,\n      itemId: itemId,\n      field: currentField,\n      value: currentFieldValue?.toString(),\n    });\n  };\n\n  const handleFieldConfirmMeasurements = async () => {\n    const { id, itemId, field, value } = editingOrderData;\n\n    const updatedOrder = await updateOrderItemFieldFetch(\n      id,\n      itemId,\n      field,\n      value\n    );\n    if (updatedOrder) {\n      const newOrders = orders.map((order) =>\n        order.id === id ? updatedOrder : order\n      );\n      setOrders(newOrders);\n    }\n    setEditingOrderData({\n      id: null,\n      itemId: null,\n      field: '',\n      value: '',\n    });\n  };\n\n  const [openModal, setOpenModal] = useState<boolean>(false);\n  const [itemInfo, setItemInfo] = useState<IItemData>({\n    id: 0,\n    name: '',\n    article: '',\n    description: '',\n    model_params: '',\n    characteristics: '',\n    price: 0,\n    new_price: 0,\n    in_stock: false,\n    bestseller: false,\n    collection_id: 0,\n    material_id: 0,\n    category_id: 0,\n    createdAt: '',\n    updatedAt: '',\n    OrderItem: {\n      order_id: 0,\n      item_id: 0,\n      height: '',\n      length: '',\n      sleeve: '',\n      bust: '',\n      waist: '',\n      hips: '',\n      saddle: '',\n      loops: false,\n      buttons: '',\n      lining: '',\n      createdAt: '',\n      updatedAt: '',\n    },\n    Material: {\n      id: 0,\n      name: '',\n      photo: '',\n      category_id: 0,\n      createdAt: '',\n      updatedAt: '',\n    },\n  });\n  const [taskInfo, setTaskInfo] = useState<ITaskInfo>({\n    id: 0,\n    createdAt: '',\n    updatedAt: '',\n  });\n\n  const handleFormTask = async (item: IItemData) => {\n    const response = await fetch(`${process.env.NEXT_PUBLIC_URL}admin/tasks/`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      credentials: 'include',\n      body: JSON.stringify(item),\n    });\n    const res = await response.json();\n    setTaskInfo(res.newTask);\n    setItemInfo(item);\n    setOpenModal(true);\n  };\n\n  return (\n    <>\n      {isAdmin && (\n        <>\n          <Head>\n            <meta name=\"robots\" content=\"noindex,nofollow\" />\n          </Head>\n          <NavAdminComp />\n          <InfoContainer />\n          <div className={styles.mainDiv}>\n            <TableContainer className={styles.tableContainer} component={Paper}>\n              <Table className={styles.table} aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow className={styles.tableRow}>\n                    <TableCell\n                      sx={{ padding: '0px' }}\n                      className={styles.tableCell}\n                    >\n                      №\n                    </TableCell>\n                    <TableCell\n                      sx={{ padding: '0px' }}\n                      className={styles.tableCell}\n                    >\n                      Срочность\n                    </TableCell>\n                    <TableCell className={styles.tableMiddleCell}>\n                      Дата оформления*\n                    </TableCell>\n                    <TableCell className={styles.tableMiddleCell}>\n                      Дата готовности\n                    </TableCell>\n                    <TableCell className={styles.tableMiddleCell}>\n                      ФИО*\n                    </TableCell>\n                    <TableCell className={styles.tableCell}>\n                      Telegram/Insta*\n                    </TableCell>\n                    <TableCell className={styles.tableCell}>Email*</TableCell>\n                    <TableCell className={styles.tableCell}>Телефон*</TableCell>\n                    <TableCell className={styles.tableCell}>\n                      Тип оплаты\n                    </TableCell>\n                    <TableCell className={styles.tableCell}>\n                      Стоимость\n                    </TableCell>\n                    <TableCell className={styles.tableCell}>\n                      Предоплата\n                    </TableCell>\n                    <TableCell className={styles.tableCell}>Остаток*</TableCell>\n                    <TableCell className={styles.tableMiddleCell}>\n                      Адрес\n                    </TableCell>\n                    <TableCell className={styles.tableCellBig}>\n                      Комментарии\n                    </TableCell>\n\n                    <TableCell className={styles.tableCellMini}>Рост</TableCell>\n                    <TableCell className={styles.tableCellMini}>\n                      Длина\n                    </TableCell>\n                    <TableCell className={styles.tableCellMini}>\n                      Рукав\n                    </TableCell>\n                    <TableCell className={styles.tableCellMini}>\n                      Об.груди\n                    </TableCell>\n                    <TableCell className={styles.tableCellMini}>\n                      Талия\n                    </TableCell>\n                    <TableCell className={styles.tableCellMini}>\n                      Бёдра\n                    </TableCell>\n                    <TableCell className={styles.tableCellMini}>\n                      Седло\n                    </TableCell>\n                    <TableCell className={styles.tableCellMini}>\n                      Петли\n                    </TableCell>\n                    <TableCell className={styles.tableCellMini}>\n                      Кнопки/Пуговицы\n                    </TableCell>\n                    <TableCell className={styles.tableCellMini}>\n                      Подкладка\n                    </TableCell>\n\n                    <TableCell className={styles.tableMiddleCell}>\n                      Товары*\n                    </TableCell>\n                    <TableCell className={styles.tableMiddleCell}>\n                      Материалы*\n                    </TableCell>\n                    <TableCell className={styles.tableCellBig}>\n                      Комментарии менеджера\n                    </TableCell>\n                    <TableCell className={styles.tableMiddleCell}>\n                      Статус\n                    </TableCell>\n                    <TableCell className={styles.tableCell}>Задание</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {sortedOrders?.map((order: IOrderAdmin) => (\n                    <TableRow\n                      key={order.id}\n                      sx={{\n                        backgroundColor:\n                          order?.status === 'Заказ создан' ||\n                          order?.status ===\n                            'Уточнение мерок, отправка реквизитов для внесения предоплаты' ||\n                          order?.status === 'Ожидание предоплаты' ||\n                          order?.status === 'Предоплата получена'\n                            ? 'rgba(147, 215, 255, 0.392)'\n                            : order?.status === 'Задание сформировано' ||\n                              order?.status ===\n                                'Задание передано на производство' ||\n                              order?.status ===\n                                'Обратная связь по заданию от производства' ||\n                              order?.status === 'Изделия в производстве'\n                            ? 'rgba(237, 255, 186, 0.39)'\n                            : order?.status === 'Изделие отшито' ||\n                              order?.status === 'Забрали заказ с производства'\n                            ? 'rgba(222, 142, 230, 0.49)'\n                            : order?.status ===\n                                'Оповещение клиента, отправка реквизитов для внесения полной оплаты' ||\n                              order?.status === 'Получена полная оплата'\n                            ? 'rgba(158, 255, 158, 0.39)'\n                            : order?.status === 'Заказ отправлен'\n                            ? 'rgba(133, 317, 130, 0.69)'\n                            : order?.status === 'Возврат заказа' ||\n                              order?.status === 'Перешив заказа'\n                            ? 'rgba(220, 61, 61, 0.79)'\n                            : 'inherit',\n                      }}\n                    >\n                      <TableCell className={styles.tableCell}>\n                        {order?.id}\n                      </TableCell>\n\n                      <TableCell\n                        sx={{\n                          backgroundColor: order?.urgent ? 'red' : 'inherit',\n                        }}\n                        className={styles.tableCell}\n                        onClick={() =>\n                          handleFieldClick(order?.id, 'urgent', !order?.urgent)\n                        }\n                      >\n                        {editingOrderData.id === order?.id &&\n                        editingOrderData.field === 'urgent' ? (\n                          <div className={styles.checkBoxContainer}>\n                            <Checkbox\n                              className={styles.checkBox}\n                              checked={\n                                editingOrderData.value === 'urgent'\n                                  ? order?.urgent\n                                  : editingOrderData.value\n                              }\n                              onChange={handleFieldChangeBoolean}\n                              inputProps={{ 'aria-label': 'primary checkbox' }}\n                            />\n                            <Button\n                              className={styles.buttonInput}\n                              type=\"submit\"\n                              variant=\"contained\"\n                              onClick={handleFieldConfirm}\n                            >\n                              Изменить\n                            </Button>\n                          </div>\n                        ) : (\n                          <div>{order?.urgent ? 'Срочно' : 'Не срочно'}</div>\n                        )}\n                      </TableCell>\n\n                      <TableCell className={styles.tableCell}>\n                        <span>\n                          {format(\n                            parseISO(order?.createdAt),\n                            \"dd MMMM yyyy'г'\",\n                            {\n                              locale: ru,\n                            }\n                          )}\n                        </span>\n                      </TableCell>\n                      <TableCell\n                        className={styles.tableCell}\n                        onClick={() =>\n                          handleFieldClick(\n                            order?.id,\n                            'getReadyAt',\n                            order?.getReadyAt\n                          )\n                        }\n                      >\n                        {editingOrderData.id === order?.id &&\n                        editingOrderData.field === 'getReadyAt' ? (\n                          <div className={styles.inputContainer}>\n                            <TextField\n                              type=\"date\"\n                              className={styles.dateInput}\n                              fullWidth\n                              required\n                              value={editingOrderData.value}\n                              onChange={handleFieldChange}\n                            />\n                            <Button\n                              className={styles.buttonInput}\n                              type=\"submit\"\n                              variant=\"contained\"\n                              onClick={handleFieldConfirm}\n                            >\n                              Сохранить\n                            </Button>\n                          </div>\n                        ) : order?.getReadyAt ? (\n                          <span>\n                            {format(\n                              parseISO(order?.getReadyAt),\n                              \"dd MMMM yyyy'г'\",\n                              {\n                                locale: ru,\n                              }\n                            )}\n                          </span>\n                        ) : (\n                          <span></span>\n                        )}\n                      </TableCell>\n\n                      <TableCell className={styles.tableCell}>\n                        {order?.User?.full_name}\n                      </TableCell>\n                      <TableCell className={styles.tableCell}>\n                        {order?.User?.telegram_instagram}\n                      </TableCell>\n                      <TableCell className={styles.tableCell}>\n                        {order.User?.email}\n                      </TableCell>\n                      <TableCell className={styles.tableCell}>\n                        {order.User?.phone}\n                      </TableCell>\n                      <TableCell\n                        className={styles.tableCell}\n                        onClick={() =>\n                          handleFieldClick(\n                            order?.id,\n                            'payment_type',\n                            order?.payment_type\n                          )\n                        }\n                      >\n                        {editingOrderData.id === order?.id &&\n                        editingOrderData.field === 'payment_type' ? (\n                          <div className={styles.inputContainer}>\n                            <input\n                              style={{ width: '100px' }}\n                              onChange={handleFieldChange}\n                              className={styles.inputText}\n                              type=\"text\"\n                              fullWidth\n                              required\n                              value={editingOrderData.value}\n                            />\n                            <Button\n                              className={styles.buttonInput}\n                              type=\"submit\"\n                              variant=\"contained\"\n                              onClick={handleFieldConfirm}\n                            >\n                              Сохранить\n                            </Button>\n                          </div>\n                        ) : (\n                          <span>{order?.payment_type}</span>\n                        )}\n                      </TableCell>\n                      <TableCell\n                        className={styles.tableCell}\n                        onClick={() =>\n                          handleFieldClick(order?.id, 'total', order?.total)\n                        }\n                      >\n                        {editingOrderData.id === order?.id &&\n                        editingOrderData.field === 'total' ? (\n                          <div className={styles.inputContainer}>\n                            <input\n                              style={{ width: '100px', fontSize: 'medium' }}\n                              onChange={handleFieldChange}\n                              className={styles.inputText}\n                              type=\"number\"\n                              required\n                              value={editingOrderData.value}\n                            />\n                            <Button\n                              className={styles.buttonInput}\n                              type=\"submit\"\n                              variant=\"contained\"\n                              onClick={handleFieldConfirm}\n                            >\n                              Сохранить\n                            </Button>\n                          </div>\n                        ) : (\n                          <span>{order?.total}</span>\n                        )}\n                      </TableCell>\n                      <TableCell\n                        className={styles.tableCell}\n                        onClick={() =>\n                          handleFieldClick(\n                            order?.id,\n                            'prepayment',\n                            order?.prepayment\n                          )\n                        }\n                      >\n                        {editingOrderData.id === order?.id &&\n                        editingOrderData.field === 'prepayment' ? (\n                          <div className={styles.inputContainer}>\n                            <input\n                              style={{ width: '100px', fontSize: 'medium' }}\n                              onChange={handleFieldChange}\n                              className={styles.inputText}\n                              type=\"number\"\n                              required\n                              value={editingOrderData.value}\n                            />\n                            <Button\n                              className={styles.buttonInput}\n                              type=\"submit\"\n                              variant=\"contained\"\n                              onClick={handleFieldConfirm}\n                            >\n                              Сохранить\n                            </Button>\n                          </div>\n                        ) : (\n                          <span>{order?.prepayment}</span>\n                        )}\n                      </TableCell>\n                      <TableCell className={styles.tableCell}>\n                        {order?.residual_amount?.toLocaleString()}\n                      </TableCell>\n                      <TableCell\n                        className={styles.tableCell}\n                        onClick={() =>\n                          handleFieldClick(order?.id, 'address', order?.address)\n                        }\n                      >\n                        {editingOrderData.id === order?.id &&\n                        editingOrderData.field === 'address' ? (\n                          <div className={styles.inputContainer}>\n                            <input\n                              onChange={handleFieldChange}\n                              className={styles.inputText}\n                              type=\"text\"\n                              name=\"address\"\n                              placeholder=\"Введите адрес...\"\n                              value={editingOrderData.value}\n                            />\n                            <Button\n                              className={styles.buttonInput}\n                              type=\"submit\"\n                              variant=\"contained\"\n                              onClick={handleFieldConfirm}\n                            >\n                              Сохранить\n                            </Button>\n                          </div>\n                        ) : (\n                          <span>{order?.address}</span>\n                        )}\n                      </TableCell>\n                      <TableCell\n                        className={styles.tableCell}\n                        onClick={() =>\n                          handleFieldClick(\n                            order?.id,\n                            'comments',\n                            order?.comments\n                          )\n                        }\n                      >\n                        {editingOrderData.id === order?.id &&\n                        editingOrderData.field === 'comments' ? (\n                          <div className={styles.inputContainer}>\n                            <TextField\n                              sx={{\n                                height: '80px',\n                                fontSize: '14px',\n                                paddingTop: '4px',\n                                paddingBottom: '4px',\n                              }}\n                              type=\"text\"\n                              className=\"text-field\"\n                              fullWidth\n                              required\n                              multiline\n                              rows={4}\n                              value={editingOrderData.value}\n                              onChange={handleFieldChange}\n                              InputProps={{\n                                sx: {\n                                  fontSize: '14px',\n                                  paddingTop: '2px',\n                                  paddingBottom: '2px',\n                                },\n                              }}\n                            />\n                            <Button\n                              className={styles.buttonInput}\n                              type=\"submit\"\n                              variant=\"contained\"\n                              onClick={handleFieldConfirm}\n                            >\n                              Сохранить\n                            </Button>\n                          </div>\n                        ) : (\n                          <span>{order?.comments}</span>\n                        )}\n                      </TableCell>\n\n                      <TableCell className={styles.tableCell}>\n                        {order?.Items?.map((item) => (\n                          <div\n                            style={{\n                              display: 'flex',\n                              flexDirection: 'column',\n                            }}\n                            key={item?.article}\n                          >\n                            {editingOrderData.id === order?.id &&\n                            editingOrderData.itemId === item?.id &&\n                            editingOrderData.field === 'height' ? (\n                              <div className={styles.inputContainer}>\n                                <input\n                                  style={{ width: '100px', fontSize: 'medium' }}\n                                  type=\"number\"\n                                  className=\"text-field\"\n                                  required\n                                  autoFocus\n                                  value={editingOrderData.value}\n                                  onChange={handleFieldChange}\n                                />\n                                <Button\n                                  className={styles.buttonInput}\n                                  type=\"submit\"\n                                  variant=\"contained\"\n                                  onClick={handleFieldConfirmMeasurements}\n                                >\n                                  Сохранить\n                                </Button>\n                              </div>\n                            ) : (\n                              <p\n                                style={{\n                                  borderBottom: '0.5px solid black',\n                                  marginBottom: '10px',\n                                  marginTop: '5px',\n                                }}\n                                onClick={() =>\n                                  handleFieldClickMeasurements(\n                                    order?.id,\n                                    item?.id,\n                                    'height',\n                                    item?.OrderItem?.height\n                                  )\n                                }\n                              >\n                                {item?.article}: {item?.OrderItem?.height}\n                              </p>\n                            )}\n                          </div>\n                        ))}\n                      </TableCell>\n\n                      <TableCell className={styles.tableCell}>\n                        {order?.Items?.map((item) => (\n                          <div\n                            style={{\n                              display: 'flex',\n                              flexDirection: 'column',\n                            }}\n                            key={item?.id}\n                          >\n                            {editingOrderData.id === order?.id &&\n                            editingOrderData.itemId === item?.id &&\n                            editingOrderData.field === 'length' ? (\n                              <div className={styles.inputContainer}>\n                                <input\n                                  style={{ width: '100px', fontSize: 'medium' }}\n                                  type=\"number\"\n                                  className=\"text-field\"\n                                  required\n                                  autoFocus\n                                  value={editingOrderData.value}\n                                  onChange={handleFieldChange}\n                                />\n                                <Button\n                                  className={styles.buttonInput}\n                                  type=\"submit\"\n                                  variant=\"contained\"\n                                  onClick={handleFieldConfirmMeasurements}\n                                >\n                                  Сохранить\n                                </Button>\n                              </div>\n                            ) : (\n                              <p\n                                style={{\n                                  borderBottom: '0.5px solid black',\n                                  marginBottom: '10px',\n                                  marginTop: '5px',\n                                }}\n                                onClick={() =>\n                                  handleFieldClickMeasurements(\n                                    order?.id,\n                                    item?.id,\n                                    'length',\n                                    item?.OrderItem?.length\n                                  )\n                                }\n                              >\n                                {item?.article}: {item?.OrderItem?.length}\n                              </p>\n                            )}\n                          </div>\n                        ))}\n                      </TableCell>\n\n                      <TableCell className={styles.tableCell}>\n                        {order?.Items?.map((item) => (\n                          <div\n                            style={{\n                              display: 'flex',\n                              flexDirection: 'column',\n                            }}\n                            key={item?.id}\n                          >\n                            {editingOrderData.id === order?.id &&\n                            editingOrderData.itemId === item?.id &&\n                            editingOrderData.field === 'sleeve' ? (\n                              <div className={styles.inputContainer}>\n                                <input\n                                  style={{ width: '100px', fontSize: 'medium' }}\n                                  type=\"number\"\n                                  className=\"text-field\"\n                                  required\n                                  autoFocus\n                                  value={editingOrderData.value}\n                                  onChange={handleFieldChange}\n                                />\n                                <Button\n                                  className={styles.buttonInput}\n                                  type=\"submit\"\n                                  variant=\"contained\"\n                                  onClick={handleFieldConfirmMeasurements}\n                                >\n                                  Сохранить\n                                </Button>\n                              </div>\n                            ) : (\n                              <p\n                                style={{\n                                  borderBottom: '0.5px solid black',\n                                  marginBottom: '10px',\n                                  marginTop: '5px',\n                                }}\n                                onClick={() =>\n                                  handleFieldClickMeasurements(\n                                    order?.id,\n                                    item?.id,\n                                    'sleeve',\n                                    item?.OrderItem?.sleeve\n                                  )\n                                }\n                              >\n                                {item?.article}: {item?.OrderItem?.sleeve}\n                              </p>\n                            )}\n                          </div>\n                        ))}\n                      </TableCell>\n\n                      <TableCell className={styles.tableCell}>\n                        {order?.Items?.map((item) => (\n                          <div\n                            style={{\n                              display: 'flex',\n                              flexDirection: 'column',\n                            }}\n                            key={item?.id}\n                          >\n                            {editingOrderData.id === order?.id &&\n                            editingOrderData.itemId === item?.id &&\n                            editingOrderData.field === 'bust' ? (\n                              <div className={styles.inputContainer}>\n                                <input\n                                  style={{ width: '100px', fontSize: 'medium' }}\n                                  type=\"number\"\n                                  className=\"text-field\"\n                                  required\n                                  autoFocus\n                                  value={editingOrderData.value}\n                                  onChange={handleFieldChange}\n                                />\n                                <Button\n                                  className={styles.buttonInput}\n                                  type=\"submit\"\n                                  variant=\"contained\"\n                                  onClick={handleFieldConfirmMeasurements}\n                                >\n                                  Сохранить\n                                </Button>\n                              </div>\n                            ) : (\n                              <p\n                                style={{\n                                  borderBottom: '0.5px solid black',\n                                  marginBottom: '10px',\n                                  marginTop: '5px',\n                                }}\n                                onClick={() =>\n                                  handleFieldClickMeasurements(\n                                    order?.id,\n                                    item?.id,\n                                    'bust',\n                                    item?.OrderItem?.bust\n                                  )\n                                }\n                              >\n                                {item?.article}: {item?.OrderItem?.bust}\n                              </p>\n                            )}\n                          </div>\n                        ))}\n                      </TableCell>\n\n                      <TableCell className={styles.tableCell}>\n                        {order?.Items?.map((item) => (\n                          <div\n                            style={{\n                              display: 'flex',\n                              flexDirection: 'column',\n                            }}\n                            key={item?.id}\n                          >\n                            {editingOrderData.id === order?.id &&\n                            editingOrderData.itemId === item?.id &&\n                            editingOrderData.field === 'waist' ? (\n                              <div className={styles.inputContainer}>\n                                <input\n                                  style={{ width: '100px', fontSize: 'medium' }}\n                                  type=\"number\"\n                                  className=\"text-field\"\n                                  required\n                                  autoFocus\n                                  value={editingOrderData.value}\n                                  onChange={handleFieldChange}\n                                />\n                                <Button\n                                  className={styles.buttonInput}\n                                  type=\"submit\"\n                                  variant=\"contained\"\n                                  onClick={handleFieldConfirmMeasurements}\n                                >\n                                  Сохранить\n                                </Button>\n                              </div>\n                            ) : (\n                              <p\n                                style={{\n                                  borderBottom: '0.5px solid black',\n                                  marginBottom: '10px',\n                                  marginTop: '5px',\n                                }}\n                                onClick={() =>\n                                  handleFieldClickMeasurements(\n                                    order?.id,\n                                    item?.id,\n                                    'waist',\n                                    item?.OrderItem?.waist\n                                  )\n                                }\n                              >\n                                {item?.article}: {item?.OrderItem?.waist}\n                              </p>\n                            )}\n                          </div>\n                        ))}\n                      </TableCell>\n\n                      <TableCell className={styles.tableCell}>\n                        {order?.Items?.map((item) => (\n                          <div\n                            style={{\n                              display: 'flex',\n                              flexDirection: 'column',\n                            }}\n                            key={item?.id}\n                          >\n                            {editingOrderData.id === order?.id &&\n                            editingOrderData.itemId === item?.id &&\n                            editingOrderData.field === 'hips' ? (\n                              <div className={styles.inputContainer}>\n                                <input\n                                  style={{ width: '100px', fontSize: 'medium' }}\n                                  type=\"number\"\n                                  className=\"text-field\"\n                                  required\n                                  autoFocus\n                                  value={editingOrderData.value}\n                                  onChange={handleFieldChange}\n                                />\n                                <Button\n                                  className={styles.buttonInput}\n                                  type=\"submit\"\n                                  variant=\"contained\"\n                                  onClick={handleFieldConfirmMeasurements}\n                                >\n                                  Сохранить\n                                </Button>\n                              </div>\n                            ) : (\n                              <p\n                                style={{\n                                  borderBottom: '0.5px solid black',\n                                  marginBottom: '10px',\n                                  marginTop: '5px',\n                                }}\n                                onClick={() =>\n                                  handleFieldClickMeasurements(\n                                    order?.id,\n                                    item?.id,\n                                    'hips',\n                                    item?.OrderItem?.hips\n                                  )\n                                }\n                              >\n                                {item?.article}: {item?.OrderItem?.hips}\n                              </p>\n                            )}\n                          </div>\n                        ))}\n                      </TableCell>\n\n                      <TableCell className={styles.tableCell}>\n                        {order?.Items?.map((item) => (\n                          <div\n                            style={{\n                              display: 'flex',\n                              flexDirection: 'column',\n                            }}\n                            key={item?.id}\n                          >\n                            {editingOrderData.id === order?.id &&\n                            editingOrderData.itemId === item?.id &&\n                            editingOrderData.field === 'saddle' ? (\n                              <div className={styles.inputContainer}>\n                                <input\n                                  style={{ width: '100px', fontSize: 'medium' }}\n                                  type=\"number\"\n                                  className=\"text-field\"\n                                  required\n                                  autoFocus\n                                  value={editingOrderData.value}\n                                  onChange={handleFieldChange}\n                                />\n                                <Button\n                                  className={styles.buttonInput}\n                                  type=\"submit\"\n                                  variant=\"contained\"\n                                  onClick={handleFieldConfirmMeasurements}\n                                >\n                                  Сохранить\n                                </Button>\n                              </div>\n                            ) : (\n                              <p\n                                style={{\n                                  borderBottom: '0.5px solid black',\n                                  marginBottom: '10px',\n                                  marginTop: '5px',\n                                }}\n                                onClick={() =>\n                                  handleFieldClickMeasurements(\n                                    order?.id,\n                                    item?.id,\n                                    'saddle',\n                                    item?.OrderItem?.saddle\n                                  )\n                                }\n                              >\n                                {item?.article}: {item?.OrderItem?.saddle}\n                              </p>\n                            )}\n                          </div>\n                        ))}\n                      </TableCell>\n\n                      <TableCell className={styles.tableCell}>\n                        {order?.Items?.map((item) => (\n                          <div\n                            style={{\n                              display: 'flex',\n                              flexDirection: 'column',\n                            }}\n                            key={item?.id}\n                          >\n                            {editingOrderData.id === order?.id &&\n                            editingOrderData.itemId === item?.id &&\n                            editingOrderData.field === 'loops' ? (\n                              <div className={styles.checkBoxContainer}>\n                                <Checkbox\n                                  className={styles.checkBox}\n                                  checked={\n                                    editingOrderData.value === undefined\n                                      ? item?.OrderItem?.loops\n                                      : editingOrderData.value\n                                  }\n                                  onChange={handleFieldChangeBoolean}\n                                />\n                                <Button\n                                  className={styles.buttonCheckBox}\n                                  type=\"submit\"\n                                  variant=\"contained\"\n                                  onClick={handleFieldConfirmMeasurements}\n                                >\n                                  Сохранить\n                                </Button>\n                              </div>\n                            ) : (\n                              <p\n                                style={{\n                                  borderBottom: '0.5px solid black',\n                                  marginBottom: '10px',\n                                  marginTop: '5px',\n                                }}\n                                onClick={() =>\n                                  handleFieldClickMeasurements(\n                                    order?.id,\n                                    item?.id,\n                                    'loops',\n                                    !item?.OrderItem?.loops\n                                  )\n                                }\n                              >\n                                {item?.article}:\n                                <Checkbox\n                                  className={styles.checkBox}\n                                  checked={item?.OrderItem?.loops}\n                                  disabled\n                                />\n                              </p>\n                            )}\n                          </div>\n                        ))}\n                      </TableCell>\n\n                      <TableCell className={styles.tableCell}>\n                        {order?.Items?.map((item) => (\n                          <div\n                            style={{\n                              display: 'flex',\n                              flexDirection: 'column',\n                            }}\n                            key={item?.id}\n                          >\n                            {editingOrderData.id === order?.id &&\n                            editingOrderData.itemId === item?.id &&\n                            editingOrderData.field === 'buttons' ? (\n                              <div className={styles.inputContainer}>\n                                <input\n                                  type=\"text\"\n                                  style={{ width: '100px', fontSize: 'medium' }}\n                                  className=\"text-field\"\n                                  required\n                                  autoFocus\n                                  value={editingOrderData.value}\n                                  onChange={handleFieldChange}\n                                />\n                                <Button\n                                  className={styles.buttonInput}\n                                  type=\"submit\"\n                                  variant=\"contained\"\n                                  onClick={handleFieldConfirmMeasurements}\n                                >\n                                  Сохранить\n                                </Button>\n                              </div>\n                            ) : (\n                              <p\n                                style={{\n                                  borderBottom: '0.5px solid black',\n                                  marginBottom: '10px',\n                                  marginTop: '5px',\n                                }}\n                                onClick={() =>\n                                  handleFieldClickMeasurements(\n                                    order?.id,\n                                    item?.id,\n                                    'buttons',\n                                    item?.OrderItem?.buttons\n                                  )\n                                }\n                              >\n                                {item?.article}: {item?.OrderItem?.buttons}\n                              </p>\n                            )}\n                          </div>\n                        ))}\n                      </TableCell>\n\n                      <TableCell className={styles.tableCell}>\n                        {order?.Items?.map((item) => (\n                          <div\n                            style={{\n                              display: 'flex',\n                              flexDirection: 'column',\n                            }}\n                            key={item?.id}\n                          >\n                            {editingOrderData.id === order?.id &&\n                            editingOrderData.itemId === item?.id &&\n                            editingOrderData.field === 'lining' ? (\n                              <div className={styles.inputContainer}>\n                                <input\n                                  type=\"text\"\n                                  style={{ width: '100px', fontSize: 'medium' }}\n                                  className=\"text-field\"\n                                  required\n                                  autoFocus\n                                  value={editingOrderData.value}\n                                  onChange={handleFieldChange}\n                                />\n                                <Button\n                                  className={styles.buttonInput}\n                                  type=\"submit\"\n                                  variant=\"contained\"\n                                  onClick={handleFieldConfirmMeasurements}\n                                >\n                                  Сохранить\n                                </Button>\n                              </div>\n                            ) : (\n                              <p\n                                style={{\n                                  borderBottom: '0.5px solid black',\n                                  marginBottom: '10px',\n                                  marginTop: '5px',\n                                }}\n                                onClick={() =>\n                                  handleFieldClickMeasurements(\n                                    order?.id,\n                                    item?.id,\n                                    'lining',\n                                    item?.OrderItem?.lining\n                                  )\n                                }\n                              >\n                                {item?.article}: {item?.OrderItem?.lining}\n                              </p>\n                            )}\n                          </div>\n                        ))}\n                      </TableCell>\n\n                      <TableCell className={styles.tableCell}>\n                        {order?.Items?.map((item) => (\n                          <div\n                            style={{\n                              display: 'flex',\n                              flexDirection: 'column',\n                              borderBottom: '0.5px solid black',\n                              marginBottom: '10px',\n                              marginTop: '5px',\n                            }}\n                            key={item?.article}\n                          >\n                            {item?.name}, арт:{item?.article}\n                            {item?.in_stock && (\n                              <span\n                                style={{\n                                  backgroundColor: 'red',\n                                  width: '60%',\n                                  color: 'white',\n                                  padding: '1px',\n                                  borderRadius: '5px',\n                                }}\n                              >\n                                В НАЛИЧИИ\n                              </span>\n                            )}\n                          </div>\n                        ))}\n                      </TableCell>\n\n                      <TableCell className={styles.tableCell}>\n                        {order?.Items?.map((item) => (\n                          <div\n                            style={{\n                              display: 'flex',\n                              flexDirection: 'column',\n                            }}\n                            key={item?.id}\n                          >\n                            {editingOrderData.id === order?.id &&\n                            editingOrderData.itemId === item?.id &&\n                            editingOrderData.field === 'selected_material' ? (\n                              <div className={styles.inputContainer}>\n                                <input\n                                  type=\"text\"\n                                  style={{ width: '100px', fontSize: 'medium' }}\n                                  className=\"text-field\"\n                                  required\n                                  autoFocus\n                                  value={editingOrderData.value}\n                                  onChange={handleFieldChange}\n                                />\n                                <Button\n                                  className={styles.buttonInput}\n                                  type=\"submit\"\n                                  variant=\"contained\"\n                                  onClick={handleFieldConfirmMeasurements}\n                                >\n                                  Сохранить\n                                </Button>\n                              </div>\n                            ) : (\n                              <p\n                                style={{\n                                  borderBottom: '0.5px solid black',\n                                  marginBottom: '10px',\n                                  marginTop: '5px',\n                                }}\n                                onClick={() =>\n                                  handleFieldClickMeasurements(\n                                    order?.id,\n                                    item?.id,\n                                    'selected_material',\n                                    item?.OrderItem?.selected_material\n                                  )\n                                }\n                              >\n                                {item?.article}:{' '}\n                                {item?.OrderItem?.selected_material}\n                              </p>\n                            )}\n                          </div>\n                        ))}\n                      </TableCell>\n\n                      <TableCell\n                        className={styles.tableCell}\n                        onClick={() =>\n                          handleFieldClick(\n                            order?.id,\n                            'admin_comments',\n                            order?.admin_comments\n                          )\n                        }\n                      >\n                        {editingOrderData.id === order?.id &&\n                        editingOrderData.field === 'admin_comments' ? (\n                          <div className={styles.inputContainer}>\n                            <TextField\n                              sx={{\n                                height: '80px',\n                                fontSize: '14px',\n                                paddingTop: '4px',\n                                paddingBottom: '4px',\n                              }}\n                              type=\"text\"\n                              className=\"text-field\"\n                              fullWidth\n                              required\n                              multiline\n                              rows={4}\n                              value={editingOrderData.value}\n                              onChange={handleFieldChange}\n                              InputProps={{\n                                sx: {\n                                  fontSize: '14px',\n                                  paddingTop: '2px',\n                                  paddingBottom: '2px',\n                                },\n                              }}\n                            />\n                            <Button\n                              className={styles.buttonInput}\n                              type=\"submit\"\n                              variant=\"contained\"\n                              onClick={handleFieldConfirm}\n                            >\n                              Сохранить\n                            </Button>\n                          </div>\n                        ) : (\n                          <span>{order?.admin_comments}</span>\n                        )}\n                      </TableCell>\n                      <TableCell\n                        className={styles.tableCell}\n                        onClick={() =>\n                          handleFieldClick(order?.id, 'status', order?.status)\n                        }\n                      >\n                        {editingOrderData.id === order?.id &&\n                        editingOrderData.field === 'status' ? (\n                          <div className={styles.inputContainer}>\n                            <select\n                              onChange={handleFieldChange}\n                              className={styles.select}\n                              name=\"status\"\n                            >\n                              <option value=\"Заказ создан\">\n                                {'Заказ создан'}\n                              </option>\n                              <option value=\"Уточнение мерок, отправка реквизитов для внесения предоплаты\">\n                                {\n                                  'Уточнение мерок, отправка реквизитов для внесения предоплаты'\n                                }\n                              </option>\n                              <option value=\"Ожидание предоплаты\">\n                                {'Ожидание предоплаты'}\n                              </option>\n                              <option value=\"Предоплата получена\">\n                                {'Предоплата получена'}\n                              </option>\n                              <option value=\"Задание сформировано\">\n                                {'Задание сформировано'}\n                              </option>\n                              <option value=\"Задание передано на производство\">\n                                {'Задание передано на производство'}\n                              </option>\n                              <option value=\"Обратная связь по заданию от производства\">\n                                {'Обратная связь по заданию от производства'}\n                              </option>\n                              <option value=\"Изделия в производстве\">\n                                {'Изделия в производстве'}\n                              </option>\n                              <option value=\"Изделие отшито\">\n                                {'Изделие отшито'}\n                              </option>\n                              <option value=\"Забрали заказ с производства\">\n                                {'Забрали заказ с производства'}\n                              </option>\n                              <option value=\"Оповещение клиента, отправка реквизитов для внесения полной оплаты\">\n                                {\n                                  'Оповещение клиента, отправка реквизитов для внесения полной оплаты'\n                                }\n                              </option>\n                              <option value=\"Получена полная оплата\">\n                                {'Получена полная оплата'}\n                              </option>\n                              <option value=\"Заказ отправлен\">\n                                {'Заказ отправлен'}\n                              </option>\n                              <option value=\"Возврат заказа\">\n                                {'Возврат заказа'}\n                              </option>\n                              <option value=\"Перешив заказа\">\n                                {'Перешив заказа'}\n                              </option>\n                            </select>\n                            <Button\n                              className={styles.buttonInput}\n                              type=\"submit\"\n                              variant=\"contained\"\n                              onClick={handleFieldConfirm}\n                            >\n                              Сохранить\n                            </Button>\n                          </div>\n                        ) : (\n                          <span>{order?.status}</span>\n                        )}\n                      </TableCell>\n                      <TableCell className={styles.tableCell}>\n                        {order?.Items?.map((item) => (\n                          <Button\n                            key={item.id}\n                            className={styles.button}\n                            type=\"submit\"\n                            variant=\"contained\"\n                            onClick={() => handleFormTask(item)}\n                          >\n                            Сформировать\n                          </Button>\n                        ))}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            <TasksForm\n              openModal={openModal}\n              itemInfo={itemInfo}\n              taskInfo={taskInfo}\n              setOpenModal={setOpenModal}\n            />\n            <InfoModal info={message} open={open} setOpen={setOpen} />\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n","/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/catalog/[category]/[item].tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/catalog/[category].tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/catalog/all-items.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/catalog/bestsellers.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/catalog/collection.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/catalog/index.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/catalog/new-arrivals.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/catalog/sale.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/checkout.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/favorites.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/forgot-pass.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/index.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/privacy.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/reset-pass/[token].tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/signin.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/signup.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/thankyou.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/LookBook/LookBookContainer/LookBookContainer.tsx",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/components/LookBook/data.ts",[],[],"/Users/maksimkoseutov/Cape-Coat-NEXT/client/src/pages/collection.tsx",[],[],{"ruleId":"840","severity":1,"message":"841","line":50,"column":6,"nodeType":"842","endLine":50,"endColumn":8,"suggestions":"843"},{"ruleId":"840","severity":1,"message":"844","line":263,"column":6,"nodeType":"842","endLine":270,"endColumn":4,"suggestions":"845"},{"ruleId":"840","severity":1,"message":"846","line":37,"column":6,"nodeType":"842","endLine":37,"endColumn":8,"suggestions":"847"},{"ruleId":"840","severity":1,"message":"846","line":38,"column":6,"nodeType":"842","endLine":38,"endColumn":8,"suggestions":"848"},{"ruleId":"840","severity":1,"message":"846","line":121,"column":6,"nodeType":"842","endLine":121,"endColumn":8,"suggestions":"849"},{"ruleId":"840","severity":1,"message":"846","line":42,"column":6,"nodeType":"842","endLine":42,"endColumn":8,"suggestions":"850"},{"ruleId":"840","severity":1,"message":"851","line":29,"column":6,"nodeType":"842","endLine":29,"endColumn":22,"suggestions":"852"},{"ruleId":"840","severity":1,"message":"853","line":40,"column":6,"nodeType":"842","endLine":40,"endColumn":21,"suggestions":"854"},{"ruleId":"840","severity":1,"message":"855","line":200,"column":6,"nodeType":"842","endLine":200,"endColumn":53,"suggestions":"856"},{"ruleId":"840","severity":1,"message":"853","line":209,"column":6,"nodeType":"842","endLine":209,"endColumn":21,"suggestions":"857"},{"ruleId":"840","severity":1,"message":"858","line":214,"column":6,"nodeType":"842","endLine":225,"endColumn":4,"suggestions":"859"},{"ruleId":"840","severity":1,"message":"860","line":230,"column":6,"nodeType":"842","endLine":230,"endColumn":24,"suggestions":"861"},{"ruleId":"840","severity":1,"message":"862","line":61,"column":35,"nodeType":"863","endLine":61,"endColumn":37},{"ruleId":"864","severity":1,"message":"865","line":57,"column":13,"nodeType":"866","endLine":61,"endColumn":15},{"ruleId":"864","severity":1,"message":"865","line":79,"column":13,"nodeType":"866","endLine":83,"endColumn":15},{"ruleId":"840","severity":1,"message":"867","line":221,"column":6,"nodeType":"842","endLine":221,"endColumn":12,"suggestions":"868"},{"ruleId":"840","severity":1,"message":"867","line":284,"column":6,"nodeType":"842","endLine":284,"endColumn":12,"suggestions":"869"},{"ruleId":"840","severity":1,"message":"870","line":24,"column":6,"nodeType":"842","endLine":24,"endColumn":8,"suggestions":"871"},{"ruleId":"840","severity":1,"message":"853","line":26,"column":6,"nodeType":"842","endLine":26,"endColumn":8,"suggestions":"872"},{"ruleId":"864","severity":1,"message":"865","line":52,"column":13,"nodeType":"866","endLine":56,"endColumn":15},{"ruleId":"864","severity":1,"message":"865","line":33,"column":13,"nodeType":"866","endLine":37,"endColumn":15},{"ruleId":"840","severity":1,"message":"873","line":34,"column":6,"nodeType":"842","endLine":34,"endColumn":16,"suggestions":"874"},{"ruleId":"840","severity":1,"message":"875","line":29,"column":6,"nodeType":"842","endLine":29,"endColumn":19,"suggestions":"876"},{"ruleId":"840","severity":1,"message":"875","line":19,"column":6,"nodeType":"842","endLine":19,"endColumn":15,"suggestions":"877"},{"ruleId":"840","severity":1,"message":"875","line":60,"column":6,"nodeType":"842","endLine":60,"endColumn":15,"suggestions":"878"},{"ruleId":"840","severity":1,"message":"875","line":18,"column":6,"nodeType":"842","endLine":18,"endColumn":15,"suggestions":"879"},{"ruleId":"840","severity":1,"message":"875","line":59,"column":6,"nodeType":"842","endLine":59,"endColumn":15,"suggestions":"880"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isTooltipVisible'. Either include it or remove the dependency array.","ArrayExpression",["881"],"React Hook useEffect has a missing dependency: 'discountPercent'. Either include it or remove the dependency array.",["882"],"React Hook useEffect has a missing dependency: 'setMessage'. Either include it or remove the dependency array.",["883"],["884"],["885"],["886"],"React Hook useEffect has a missing dependency: 'fetchCartItems'. Either include it or remove the dependency array.",["887"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["888"],"React Hook useEffect has missing dependencies: 'fetchCartItems' and 'userParams'. Either include them or remove the dependency array.",["889"],["890"],"React Hook useEffect has a missing dependency: 'countCartTotal'. Either include it or remove the dependency array.",["891"],"React Hook useEffect has a missing dependency: 'countDeliveryCost'. Either include it or remove the dependency array.",["892"],"Assignments to the 'selectedMaterialName' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["893"],["894"],"React Hook useEffect has a missing dependency: 'isNotDesktop'. Either include it or remove the dependency array.",["895"],["896"],"React Hook useEffect has a missing dependency: 'itemId'. Either include it or remove the dependency array.",["897"],"React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.",["898"],["899"],["900"],["901"],["902"],{"desc":"903","fix":"904"},{"desc":"905","fix":"906"},{"desc":"907","fix":"908"},{"desc":"907","fix":"909"},{"desc":"907","fix":"910"},{"desc":"907","fix":"911"},{"desc":"912","fix":"913"},{"desc":"914","fix":"915"},{"desc":"916","fix":"917"},{"desc":"914","fix":"918"},{"desc":"919","fix":"920"},{"desc":"921","fix":"922"},{"desc":"923","fix":"924"},{"desc":"923","fix":"925"},{"desc":"926","fix":"927"},{"desc":"928","fix":"929"},{"desc":"930","fix":"931"},{"desc":"932","fix":"933"},{"desc":"934","fix":"935"},{"desc":"934","fix":"936"},{"desc":"934","fix":"937"},{"desc":"934","fix":"938"},"Update the dependencies array to be: [isTooltipVisible]",{"range":"939","text":"940"},"Update the dependencies array to be: [selectedItems, discount, twoItemDiscount, deliveryCost, urgentMaking, cartTotal, discountPercent]",{"range":"941","text":"942"},"Update the dependencies array to be: [setMessage]",{"range":"943","text":"944"},{"range":"945","text":"944"},{"range":"946","text":"944"},{"range":"947","text":"944"},"Update the dependencies array to be: [dispatch, fetchCartItems, user]",{"range":"948","text":"949"},"Update the dependencies array to be: [cartItemsList, dispatch]",{"range":"950","text":"951"},"Update the dependencies array to be: [dispatch, user, userParamsRef, showParamsForm, userParams, fetchCartItems]",{"range":"952","text":"953"},{"range":"954","text":"951"},"Update the dependencies array to be: [cartItemsList, discountPercent, discount, twoItemDiscount, deliveryCost, urgentMaking, urgencyFee, dispatch, cartTotal, userParamsRef, countCartTotal]",{"range":"955","text":"956"},"Update the dependencies array to be: [countDeliveryCost, selectedDelivery]",{"range":"957","text":"958"},"Update the dependencies array to be: [dispatch, id, user]",{"range":"959","text":"960"},{"range":"961","text":"960"},"Update the dependencies array to be: [isNotDesktop]",{"range":"962","text":"963"},"Update the dependencies array to be: [dispatch]",{"range":"964","text":"965"},"Update the dependencies array to be: [dispatch, itemId]",{"range":"966","text":"967"},"Update the dependencies array to be: [isUserLogin, router]",{"range":"968","text":"969"},"Update the dependencies array to be: [isAdmin, router]",{"range":"970","text":"971"},{"range":"972","text":"971"},{"range":"973","text":"971"},{"range":"974","text":"971"},[1353,1355],"[isTooltipVisible]",[9369,9479],"[selectedItems, discount, twoItemDiscount, deliveryCost, urgentMaking, cartTotal, discountPercent]",[1181,1183],"[setMessage]",[1224,1226],[3538,3540],[1431,1433],[1143,1159],"[dispatch, fetchCartItems, user]",[1503,1518],"[cartItemsList, dispatch]",[6549,6596],"[dispatch, user, userParamsRef, showParamsForm, userParams, fetchCartItems]",[6810,6825],[6904,7084],"[cartItemsList, discountPercent, discount, twoItemDiscount, deliveryCost, urgentMaking, urgencyFee, dispatch, cartTotal, userParamsRef, countCartTotal]",[7202,7220],"[countDeliveryCost, selectedDelivery]",[6889,6895],"[dispatch, id, user]",[8795,8801],[650,652],"[isNotDesktop]",[965,967],"[dispatch]",[1075,1085],"[dispatch, itemId]",[974,987],"[isUserLogin, router]",[589,598],"[isAdmin, router]",[1732,1741],[559,568],[1686,1695]]